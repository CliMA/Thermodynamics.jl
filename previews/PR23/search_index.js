var documenterSearchIndex = {"docs":
[{"location":"Installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"Installation/","page":"Installation","title":"Installation","text":"Thermodynamics.jl is a Julia registered package, and can be added from the Julia Pkg manager:","category":"page"},{"location":"Installation/","page":"Installation","title":"Installation","text":"(v1.x) pkg> add Thermodynamics","category":"page"},{"location":"DevDocs/#Input-space-exploration","page":"Developer docs","title":"Input space exploration","text":"","category":"section"},{"location":"DevDocs/","page":"Developer docs","title":"Developer docs","text":"In the Tested Profiles section, we plotted the tested thermodynamic states. In this section, we explore the convergence of the input space beyond what is tested. In particular, rather than being interested in physically meaningful combinations of constructor inputs (e.g., ρ, e_int, q_tot), we are interested in all permutations of inputs within a given range of ρ, e_int, q_tot. Some of these permutations may not be physically meaningful, or likely to be observed in climate simulations, but showing the convergence space helps illustrate the buffer between our tested profiles and the nearest space where convergence fails.","category":"page"},{"location":"DevDocs/","page":"Developer docs","title":"Developer docs","text":"include(joinpath(@__DIR__, \"..\", \"ThreeDimensionalInput.jl\"))","category":"page"},{"location":"DevDocs/#Converged-cases-(3D-view)","page":"Developer docs","title":"Converged cases (3D view)","text":"","category":"section"},{"location":"DevDocs/","page":"Developer docs","title":"Developer docs","text":"(Image: )","category":"page"},{"location":"DevDocs/#Non-converged-cases-(3D-view)","page":"Developer docs","title":"Non-converged cases (3D view)","text":"","category":"section"},{"location":"DevDocs/","page":"Developer docs","title":"Developer docs","text":"(Image: )","category":"page"},{"location":"DevDocs/#Converged-cases-(2D-view),-binned-by-total-specific-humidity","page":"Developer docs","title":"Converged cases (2D view), binned by total specific humidity","text":"","category":"section"},{"location":"DevDocs/","page":"Developer docs","title":"Developer docs","text":"(Image: )","category":"page"},{"location":"DevDocs/#Non-converged-cases-(2D-view),-binned-by-total-specific-humidity","page":"Developer docs","title":"Non-converged cases (2D view), binned by total specific humidity","text":"","category":"section"},{"location":"DevDocs/","page":"Developer docs","title":"Developer docs","text":"(Image: )","category":"page"},{"location":"TestedProfiles/#Tested-Profiles","page":"Tested profiles","title":"Tested Profiles","text":"","category":"section"},{"location":"TestedProfiles/","page":"Tested profiles","title":"Tested profiles","text":"Thermodynamics.jl is tested using a set of profiles specified in test/profiles.jl.","category":"page"},{"location":"TestedProfiles/#Dry-Phase","page":"Tested profiles","title":"Dry Phase","text":"","category":"section"},{"location":"TestedProfiles/","page":"Tested profiles","title":"Tested profiles","text":"using Thermodynamics\nusing Thermodynamics.TemperatureProfiles\nusing UnPack\nusing CLIMAParameters\nusing CLIMAParameters.Planet\nusing Plots\nstruct EarthParameterSet <: AbstractEarthParameterSet end;\nconst param_set = EarthParameterSet();\nthermo_dir = dirname(dirname(pathof(Thermodynamics)));\ninclude(joinpath(thermo_dir, \"test\", \"profiles.jl\"))\nprofiles = PhaseDryProfiles(param_set, Array{Float32});\n@unpack T, ρ, z = profiles\np1 = scatter(ρ, z./10^3, xlabel=\"Density [kg/m^3]\", ylabel=\"z [km]\", title=\"Density\");\np2 = scatter(T, z./10^3, xlabel=\"Temperature [K]\", ylabel=\"z [km]\", title=\"Temperature\");\nplot(p1, p2, layout=(1,2))\nsavefig(\"tested_profiles_dry.svg\");","category":"page"},{"location":"TestedProfiles/","page":"Tested profiles","title":"Tested profiles","text":"(Image: )","category":"page"},{"location":"TestedProfiles/#Moist-Phase-in-thermodynamic-equilibrium","page":"Tested profiles","title":"Moist Phase in thermodynamic equilibrium","text":"","category":"section"},{"location":"TestedProfiles/","page":"Tested profiles","title":"Tested profiles","text":"using Thermodynamics\nusing Thermodynamics.TemperatureProfiles\nusing UnPack\nusing CLIMAParameters\nusing CLIMAParameters.Planet\nusing Plots\nstruct EarthParameterSet <: AbstractEarthParameterSet end;\nconst param_set = EarthParameterSet();\nthermo_dir = dirname(dirname(pathof(Thermodynamics)));\ninclude(joinpath(thermo_dir, \"test\", \"profiles.jl\"))\nprofiles = PhaseEquilProfiles(param_set, Array{Float32});\n@unpack T, ρ, q_tot, z = profiles\np1 = scatter(ρ, z./10^3, xlabel=\"Density [kg/m^3]\", ylabel=\"z [km]\", title=\"Density\");\np2 = scatter(T, z./10^3, xlabel=\"Temperature [K]\", ylabel=\"z [km]\", title=\"Temperature\");\np3 = scatter(q_tot*1000, z./10^3, xlabel=\"Total specific\\nhumidity [g/kg]\", ylabel=\"z [km]\", title=\"Total specific\\nhumidity\");\nplot(p1, p2, p3, layout=(1,3))\nsavefig(\"tested_profiles_virt_temp.svg\")","category":"page"},{"location":"TestedProfiles/","page":"Tested profiles","title":"Tested profiles","text":"(Image: )","category":"page"},{"location":"TemperatureProfiles/#Atmospheric-temperature-profiles","page":"Temperature profiles","title":"Atmospheric temperature profiles","text":"","category":"section"},{"location":"TemperatureProfiles/","page":"Temperature profiles","title":"Temperature profiles","text":"CurrentModule = Thermodynamics.TemperatureProfiles","category":"page"},{"location":"TemperatureProfiles/","page":"Temperature profiles","title":"Temperature profiles","text":"Several temperature profiles are available in Thermodynamics.TemperatureProfiles. Here, we plot each profile.","category":"page"},{"location":"TemperatureProfiles/#Usage","page":"Temperature profiles","title":"Usage","text":"","category":"section"},{"location":"TemperatureProfiles/","page":"Temperature profiles","title":"Temperature profiles","text":"Using a profile involves passing two arguments:","category":"page"},{"location":"TemperatureProfiles/","page":"Temperature profiles","title":"Temperature profiles","text":"param_set a parameter set, from CLIMAParameters.jl\nz altitude","category":"page"},{"location":"TemperatureProfiles/","page":"Temperature profiles","title":"Temperature profiles","text":"to one of the temperature profile constructors.","category":"page"},{"location":"TemperatureProfiles/#IsothermalProfile","page":"Temperature profiles","title":"IsothermalProfile","text":"","category":"section"},{"location":"TemperatureProfiles/","page":"Temperature profiles","title":"Temperature profiles","text":"using Thermodynamics\nusing Thermodynamics.TemperatureProfiles\nusing CLIMAParameters\nusing CLIMAParameters.Planet\nusing Plots\nstruct EarthParameterSet <: AbstractEarthParameterSet end;\nconst param_set = EarthParameterSet();\nFT = Float64;\nz = range(FT(0), stop = FT(2.5e4), length = 50);\n\nisothermal = IsothermalProfile(param_set, FT);\nargs = isothermal.(Ref(param_set), z)\nT = first.(args)\np = last.(args)\n\np1 = plot(T, z./10^3, xlabel=\"Temperature [K]\");\np2 = plot(p./10^3, z./10^3, xlabel=\"Pressure [kPa]\");\nplot(p1, p2, layout=(1,2), title=\"Isothermal\", ylabel=\"z [km]\")\nsavefig(\"isothermal.svg\")","category":"page"},{"location":"TemperatureProfiles/","page":"Temperature profiles","title":"Temperature profiles","text":"(Image: )","category":"page"},{"location":"TemperatureProfiles/#DecayingTemperatureProfile","page":"Temperature profiles","title":"DecayingTemperatureProfile","text":"","category":"section"},{"location":"TemperatureProfiles/","page":"Temperature profiles","title":"Temperature profiles","text":"using Thermodynamics.TemperatureProfiles\nusing Thermodynamics\nusing CLIMAParameters\nusing CLIMAParameters.Planet\nusing Plots\nstruct EarthParameterSet <: AbstractEarthParameterSet end;\nconst param_set = EarthParameterSet();\nFT = Float64;\nz = range(FT(0), stop = FT(2.5e4), length = 50);\n\ndecaying = DecayingTemperatureProfile{FT}(param_set);\nargs = decaying.(Ref(param_set), z)\nT = first.(args)\np = last.(args)\n\np1 = plot(T, z./10^3, xlabel=\"Temperature [K]\");\np2 = plot(p./10^3, z./10^3, xlabel=\"Pressure [kPa]\");\nplot(p1, p2, layout=(1,2), ylabel=\"z [km]\", title=\"Decaying\")\nsavefig(\"decaying.svg\")","category":"page"},{"location":"TemperatureProfiles/","page":"Temperature profiles","title":"Temperature profiles","text":"(Image: )","category":"page"},{"location":"TemperatureProfiles/#DryAdiabaticProfile","page":"Temperature profiles","title":"DryAdiabaticProfile","text":"","category":"section"},{"location":"TemperatureProfiles/","page":"Temperature profiles","title":"Temperature profiles","text":"using Thermodynamics.TemperatureProfiles\nusing Thermodynamics\nusing CLIMAParameters\nusing CLIMAParameters.Planet\nusing Plots\nstruct EarthParameterSet <: AbstractEarthParameterSet end;\nconst param_set = EarthParameterSet();\nFT = Float64;\nz = range(FT(0), stop = FT(2.5e4), length = 50);\n\ndry_adiabatic = DryAdiabaticProfile{FT}(param_set);\nargs = dry_adiabatic.(Ref(param_set), z)\nT = first.(args)\np = last.(args)\nθ_dry = Thermodynamics.dry_pottemp_given_pressure.(Ref(param_set), T, p)\n\np1 = plot(T, z./10^3, xlabel=\"Temperature [K]\");\np2 = plot(p./10^3, z./10^3, xlabel=\"Pressure [kPa]\");\np3 = plot(θ_dry, z./10^3, xlabel=\"Potential temperature [K]\");\nplot(p1, p2, p3, layout=(1,3), ylabel=\"z [km]\", title=\"Dry adiabatic\")\nsavefig(\"dry_adiabatic.svg\")","category":"page"},{"location":"TemperatureProfiles/","page":"Temperature profiles","title":"Temperature profiles","text":"(Image: )","category":"page"},{"location":"TemperatureProfiles/#Extending","page":"Temperature profiles","title":"Extending","text":"","category":"section"},{"location":"TemperatureProfiles/","page":"Temperature profiles","title":"Temperature profiles","text":"Additional constructors, or additional profiles can be added to this module by adding a struct, containing parameters needed to construct the profile, and a functor to call the profile with a parameter set and altitude.","category":"page"},{"location":"HowToGuide/#How-to-guide","page":"How-to-guide","title":"How to guide","text":"","category":"section"},{"location":"HowToGuide/","page":"How-to-guide","title":"How-to-guide","text":"If Thermodynamics.jl does not have a particular thermodynamic constructor that is needed, you can implement a new one in Thermodynamics/states.jl. In this constructor, you must add whichever arguments you wish to offer as inputs, then translate this thermodynamic state into one of:","category":"page"},{"location":"HowToGuide/","page":"How-to-guide","title":"How-to-guide","text":"PhaseDry a dry thermodynamic state, uniquely determined by two independent thermodynamic properties\nPhaseEquil a moist thermodynamic state in thermodynamic equilibrium, uniquely determined by three independent thermodynamic properties\nPhaseNonEquil a moist thermodynamic state in thermodynamic non-equilibrium, uniquely determined by four independent thermodynamic properties","category":"page"},{"location":"#How-to-guide","page":"Home","title":"How to guide","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Thermodynamics.jl provides all thermodynamic functions needed for the atmosphere and functions shared across model components. The functions are general for a moist atmosphere that includes suspended cloud condensate in the working fluid; the special case of a dry atmosphere is obtained for zero specific humidities (or simply by omitting the optional specific humidity arguments in the functions that are needed for a dry atmosphere). The general formulation assumes that there are tracers for specific humidity q, partitioned into","category":"page"},{"location":"","page":"Home","title":"Home","text":"q.tot total water specific humidity\nq.liq liquid specific humidity\nq.ice ice specific humidity","category":"page"},{"location":"","page":"Home","title":"Home","text":"to characterize the thermodynamic state and composition of moist air.","category":"page"},{"location":"","page":"Home","title":"Home","text":"There are several types of functions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Equation of state (ideal gas law):\nair_pressure\nSpecific gas constant and isobaric and isochoric specific heats of moist air:\ngas_constant_air\ncp_m\ncv_m\nSpecific latent heats of vaporization, fusion, and sublimation:\nlatent_heat_vapor\nlatent_heat_fusion\nlatent_heat_sublim\nSaturation vapor pressure and specific humidity over liquid and ice:\nsat_vapor_press_liquid\nsat_vapor_press_ice\nsat_shum\nFunctions computing energies and inverting them to obtain temperatures\ntotal_energy\ninternal_energy\nair_temperature\nFunctions to compute temperatures and partitioning of water into phases in thermodynamic equilibrium (when Gibbs' phase rule implies that the entire thermodynamic state of moist air, including the liquid and ice specific humidities, can be calculated from the 3 thermodynamic state variables, such as energy, pressure, and total specific humidity)\nliquid_fraction (fraction of condensate that is liquid)\nsaturation_adjustment (compute temperature from energy, density, and total specific humidity)\nAuxiliary functions for diagnostic purposes, e.g., other thermodynamic","category":"page"},{"location":"","page":"Home","title":"Home","text":"quantities     * liquid_ice_pottemp (liquid-ice potential temperature)","category":"page"},{"location":"","page":"Home","title":"Home","text":"A moist dynamical core that assumes equilibrium thermodynamics can be obtained from a dry dynamical core with total energy as a prognostic variable by including a tracer for the total specific humidity q.tot, using the functions, e.g., for the energies in the module, and computing the temperature T and the liquid and ice specific humidities (q.liq and q.ice) from the internal energy e_int by saturation adjustment.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Users are encouraged to first establish a thermodynamic state with one of our Thermodynamic State Constructors. For example, we would construct a moist thermodynamic state using","category":"page"},{"location":"","page":"Home","title":"Home","text":"ts = PhaseEquil(param_set, e_int, ρ, q_tot);","category":"page"},{"location":"","page":"Home","title":"Home","text":"here, ρ is the density of the moist air, and the internal energy e_int = e_tot - e_kin - geopotential is the total energy e_tot minus kinetic energy e_kin and potential energy geopotential (all energies per unit mass). Once we've established a thermodynamic state, we can call Thermodynamic state methods that support thermodynamic states:","category":"page"},{"location":"","page":"Home","title":"Home","text":"T = air_temperature(ts);\nq = PhasePartition(ts);","category":"page"},{"location":"","page":"Home","title":"Home","text":"No changes to the \"right-hand sides\" of the dynamical equations are needed for a moist dynamical core that supports clouds, as long as they do not precipitate. Additional source-sink terms arise from precipitation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Schematically, the workflow in such a core would look as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# initialize\ngeopotential = grav * z\nq_tot          = ...\nρ            = ...\n\n(u, v, w)    = ...\ne_kin           = 0.5 * (u^2 + v^2 + w^2)\n\ne_tot        = total_energy(e_kin, geopotential, T, q_tot)\n\ndo timestep   # timestepping loop\n\n  # advance dynamical variables by a timestep (temperature typically\n  # appears in terms on the rhs, such as radiative transfer)\n  advance(u, v, w, ρ, e_tot, q_tot)\n\n  # compute internal energy from dynamic variables\n  e_int = e_tot - 0.5 * (u^2 + v^2 + w^2) - geopotential\n\n  # compute temperature, pressure and condensate specific humidities,\n  ts = PhaseEquil(param_set, e_int, ρ, q_tot);\n  T = air_temperature(ts);\n  q = PhasePartition(ts);\n  p = air_pressure(ts);\n\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"For a dynamical core that additionally uses the liquid and ice specific humidities q.liq and q.ice as prognostic variables, and thus explicitly allows the presence of non-equilibrium phases such as supercooled water, the saturation adjustment in the above workflow is replaced calling a non-equilibrium moist thermodynamic state:","category":"page"},{"location":"","page":"Home","title":"Home","text":"q_tot, q_liq, q_ice = ...\nts = PhaseNonEquil(param_set, e_int, ρ, PhasePartition(q_tot, q_liq, q_ice));\nT = air_temperature(ts);\np = air_pressure(ts);","category":"page"},{"location":"API/#Thermodynamics","page":"API","title":"Thermodynamics","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"CurrentModule = Thermodynamics","category":"page"},{"location":"API/","page":"API","title":"API","text":"Thermodynamics","category":"page"},{"location":"API/#Thermodynamics.Thermodynamics","page":"API","title":"Thermodynamics.Thermodynamics","text":"Thermodynamics\n\nMoist thermodynamic functions, e.g., for air pressure (atmosphere equation of state), latent heats of phase transitions, saturation vapor pressures, and saturation specific humidities.\n\nAbstractParameterSet's\n\nMany functions defined in this module rely on CLIMAParameters.jl. CLIMAParameters.jl defines several functions (e.g., many planet parameters). For example, to compute the mole-mass ratio:\n\nusing CLIMAParameters.Planet: molmass_ratio\nusing CLIMAParameters: AbstractEarthParameterSet\nstruct EarthParameterSet <: AbstractEarthParameterSet end\nparam_set = EarthParameterSet()\n_molmass_ratio = molmass_ratio(param_set)\n\nBecause these parameters are widely used throughout this module, param_set is an argument for many Thermodynamics functions.\n\nNumerical methods for saturation adjustment\n\nSaturation adjustment function are designed to accept\n\nsat_adjust_method a type used to dispatch which numerical method to use\n\nand a function to return an instance of the numerical method. For example:\n\nsa_numerical_method_ρpq returns an instance of the numerical  method. One of these functions must be defined for the particular  numerical method and the particular formulation (ρ-p-q_tot in this case).\n\nThe currently supported numerical methods, in RootSolvers.jl, are:\n\nNewtonsMethod uses Newton method with analytic gradients\nNewtonsMethodAD uses Newton method with autodiff\nSecantMethod uses Secant method\nRegulaFalsiMethod uses Regula-Falsi method\n\n\n\n\n\n","category":"module"},{"location":"API/#Thermodynamic-State-Constructors","page":"API","title":"Thermodynamic State Constructors","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"PhasePartition\nPhasePartition_equil\nThermodynamicState\nPhaseDry\nPhaseDry_pT\nPhaseDry_pθ\nPhaseDry_pe\nPhaseDry_ρθ\nPhaseDry_ρT\nPhaseDry_ρp\nPhaseEquil\nPhaseEquil_ρTq\nPhaseEquil_pTq\nPhaseEquil_pθq\nPhaseEquil_peq\nPhaseEquil_ρθq\nPhaseEquil_ρpq\nPhaseNonEquil\nPhaseNonEquil_ρTq\nPhaseNonEquil_ρθq\nPhaseNonEquil_pθq\nPhaseNonEquil_peq\nPhaseNonEquil_ρpq","category":"page"},{"location":"API/#Thermodynamics.PhasePartition","page":"API","title":"Thermodynamics.PhasePartition","text":"PhasePartition\n\nRepresents the mass fractions of the moist air mixture.\n\nConstructors\n\nPhasePartition(q_tot::Real[, q_liq::Real[, q_ice::Real]])\nPhasePartition(ts::ThermodynamicState)\n\nSee also PhasePartition_equil\n\nFields\n\ntot\ntotal specific humidity\nliq\nliquid water specific humidity (default: 0)\nice\nice specific humidity (default: 0)\n\n\n\n\n\n","category":"type"},{"location":"API/#Thermodynamics.PhasePartition_equil","page":"API","title":"Thermodynamics.PhasePartition_equil","text":"PhasePartition_equil(param_set, T, ρ, q_tot, phase_type)\n\nPartition the phases in equilibrium, returning a PhasePartition object using the liquid_fraction function where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\nq_tot total specific humidity\nphase_type a thermodynamic state type\n\nThe residual q.tot - q.liq - q.ice is the vapor specific humidity.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.ThermodynamicState","page":"API","title":"Thermodynamics.ThermodynamicState","text":"ThermodynamicState{FT}\n\nA thermodynamic state, which can be initialized for various thermodynamic formulations (via its sub-types). All ThermodynamicState's have access to functions to compute all other thermodynamic properties.\n\n\n\n\n\n","category":"type"},{"location":"API/#Thermodynamics.PhaseDry","page":"API","title":"Thermodynamics.PhaseDry","text":"PhaseDry{FT} <: ThermodynamicState\n\nA dry thermodynamic state (q_tot = 0).\n\nConstructors\n\nPhaseDry(param_set, e_int, ρ)\n\nFields\n\nparam_set\nparameter set, used to dispatch planet parameter function calls\ne_int\ninternal energy\nρ\ndensity of dry air\n\n\n\n\n\n","category":"type"},{"location":"API/#Thermodynamics.PhaseDry_pT","page":"API","title":"Thermodynamics.PhaseDry_pT","text":"PhaseDry_pT(param_set, p, T)\n\nConstructs a PhaseDry thermodynamic state from:\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\nT temperature\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseDry_pθ","page":"API","title":"Thermodynamics.PhaseDry_pθ","text":"PhaseDry_pθ(param_set, p, θ_dry)\n\nConstructs a PhaseDry thermodynamic state from:\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\nθ_dry dry potential temperature\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseDry_pe","page":"API","title":"Thermodynamics.PhaseDry_pe","text":"PhaseDry_pe(param_set, p, e_int)\n\nConstructs a PhaseDry thermodynamic state from:\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\ne_int internal energy\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseDry_ρθ","page":"API","title":"Thermodynamics.PhaseDry_ρθ","text":"PhaseDry_ρθ(param_set, ρ, θ_dry)\n\nConstructs a PhaseDry thermodynamic state from:\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nρ density\nθ_dry dry potential temperature\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseDry_ρT","page":"API","title":"Thermodynamics.PhaseDry_ρT","text":"PhaseDry_ρT(param_set, ρ, T)\n\nConstructs a PhaseDry thermodynamic state from:\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nρ density\nT temperature\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseDry_ρp","page":"API","title":"Thermodynamics.PhaseDry_ρp","text":"PhaseDry_ρp(param_set, ρ, p)\n\nConstructs a PhaseDry thermodynamic state from:\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nρ density\np pressure\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseEquil","page":"API","title":"Thermodynamics.PhaseEquil","text":"PhaseEquil{FT} <: ThermodynamicState\n\nA thermodynamic state assuming thermodynamic equilibrium (therefore, saturation adjustment may be needed).\n\nConstructors\n\nPhaseEquil(param_set, e_int, ρ, q_tot)\n\nFields\n\nparam_set\nparameter set, used to dispatch planet parameter function calls\ne_int\ninternal energy\nρ\ndensity of air (potentially moist)\nq_tot\ntotal specific humidity\nT\ntemperature: computed via saturation_adjustment\n\n\n\n\n\n","category":"type"},{"location":"API/#Thermodynamics.PhaseEquil_ρTq","page":"API","title":"Thermodynamics.PhaseEquil_ρTq","text":"PhaseEquil_ρTq(param_set, ρ, T, q_tot)\n\nConstructs a PhaseEquil thermodynamic state from temperature.\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nρ density\nT temperature\nq_tot total specific humidity\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseEquil_pTq","page":"API","title":"Thermodynamics.PhaseEquil_pTq","text":"PhaseEquil_pTq(param_set, p, T, q_tot)\n\nConstructs a PhaseEquil thermodynamic state from temperature.\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\nT temperature\nq_tot total specific humidity\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseEquil_pθq","page":"API","title":"Thermodynamics.PhaseEquil_pθq","text":"PhaseEquil_pθq(param_set, p, θ_liq_ice, q_tot)\n\nConstructs a PhaseEquil thermodynamic state from:\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\nθ_liq_ice liquid-ice potential temperature\nq_tot total specific humidity\ntemperature_tol temperature tolerance for saturation adjustment\nmaxiter maximum iterations for saturation adjustment\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseEquil_peq","page":"API","title":"Thermodynamics.PhaseEquil_peq","text":"PhaseEquil_peq(param_set, p, e_int, q_tot)\n\nConstructs a PhaseEquil thermodynamic state from temperature.\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\ne_int temperature\nq_tot total specific humidity\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseEquil_ρθq","page":"API","title":"Thermodynamics.PhaseEquil_ρθq","text":"PhaseEquil_ρθq(param_set, ρ, θ_liq_ice, q_tot)\n\nConstructs a PhaseEquil thermodynamic state from:\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nρ (moist-)air density\nθ_liq_ice liquid-ice potential temperature\nq_tot total specific humidity\ntemperature_tol temperature tolerance for saturation adjustment\nmaxiter maximum iterations for saturation adjustment\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseEquil_ρpq","page":"API","title":"Thermodynamics.PhaseEquil_ρpq","text":"PhaseEquil_ρpq(param_set, ρ, p, q_tot, perform_sat_adjust=true)\n\nConstructs a PhaseEquil thermodynamic state from temperature.\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nρ density\np pressure\nq_tot total specific humidity\nperform_sat_adjust Bool indicating to perform saturation adjustment\nmaxiter maximum number of iterations to perform in saturation adjustment\nsat_adjust_method the numerical method to use.  See the Thermodynamics for options.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseNonEquil","page":"API","title":"Thermodynamics.PhaseNonEquil","text":" PhaseNonEquil{FT} <: ThermodynamicState\n\nA thermodynamic state assuming thermodynamic non-equilibrium (therefore, temperature can be computed directly).\n\nConstructors\n\nPhaseNonEquil(param_set, e_int, q::PhasePartition, ρ)\n\nFields\n\nparam_set\nparameter set, used to dispatch planet parameter function calls\ne_int\ninternal energy\nρ\ndensity of air (potentially moist)\nq\nphase partition\n\n\n\n\n\n","category":"type"},{"location":"API/#Thermodynamics.PhaseNonEquil_ρTq","page":"API","title":"Thermodynamics.PhaseNonEquil_ρTq","text":"PhaseNonEquil_ρTq(param_set, ρ, T, q_pt)\n\nConstructs a PhaseNonEquil thermodynamic state from:\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nρ (moist-)air density\nT temperature\nq_pt phase partition\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseNonEquil_ρθq","page":"API","title":"Thermodynamics.PhaseNonEquil_ρθq","text":"PhaseNonEquil_ρθq(param_set, ρ, θ_liq_ice, q_pt)\n\nConstructs a PhaseNonEquil thermodynamic state from:\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nρ (moist-)air density\nθ_liq_ice liquid-ice potential temperature\nq_pt phase partition\n\nand, optionally\n\npotential_temperature_tol potential temperature for non-linear equation solve\nmaxiter maximum iterations for non-linear equation solve\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseNonEquil_pθq","page":"API","title":"Thermodynamics.PhaseNonEquil_pθq","text":"PhaseNonEquil_pθq(param_set, p, θ_liq_ice, q_pt)\n\nConstructs a PhaseNonEquil thermodynamic state from:\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\nθ_liq_ice liquid-ice potential temperature\nq_pt phase partition\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseNonEquil_peq","page":"API","title":"Thermodynamics.PhaseNonEquil_peq","text":"PhaseNonEquil_peq(param_set, p, e_int, q_pt)\n\nConstructs a PhaseNonEquil thermodynamic state from:\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\ne_int internal energy\nq_pt phase partition\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseNonEquil_ρpq","page":"API","title":"Thermodynamics.PhaseNonEquil_ρpq","text":"PhaseNonEquil_ρpq(param_set, ρ, p, q_pt)\n\nConstructs a PhaseNonEquil thermodynamic state from:\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nρ density\np pressure\nq_pt phase partition\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamic-state-methods","page":"API","title":"Thermodynamic state methods","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"air_density\nair_pressure\nair_temperature\ncondensate\ncp_m\ncv_m\ndry_pottemp\nexner\ngas_constant_air\ngas_constants\nhas_condensate\nIce\nice_specific_humidity\ninternal_energy\ninternal_energy_dry\ninternal_energy_vapor\ninternal_energy_liquid\ninternal_energy_ice\ninternal_energy_sat\nlatent_heat_fusion\nlatent_heat_liq_ice\nlatent_heat_sublim\nlatent_heat_vapor\nLiquid\nliquid_fraction\nliquid_ice_pottemp\nliquid_ice_pottemp_sat\nliquid_specific_humidity\nmixing_ratios\nvol_vapor_mixing_ratio\nmoist_static_energy\nq_vap_saturation\nq_vap_saturation_liquid\nq_vap_saturation_ice\nq_vap_saturation_generic\nrelative_humidity\nsaturated\nsaturation_adjustment\nsaturation_excess\nsaturation_vapor_pressure\nsoundspeed_air\nshum_to_mixing_ratio\nspecific_enthalpy\nspecific_volume\nsupersaturation\ntotal_energy\ntotal_specific_enthalpy\ntotal_specific_humidity\nvapor_specific_humidity\nvirtual_pottemp\nvirtual_temperature","category":"page"},{"location":"API/#Thermodynamics.air_density","page":"API","title":"Thermodynamics.air_density","text":"air_density(param_set, T, p[, q::PhasePartition])\n\nThe (moist-)air density from the equation of state (ideal gas law) where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT air temperature\np pressure\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nair_density(ts::ThermodynamicState)\n\nThe (moist-)air density, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.air_pressure","page":"API","title":"Thermodynamics.air_pressure","text":"air_pressure(param_set, T, ρ[, q::PhasePartition])\n\nThe air pressure from the equation of state (ideal gas law) where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT air temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nair_pressure(ts::ThermodynamicState)\n\nThe air pressure from the equation of state (ideal gas law), given a thermodynamic state ts.\n\n\n\n\n\nair_pressure(param_set, T::FT, T∞::FT, p∞::FT, ::DryAdiabaticProcess)\n\nThe air pressure for an isentropic process, where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nT∞ ambient temperature\np∞ ambient pressure\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.air_temperature","page":"API","title":"Thermodynamics.air_temperature","text":"air_temperature(param_set, e_int, q::PhasePartition)\n\nThe air temperature, where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\ne_int internal energy per unit mass\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nair_temperature(ts::ThermodynamicState)\n\nThe air temperature, given a thermodynamic state ts.\n\n\n\n\n\nair_temperature(param_set, p::FT, θ::FT, Φ::FT, ::DryAdiabaticProcess)\n\nThe air temperature for an isentropic process, where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\nθ potential temperature\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.condensate","page":"API","title":"Thermodynamics.condensate","text":"condensate(q::PhasePartition{FT})\ncondensate(ts::ThermodynamicState)\n\nCondensate of the phase partition.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.cp_m","page":"API","title":"Thermodynamics.cp_m","text":"cp_m(param_set, [q::PhasePartition])\n\nThe isobaric specific heat capacity of moist air given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\n\nand, optionally\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\ncp_m(ts::ThermodynamicState)\n\nThe isobaric specific heat capacity of moist air, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.cv_m","page":"API","title":"Thermodynamics.cv_m","text":"cv_m(param_set, [q::PhasePartition])\n\nThe isochoric specific heat capacity of moist air given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\n\nand, optionally\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\ncv_m(ts::ThermodynamicState)\n\nThe isochoric specific heat capacity of moist air, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.dry_pottemp","page":"API","title":"Thermodynamics.dry_pottemp","text":"dry_pottemp(param_set, T, ρ[, q::PhasePartition])\n\nThe dry potential temperature where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\n\n\ndry_pottemp(ts::ThermodynamicState)\n\nThe dry potential temperature, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.exner","page":"API","title":"Thermodynamics.exner","text":"exner(param_set, T, ρ[, q::PhasePartition)])\n\nThe Exner function where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nexner(ts::ThermodynamicState)\n\nThe Exner function, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.gas_constant_air","page":"API","title":"Thermodynamics.gas_constant_air","text":"gas_constant_air(param_set, [q::PhasePartition])\n\nThe specific gas constant of moist air given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\ngas_constant_air(ts::ThermodynamicState)\n\nThe specific gas constant of moist air given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.gas_constants","page":"API","title":"Thermodynamics.gas_constants","text":"(R_m, cp_m, cv_m, γ_m) = gas_constants(param_set, [q::PhasePartition])\n\nWrapper to compute all gas constants at once, where optionally,\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nq PhasePartition. Without this argument, the results are for dry air.\n\nThe function returns a tuple of\n\nR_m gas_constant_air\ncp_m cp_m\ncv_m cv_m\nγ_m = cp_m/cv_m\n\n\n\n\n\n(R_m, cp_m, cv_m, γ_m) = gas_constants(ts::ThermodynamicState)\n\nWrapper to compute all gas constants at once, given a thermodynamic state ts.\n\nThe function returns a tuple of\n\nR_m gas_constant_air\ncp_m cp_m\ncv_m cv_m\nγ_m = cp_m/cv_m\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.has_condensate","page":"API","title":"Thermodynamics.has_condensate","text":"has_condensate(q::PhasePartition{FT})\nhas_condensate(ts::ThermodynamicState)\n\nBool indicating if condensate exists in the phase partition\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.Ice","page":"API","title":"Thermodynamics.Ice","text":"Ice <: Phase\n\nAn ice phase, to dispatch over saturation_vapor_pressure and q_vap_saturation_generic.\n\n\n\n\n\n","category":"type"},{"location":"API/#Thermodynamics.ice_specific_humidity","page":"API","title":"Thermodynamics.ice_specific_humidity","text":"ice_specific_humidity(ts::ThermodynamicState)\nice_specific_humidity(q::PhasePartition)\n\nIce specific humidity given\n\nts a thermodynamic state\n\nor\n\nq a PhasePartition\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.internal_energy","page":"API","title":"Thermodynamics.internal_energy","text":"internal_energy(param_set, T[, q::PhasePartition])\n\nThe internal energy per unit mass, given a thermodynamic state ts or\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\ninternal_energy(ts::ThermodynamicState)\n\nThe internal energy per unit mass, given a thermodynamic state ts.\n\n\n\n\n\ninternal_energy(ρ::FT, ρe::FT, ρu::AbstractVector{FT}, e_pot::FT)\n\nThe internal energy per unit mass, given\n\nρ (moist-)air density\nρe total energy per unit volume\nρu momentum vector\ne_pot potential energy (e.g., gravitational) per unit mass\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.internal_energy_dry","page":"API","title":"Thermodynamics.internal_energy_dry","text":"internal_energy_dry(param_set, T)\n\nThe dry air internal energy\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\n\n\n\n\n\ninternal_energy_dry(ts::ThermodynamicState)\n\nThe the dry air internal energy, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.internal_energy_vapor","page":"API","title":"Thermodynamics.internal_energy_vapor","text":"internal_energy_vapor(param_set, T)\n\nThe water vapor internal energy\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\n\n\n\n\n\ninternal_energy_vapor(ts::ThermodynamicState)\n\nThe the water vapor internal energy, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.internal_energy_liquid","page":"API","title":"Thermodynamics.internal_energy_liquid","text":"internal_energy_liquid(param_set, T)\n\nThe liquid water internal energy\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\n\n\n\n\n\ninternal_energy_liquid(ts::ThermodynamicState)\n\nThe the liquid water internal energy, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.internal_energy_ice","page":"API","title":"Thermodynamics.internal_energy_ice","text":"internal_energy_ice(param_set, T)\n\nThe ice internal energy\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\n\n\n\n\n\ninternal_energy_ice(ts::ThermodynamicState)\n\nThe the ice internal energy, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.internal_energy_sat","page":"API","title":"Thermodynamics.internal_energy_sat","text":"internal_energy_sat(param_set, T, ρ, q_tot, phase_type)\n\nThe internal energy per unit mass in thermodynamic equilibrium at saturation where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\nq_tot total specific humidity\nphase_type a thermodynamic state type\n\n\n\n\n\ninternal_energy_sat(ts::ThermodynamicState)\n\nThe internal energy per unit mass in thermodynamic equilibrium at saturation, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.latent_heat_fusion","page":"API","title":"Thermodynamics.latent_heat_fusion","text":"latent_heat_fusion(param_set, T::FT) where {FT<:Real}\n\nThe specific latent heat of fusion where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\n\n\n\n\n\nlatent_heat_fusion(ts::ThermodynamicState)\n\nThe specific latent heat of fusion given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.latent_heat_liq_ice","page":"API","title":"Thermodynamics.latent_heat_liq_ice","text":"latent_heat_liq_ice(param_set, q::PhasePartition{FT})\n\nEffective latent heat of condensate (weighted sum of liquid and ice), with specific latent heat evaluated at reference temperature T_0 given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.latent_heat_sublim","page":"API","title":"Thermodynamics.latent_heat_sublim","text":"latent_heat_sublim(param_set, T::FT) where {FT<:Real}\n\nThe specific latent heat of sublimation where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\n\n\n\n\n\nlatent_heat_sublim(ts::ThermodynamicState)\n\nThe specific latent heat of sublimation given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.latent_heat_vapor","page":"API","title":"Thermodynamics.latent_heat_vapor","text":"latent_heat_vapor(param_set, T::FT) where {FT<:Real}\n\nThe specific latent heat of vaporization where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\n\n\n\n\n\nlatent_heat_vapor(ts::ThermodynamicState)\n\nThe specific latent heat of vaporization given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.Liquid","page":"API","title":"Thermodynamics.Liquid","text":"Liquid <: Phase\n\nA liquid phase, to dispatch over saturation_vapor_pressure and q_vap_saturation_generic.\n\n\n\n\n\n","category":"type"},{"location":"API/#Thermodynamics.liquid_fraction","page":"API","title":"Thermodynamics.liquid_fraction","text":"liquid_fraction(param_set, T, phase_type[, q])\n\nThe fraction of condensate that is liquid where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nphase_type a thermodynamic state type\n\nPhaseNonEquil behavior\n\nIf q.liq or q.ice are nonzero, the liquid fraction is computed from them.\n\nThermodynamicState\n\nOtherwise, phase equilibrium is assumed so that the fraction of liquid is a function that is 1 above T_freeze and goes to zero below T_freeze.\n\n\n\n\n\nliquid_fraction(ts::ThermodynamicState)\n\nThe fraction of condensate that is liquid given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.liquid_ice_pottemp","page":"API","title":"Thermodynamics.liquid_ice_pottemp","text":"liquid_ice_pottemp(param_set, T, ρ, q::PhasePartition)\n\nThe liquid-ice potential temperature where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nliquid_ice_pottemp(ts::ThermodynamicState)\n\nThe liquid-ice potential temperature, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.liquid_ice_pottemp_sat","page":"API","title":"Thermodynamics.liquid_ice_pottemp_sat","text":"liquid_ice_pottemp_sat(param_set, T, ρ, phase_type[, q::PhasePartition])\n\nThe saturated liquid ice potential temperature where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\nphase_type a thermodynamic state type\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nliquid_ice_pottemp_sat(param_set, T, ρ, phase_type, q_tot)\n\nThe saturated liquid ice potential temperature where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\nphase_type a thermodynamic state type\nq_tot total specific humidity\n\n\n\n\n\nliquid_ice_pottemp_sat(ts::ThermodynamicState)\n\nThe liquid potential temperature given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.liquid_specific_humidity","page":"API","title":"Thermodynamics.liquid_specific_humidity","text":"liquid_specific_humidity(ts::ThermodynamicState)\nliquid_specific_humidity(q::PhasePartition)\n\nLiquid specific humidity given\n\nts a thermodynamic state\n\nor\n\nq a PhasePartition\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.mixing_ratios","page":"API","title":"Thermodynamics.mixing_ratios","text":"mixing_ratios(q::PhasePartition)\n\nMixing ratios\n\nr.tot total mixing ratio\nr.liq liquid mixing ratio\nr.ice ice mixing ratio\n\ngiven a phase partition, q.\n\n\n\n\n\nmixing_ratios(ts::ThermodynamicState)\n\nMixing ratios stored, in a phase partition, for\n\ntotal specific humidity\nliquid specific humidity\nice specific humidity\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.vol_vapor_mixing_ratio","page":"API","title":"Thermodynamics.vol_vapor_mixing_ratio","text":"vol_vapor_mixing_ratio(param_set, q::PhasePartition)\n\nVolume mixing ratio of water vapor given a parameter set param_set and a phase partition, q.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.moist_static_energy","page":"API","title":"Thermodynamics.moist_static_energy","text":"moist_static_energy(ts, e_pot)\n\nMoist static energy, given\n\nts a thermodynamic state\ne_pot potential energy (e.g., gravitational) per unit mass\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.q_vap_saturation","page":"API","title":"Thermodynamics.q_vap_saturation","text":"q_vap_saturation(param_set, T, ρ, phase_type[, q::PhasePartition])\n\nCompute the saturation specific humidity, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\nphase_type a thermodynamic state type\n\nand, optionally,\n\nq PhasePartition\n\nIf the PhasePartition q is given, the saturation specific humidity is that of a mixture of liquid and ice, computed in a thermodynamically consistent way from the weighted sum of the latent heats of the respective phase transitions (Pressel et al., JAMES, 2015). That is, the saturation vapor pressure and from it the saturation specific humidity are computed from a weighted mean of the latent heats of vaporization and sublimation, with the weights given by the fractions of condensates q.liq/(q.liq + q.ice) and q.ice/(q.liq + q.ice) that are liquid and ice, respectively.\n\nIf the PhasePartition q is not given, or has zero liquid and ice specific humidities, the saturation specific humidity is that over a mixture of liquid and ice, with the fraction of liquid given by temperature dependent liquid_fraction(param_set, T, phase_type) and the fraction of ice by the complement 1 - liquid_fraction(param_set, T, phase_type).\n\n\n\n\n\nq_vap_saturation(ts::ThermodynamicState)\n\nCompute the saturation specific humidity, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.q_vap_saturation_liquid","page":"API","title":"Thermodynamics.q_vap_saturation_liquid","text":"q_vap_saturation_liquid(ts::ThermodynamicState)\n\nCompute the saturation specific humidity over liquid, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.q_vap_saturation_ice","page":"API","title":"Thermodynamics.q_vap_saturation_ice","text":"q_vap_saturation_ice(ts::ThermodynamicState)\n\nCompute the saturation specific humidity over ice, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.q_vap_saturation_generic","page":"API","title":"Thermodynamics.q_vap_saturation_generic","text":"q_vap_saturation_generic(param_set, T, ρ[, phase=Liquid()])\n\nCompute the saturation specific humidity over a plane surface of condensate, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nLiquid() indicating condensate is liquid\nIce() indicating condensate is ice\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.relative_humidity","page":"API","title":"Thermodynamics.relative_humidity","text":"relative_humidity(param_set, T, p, phase_type, q::PhasePartition)\n\nThe relative humidity, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\nphase_type a thermodynamic state type\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\n\n\nrelative_humidity(ts::ThermodynamicState)\n\nThe relative humidity, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.saturated","page":"API","title":"Thermodynamics.saturated","text":"saturated(ts::ThermodynamicState)\n\nBoolean indicating if thermodynamic state is saturated.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.saturation_adjustment","page":"API","title":"Thermodynamics.saturation_adjustment","text":"saturation_adjustment(\n    sat_adjust_method,\n    param_set,\n    e_int,\n    ρ,\n    q_tot,\n    phase_type,\n    maxiter,\n    temperature_tol\n)\n\nCompute the temperature that is consistent with\n\nsat_adjust_method the numerical method to use.  See the Thermodynamics for options.\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\ne_int internal energy\nρ (moist-)air density\nq_tot total specific humidity\nphase_type a thermodynamic state type\nmaxiter maximum iterations for non-linear equation solve\ntemperature_tol temperature tolerance\n\nby finding the root of\n\ne_int - internal_energy_sat(param_set, T, ρ, q_tot, phase_type) = 0\n\nusing the given numerical method sat_adjust_method.\n\nSee also saturation_adjustment.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.saturation_excess","page":"API","title":"Thermodynamics.saturation_excess","text":"saturation_excess(param_set, T, ρ, phase_type, q::PhasePartition)\n\nThe saturation excess in equilibrium where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\nphase_type a thermodynamic state type\nq PhasePartition\n\nThe saturation excess is the difference between the total specific humidity q.tot and the saturation specific humidity in equilibrium, and it is defined to be nonzero only if this difference is positive.\n\n\n\n\n\nsaturation_excess(ts::ThermodynamicState)\n\nCompute the saturation excess in equilibrium, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.saturation_vapor_pressure","page":"API","title":"Thermodynamics.saturation_vapor_pressure","text":"saturation_vapor_pressure(param_set, T, Liquid())\n\nReturn the saturation vapor pressure over a plane liquid surface given\n\nT temperature\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nsaturation_vapor_pressure(param_set, T, Ice())\n\nReturn the saturation vapor pressure over a plane ice surface given\n\nT temperature\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nsaturation_vapor_pressure(param_set, T, LH_0, Δcp)\n\nCompute the saturation vapor pressure over a plane surface by integration of the Clausius-Clapeyron relation.\n\nThe Clausius-Clapeyron relation\n\n`dlog(p_v_sat)/dT = [LH_0 + Δcp * (T-T_0)]/(R_v*T^2)`\n\nis integrated from the triple point temperature T_triple, using Kirchhoff's relation\n\n`L = LH_0 + Δcp * (T - T_0)`\n\nfor the specific latent heat L with constant isobaric specific heats of the phases. The linear dependence of the specific latent heat on temperature T allows analytic integration of the Clausius-Clapeyron relation to obtain the saturation vapor pressure p_v_sat as a function of the triple point pressure press_triple.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.soundspeed_air","page":"API","title":"Thermodynamics.soundspeed_air","text":"soundspeed_air(param_set, T[, q::PhasePartition])\n\nThe speed of sound in unstratified air, where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nsoundspeed_air(ts::ThermodynamicState)\n\nThe speed of sound in unstratified air given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.shum_to_mixing_ratio","page":"API","title":"Thermodynamics.shum_to_mixing_ratio","text":"shum_to_mixing_ratio(q, q_tot)\n\nMixing ratio, from specific humidity\n\nq specific humidity\nq_tot total specific humidity\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.specific_enthalpy","page":"API","title":"Thermodynamics.specific_enthalpy","text":"specific_enthalpy(e_int, R_m, T)\n\nSpecific enthalpy, given\n\ne_int internal specific energy\nR_m gas_constant_air\nT air temperature\n\n\n\n\n\nspecific_enthalpy(ts)\n\nSpecific enthalpy, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.specific_volume","page":"API","title":"Thermodynamics.specific_volume","text":"specific_volume(ts::ThermodynamicState)\n\nThe (moist-)air specific volume, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.supersaturation","page":"API","title":"Thermodynamics.supersaturation","text":"supersaturation(param_set, q, ρ, T, Liquid())\nsupersaturation(param_set, q, ρ, T, Ice())\nsupersaturation(ts, Ice())\nsupersaturation(ts, Liquid())\n\nparam_set - abstract set with earth parameters\nq - phase partition\nρ - air density,\nT - air temperature\nLiquid(), Ice() - liquid or ice phase to dispatch over.\nts thermodynamic state\n\nReturns supersaturation (qv/qv_sat -1) over water or ice.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.total_energy","page":"API","title":"Thermodynamics.total_energy","text":"total_energy(param_set, e_kin, e_pot, T[, q::PhasePartition])\n\nThe total energy per unit mass, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\ne_kin kinetic energy per unit mass\ne_pot potential energy per unit mass\nT temperature\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\ntotal_energy(e_kin, e_pot, ts::ThermodynamicState)\n\nThe total energy per unit mass given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.total_specific_enthalpy","page":"API","title":"Thermodynamics.total_specific_enthalpy","text":"total_specific_enthalpy(e_tot, R_m, T)\n\nTotal specific enthalpy, given\n\ne_tot total specific energy\nR_m gas_constant_air\nT air temperature\n\n\n\n\n\ntotal_specific_enthalpy(ts)\n\nTotal specific enthalpy, given\n\ne_tot total specific energy\nts a thermodynamic state\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.total_specific_humidity","page":"API","title":"Thermodynamics.total_specific_humidity","text":"total_specific_humidity(ts::ThermodynamicState)\ntotal_specific_humidity(param_set, T, p, relative_humidity)\n\nTotal specific humidity given\n\nts a thermodynamic state\n\nor\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\np pressure\nrelative_humidity relative humidity (can exceed 1 when there is super saturation/condensate)\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.vapor_specific_humidity","page":"API","title":"Thermodynamics.vapor_specific_humidity","text":"vapor_specific_humidity(q::PhasePartition{FT})\n\nThe vapor specific humidity, given a PhasePartition q.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.virtual_pottemp","page":"API","title":"Thermodynamics.virtual_pottemp","text":"virtual_pottemp(param_set, T, ρ[, q::PhasePartition])\n\nThe virtual potential temperature where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nvirtual_pottemp(ts::ThermodynamicState)\n\nThe virtual potential temperature, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.virtual_temperature","page":"API","title":"Thermodynamics.virtual_temperature","text":"virtual_temperature(param_set, T, ρ[, q::PhasePartition])\n\nThe virtual temperature where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nvirtual_temperature(ts::ThermodynamicState)\n\nThe virtual temperature, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Dispatch-types","page":"API","title":"Dispatch types","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"DryAdiabaticProcess","category":"page"},{"location":"API/#Thermodynamics.DryAdiabaticProcess","page":"API","title":"Thermodynamics.DryAdiabaticProcess","text":"DryAdiabaticProcess\n\nFor dispatching to isentropic formulas\n\n\n\n\n\n","category":"type"},{"location":"API/#Temperature-Profiles","page":"API","title":"Temperature Profiles","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"TemperatureProfiles.IsothermalProfile\nTemperatureProfiles.TemperatureProfile\nTemperatureProfiles.DryAdiabaticProfile\nTemperatureProfiles.DecayingTemperatureProfile","category":"page"},{"location":"API/#Thermodynamics.TemperatureProfiles.IsothermalProfile","page":"API","title":"Thermodynamics.TemperatureProfiles.IsothermalProfile","text":"IsothermalProfile(param_set, T_virt)\nIsothermalProfile(param_set, ::Type{FT<:AbstractFloat})\n\nA uniform virtual temperature profile, which is implemented as a special case of DecayingTemperatureProfile.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.TemperatureProfiles.TemperatureProfile","page":"API","title":"Thermodynamics.TemperatureProfiles.TemperatureProfile","text":"TemperatureProfile\n\nSpecifies the temperature or virtual temperature profile for a reference state.\n\nInstances of this type are required to be callable objects with the following signature\n\nT,p = (::TemperatureProfile)(param_set::AbstractParameterSet, z::FT) where {FT}\n\nwhere T is the temperature or virtual temperature (in K), and p is the pressure (in Pa).\n\n\n\n\n\n","category":"type"},{"location":"API/#Thermodynamics.TemperatureProfiles.DryAdiabaticProfile","page":"API","title":"Thermodynamics.TemperatureProfiles.DryAdiabaticProfile","text":"DryAdiabaticProfile{FT} <: TemperatureProfile{FT}\n\nA temperature profile that has uniform dry potential temperature θ\n\nFields\n\nT_surface\nSurface temperature (K)\nT_min_ref\nMinimum temperature (K)\n\n\n\n\n\n","category":"type"},{"location":"API/#Thermodynamics.TemperatureProfiles.DecayingTemperatureProfile","page":"API","title":"Thermodynamics.TemperatureProfiles.DecayingTemperatureProfile","text":"DecayingTemperatureProfile{F} <: TemperatureProfile{FT}\n\nA virtual temperature profile that decays smoothly with height z, from T_virt_surf to T_min_ref over a height scale H_t. The default height scale H_t is the density scale height evaluated with T_virt_surf.\n\nT_textv(z) = max(T_textv sfc  (T_textv sfc - T_textv min) tanh(zH_textt)\n\nFields\n\nT_virt_surf\nVirtual temperature at surface (K)\nT_min_ref\nMinimum virtual temperature at the top of the atmosphere (K)\nH_t\nHeight scale over which virtual temperature drops (m)\n\n\n\n\n\n","category":"type"}]
}
