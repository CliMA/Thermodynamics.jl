var documenterSearchIndex = {"docs":
[{"location":"Installation/#Installation-1","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"Installation/#","page":"Installation","title":"Installation","text":"MoistThermodynamics.jl is a Julia registered package, and can be added from the Julia Pkg manager:","category":"page"},{"location":"Installation/#","page":"Installation","title":"Installation","text":"(v1.x) pkg> add MoistThermodynamics","category":"page"},{"location":"TestedProfiles/#Tested-Profiles-1","page":"Tested profiles","title":"Tested Profiles","text":"","category":"section"},{"location":"TestedProfiles/#","page":"Tested profiles","title":"Tested profiles","text":"MoistThermodynamics.jl is tested using a set of profiles, or thermodynamic state regimes, specified in tested_profiles.","category":"page"},{"location":"TestedProfiles/#Dry-Phase-1","page":"Tested profiles","title":"Dry Phase","text":"","category":"section"},{"location":"TestedProfiles/#","page":"Tested profiles","title":"Tested profiles","text":"using MoistThermodynamics\nMT = MoistThermodynamics\nusing CLIMAParameters\nusing CLIMAParameters.Planet\nusing Plots\n\nstruct EarthParameterSet <: AbstractEarthParameterSet end;\nconst param_set = EarthParameterSet();\n\nFT = Float64;\ne_int, ρ, q_tot, q_pt, T, p, θ_liq_ice = MT.tested_profiles(param_set, 50, FT);\n\nmask_dry = q_tot .≈ 0;\nρ_dry = ρ[mask_dry];\nT_dry = T[mask_dry];\n\nscatter(ρ_dry, T_dry, xlabel=\"density [kg/m^3]\", ylabel=\"T [K]\", title=\"Tested states for dry thermodynamic phase\", legend=false);\nsavefig(\"tested_profiles_dry.svg\");","category":"page"},{"location":"TestedProfiles/#","page":"Tested profiles","title":"Tested profiles","text":"(Image: )","category":"page"},{"location":"TestedProfiles/#Moist-Phase-in-thermodynamic-equilibrium-1","page":"Tested profiles","title":"Moist Phase in thermodynamic equilibrium","text":"","category":"section"},{"location":"TestedProfiles/#","page":"Tested profiles","title":"Tested profiles","text":"Here is a 2D representation:","category":"page"},{"location":"TestedProfiles/#","page":"Tested profiles","title":"Tested profiles","text":"using MoistThermodynamics\nMT = MoistThermodynamics\nusing CLIMAParameters\nusing CLIMAParameters.Planet\nusing Plots\n\nstruct EarthParameterSet <: AbstractEarthParameterSet end;\nconst param_set = EarthParameterSet();\n\nFT = Float64;\ne_int, ρ, q_tot, q_pt, T, p, θ_liq_ice = MT.tested_profiles(param_set, 50, FT);\nscatter(ρ, T, xlabel=\"density [kg/m^3]\", ylabel=\"T [K]\", marker_z=q_tot, title=\"Tested states for moist thermodynamic phase\", label=\"q_tot\");\nsavefig(\"tested_profiles.svg\")","category":"page"},{"location":"TestedProfiles/#","page":"Tested profiles","title":"Tested profiles","text":"(Image: )","category":"page"},{"location":"TestedProfiles/#","page":"Tested profiles","title":"Tested profiles","text":"And here is a 3D representation:","category":"page"},{"location":"TestedProfiles/#","page":"Tested profiles","title":"Tested profiles","text":"using MoistThermodynamics\nMT = MoistThermodynamics\nusing CLIMAParameters\nusing CLIMAParameters.Planet\nusing Plots\n\nstruct EarthParameterSet <: AbstractEarthParameterSet end;\nconst param_set = EarthParameterSet();\n\nFT = Float64;\ne_int, ρ, q_tot, q_pt, T, p, θ_liq_ice = MT.tested_profiles(param_set, 50, FT);\n\n# initialize a 3D plot with 1 empty series\nplt = plot3d(\n    1,\n    xlim = (min(ρ...), max(ρ...)),\n    ylim = (min(T...), max(T...)),\n    zlim = (min(q_tot...), max(q_tot...)),\n    xlabel=\"density [kg/m^3]\",\n    ylabel=\"T [K]\",\n    zlabel=\"total specific humidity []\",\n    legend=false,\n    title = \"Tested states for moist thermodynamic phase\",\n    marker = 2,\n)\n\n# build an animated gif by pushing new points to the plot, saving every nth frame\n@gif for i=1:length(ρ)\n    push!(plt, ρ[i], T[i], q_tot[i])\nend every 5","category":"page"},{"location":"TestedProfiles/#Moist-Phase-in-thermodynamic-non-equilibrium-1","page":"Tested profiles","title":"Moist Phase in thermodynamic non-equilibrium","text":"","category":"section"},{"location":"TestedProfiles/#","page":"Tested profiles","title":"Tested profiles","text":"In progress...","category":"page"},{"location":"HowToGuide/#How-to-guide-1","page":"How-to-guide","title":"How-to-guide","text":"","category":"section"},{"location":"HowToGuide/#Usage-1","page":"How-to-guide","title":"Usage","text":"","category":"section"},{"location":"HowToGuide/#","page":"How-to-guide","title":"How-to-guide","text":"Users are encouraged to first establish a thermodynamic state with one of our Thermodynamic State Constructors. For example, we would construct a moist thermodynamic state using","category":"page"},{"location":"HowToGuide/#","page":"How-to-guide","title":"How-to-guide","text":"ts = PhaseEquil(param_set, e_int, ρ, q_tot);","category":"page"},{"location":"HowToGuide/#","page":"How-to-guide","title":"How-to-guide","text":"here, ρ is the density of the moist air, and the internal energy e_int = e_tot - e_kin - geopotential is the total energy e_tot minus kinetic energy e_kin and potential energy geopotential (all energies per unit mass). Once we've established a thermodynamic state, we can call Thermodynamic state methods that support thermodynamic states:","category":"page"},{"location":"HowToGuide/#","page":"How-to-guide","title":"How-to-guide","text":"T = air_temperature(ts);\nq = PhasePartition(ts);","category":"page"},{"location":"HowToGuide/#","page":"How-to-guide","title":"How-to-guide","text":"No changes to the \"right-hand sides\" of the dynamical equations are needed for a moist dynamical core that supports clouds, as long as they do not precipitate. Additional source-sink terms arise from precipitation.","category":"page"},{"location":"HowToGuide/#","page":"How-to-guide","title":"How-to-guide","text":"Schematically, the workflow in such a core would look as follows:","category":"page"},{"location":"HowToGuide/#","page":"How-to-guide","title":"How-to-guide","text":"# initialize\ngeopotential = grav * z\nq_tot          = ...\nρ            = ...\n\n(u, v, w)    = ...\ne_kin           = 0.5 * (u^2 + v^2 + w^2)\n\ne_tot        = total_energy(e_kin, geopotential, T, q_tot)\n\ndo timestep   # timestepping loop\n\n  # advance dynamical variables by a timestep (temperature typically\n  # appears in terms on the rhs, such as radiative transfer)\n  advance(u, v, w, ρ, e_tot, q_tot)\n\n  # compute internal energy from dynamic variables\n  e_int = e_tot - 0.5 * (u^2 + v^2 + w^2) - geopotential\n\n  # compute temperature, pressure and condensate specific humidities,\n  ts = PhaseEquil(param_set, e_int, ρ, q_tot);\n  T = air_temperature(ts);\n  q = PhasePartition(ts);\n  p = air_pressure(ts);\n\nend","category":"page"},{"location":"HowToGuide/#","page":"How-to-guide","title":"How-to-guide","text":"For a dynamical core that additionally uses the liquid and ice specific humidities q.liq and q.ice as prognostic variables, and thus explicitly allows the presence of non-equilibrium phases such as supercooled water, the saturation adjustment in the above workflow is replaced calling a non-equilibrium moist thermodynamic state:","category":"page"},{"location":"HowToGuide/#","page":"How-to-guide","title":"How-to-guide","text":"q_tot, q_liq, q_ice = ...\nts = PhaseNonEquil(param_set, e_int, ρ, PhasePartition(q_tot, q_liq, q_ice));\nT = air_temperature(ts);\np = air_pressure(ts);","category":"page"},{"location":"HowToGuide/#Extending-1","page":"How-to-guide","title":"Extending","text":"","category":"section"},{"location":"HowToGuide/#","page":"How-to-guide","title":"How-to-guide","text":"If MoistThermodynamics.jl does not have a particular thermodynamic constructor that is needed, one can implement a new one in MoistThermodynamics/src/states.jl. In this constructor, one must add whichever arguments they wish to offer as inputs, then translate this thermodynamic state into one of:","category":"page"},{"location":"HowToGuide/#","page":"How-to-guide","title":"How-to-guide","text":"PhaseDry a dry thermodynamic state, uniquely determined by two independent thermodynamic properties\nPhaseEquil a moist thermodynamic state in thermodynamic equilibrium, uniquely determined by three independent thermodynamic properties\nPhaseNonEquil a moist thermodynamic state in thermodynamic non-equilibrium, uniquely determined by four independent thermodynamic properties","category":"page"},{"location":"HowToGuide/#","page":"How-to-guide","title":"How-to-guide","text":"For example, to add a thermodynamic state constructor that accepts temperature, density and total specific humidity, we could add the following code to states:","category":"page"},{"location":"HowToGuide/#","page":"How-to-guide","title":"How-to-guide","text":"\"\"\"\n    TemperatureSHumEquil_given_density(param_set, T, ρ, q_tot)\n\nConstructs a [`PhaseEquil`](@ref) thermodynamic state from temperature.\n\n - `param_set` parameter set, used to dispatch planet parameter function calls\n - `T` temperature\n - `ρ` density\n - `q_tot` total specific humidity\n\"\"\"\nfunction TemperatureSHumEquil(\n    param_set::APS,\n    T::FT,\n    ρ::FT,\n    q_tot::FT,\n) where {FT <: Real}\n    q = PhasePartition_equil(param_set, T, ρ, q_tot)\n    e_int = internal_energy(param_set, T, q)\n    return PhaseEquil{FT, typeof(param_set)}(param_set, e_int, ρ, q_tot, T)\nend","category":"page"},{"location":"#MoistThermodynamics-1","page":"Home","title":"MoistThermodynamics","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"MoistThermodynamics.jl provides all thermodynamic functions needed for the atmosphere and functions shared across model components. The functions are general for a moist atmosphere that includes suspended cloud condensate in the working fluid; the special case of a dry atmosphere is obtained for zero specific humidities (or simply by omitting the optional specific humidity arguments in the functions that are needed for a dry atmosphere). The general formulation assumes that there are tracers for specific humidity q, partitioned into","category":"page"},{"location":"#","page":"Home","title":"Home","text":"q.tot total water specific humidity\nq.liq liquid specific humidity\nq.ice ice specific humidity","category":"page"},{"location":"#","page":"Home","title":"Home","text":"to characterize the thermodynamic state and composition of moist air.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"There are several types of functions:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Equation of state (ideal gas law):\nair_pressure\nSpecific gas constant and isobaric and isochoric specific heats of moist air:\ngas_constant_air\ncp_m\ncv_m\nSpecific latent heats of vaporization, fusion, and sublimation:\nlatent_heat_vapor\nlatent_heat_fusion\nlatent_heat_sublim\nSaturation vapor pressure and specific humidity over liquid and ice:\nsat_vapor_press_liquid\nsat_vapor_press_ice\nsat_shum\nFunctions computing energies and inverting them to obtain temperatures\ntotal_energy\ninternal_energy\nair_temperature\nFunctions to compute temperatures and partitioning of water into phases in thermodynamic equilibrium (when Gibbs' phase rule implies that the entire thermodynamic state of moist air, including the liquid and ice specific humidities, can be calculated from the 3 thermodynamic state variables, such as energy, pressure, and total specific humidity)\nliquid_fraction (fraction of condensate that is liquid)\nsaturation_adjustment (compute temperature from energy, density, and total specific humidity)\nAuxiliary functions for diagnostic purposes, e.g., other thermodynamic quantities\nliquid_ice_pottemp (liquid-ice potential temperature)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"A moist dynamical core that assumes equilibrium thermodynamics can be obtained from a dry dynamical core with total energy as a prognostic variable by including a tracer for the total specific humidity q.tot, using the functions, e.g., for the energies in the module, and computing the temperature T and the liquid and ice specific humidities (q.liq and q.ice) from the internal energy e_int by saturation adjustment.","category":"page"},{"location":"API/#API-1","page":"API","title":"API","text":"","category":"section"},{"location":"API/#","page":"API","title":"API","text":"CurrentModule = MoistThermodynamics","category":"page"},{"location":"API/#Thermodynamic-State-Constructors-1","page":"API","title":"Thermodynamic State Constructors","text":"","category":"section"},{"location":"API/#","page":"API","title":"API","text":"PhasePartition\nPhasePartition_equil\nThermodynamicState\nPhaseDry\nPhaseEquil\nPhaseNonEquil\nTemperatureSHumEquil\nLiquidIcePotTempSHumEquil\nLiquidIcePotTempSHumNonEquil\nLiquidIcePotTempSHumNonEquil_given_pressure","category":"page"},{"location":"API/#MoistThermodynamics.PhasePartition","page":"API","title":"MoistThermodynamics.PhasePartition","text":"PhasePartition\n\nRepresents the mass fractions of the moist air mixture.\n\nConstructors\n\nPhasePartition(q_tot::Real[, q_liq::Real[, q_ice::Real]])\nPhasePartition(ts::ThermodynamicState)\n\nSee also PhasePartition_equil\n\nFields\n\ntot\ntotal specific humidity\nliq\nliquid water specific humidity (default: 0)\nice\nice specific humidity (default: 0)\n\n\n\n\n\n","category":"type"},{"location":"API/#MoistThermodynamics.PhasePartition_equil","page":"API","title":"MoistThermodynamics.PhasePartition_equil","text":"PhasePartition_equil(T, ρ, q_tot)\n\nPartition the phases in equilibrium, returning a PhasePartition object using the liquid_fraction function where\n\nT temperature\nρ (moist-)air density\nq_tot total specific humidity\n\nThe residual q.tot - q.liq - q.ice is the vapor specific humidity.\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.ThermodynamicState","page":"API","title":"MoistThermodynamics.ThermodynamicState","text":"ThermodynamicState{FT}\n\nA thermodynamic state, which can be initialized for various thermodynamic formulations (via its sub-types). All ThermodynamicState's have access to functions to compute all other thermodynamic properties.\n\n\n\n\n\n","category":"type"},{"location":"API/#MoistThermodynamics.PhaseDry","page":"API","title":"MoistThermodynamics.PhaseDry","text":"PhaseDry{FT} <: ThermodynamicState\n\nA dry thermodynamic state (q_tot = 0).\n\nConstructors\n\nPhaseDry(e_int, ρ)\n\nFields\n\nparam_set\nparameter set (e.g., planet parameters)\ne_int\ninternal energy\nρ\ndensity of dry air\n\n\n\n\n\n","category":"type"},{"location":"API/#MoistThermodynamics.PhaseEquil","page":"API","title":"MoistThermodynamics.PhaseEquil","text":"PhaseEquil{FT} <: ThermodynamicState\n\nA thermodynamic state assuming thermodynamic equilibrium (therefore, saturation adjustment may be needed).\n\nConstructors\n\nPhaseEquil(e_int, ρ, q_tot)\n\nFields\n\nparam_set\nparameter set (e.g., planet parameters)\ne_int\ninternal energy\nρ\ndensity of air (potentially moist)\nq_tot\ntotal specific humidity\nT\ntemperature: computed via saturation_adjustment\n\n\n\n\n\n","category":"type"},{"location":"API/#MoistThermodynamics.PhaseNonEquil","page":"API","title":"MoistThermodynamics.PhaseNonEquil","text":" PhaseNonEquil{FT} <: ThermodynamicState\n\nA thermodynamic state assuming thermodynamic non-equilibrium (therefore, temperature can be computed directly).\n\nConstructors\n\nPhaseNonEquil(e_int, q::PhasePartition, ρ)\n\nFields\n\nparam_set\nparameter set (e.g., planet parameters)\ne_int\ninternal energy\nρ\ndensity of air (potentially moist)\nq\nphase partition\n\n\n\n\n\n","category":"type"},{"location":"API/#MoistThermodynamics.TemperatureSHumEquil","page":"API","title":"MoistThermodynamics.TemperatureSHumEquil","text":"TemperatureSHumEquil(T, p, q_tot)\n\nConstructs a PhaseEquil thermodynamic state from temperature.\n\nT temperature\np pressure\nq_tot total specific humidity\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.LiquidIcePotTempSHumEquil","page":"API","title":"MoistThermodynamics.LiquidIcePotTempSHumEquil","text":"LiquidIcePotTempSHumEquil(θ_liq_ice, ρ, q_tot)\n\nConstructs a PhaseEquil thermodynamic state from:\n\nθ_liq_ice liquid-ice potential temperature\nρ (moist-)air density\nq_tot total specific humidity\ntol tolerance for saturation adjustment\nmaxiter maximum iterations for saturation adjustment\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.LiquidIcePotTempSHumNonEquil","page":"API","title":"MoistThermodynamics.LiquidIcePotTempSHumNonEquil","text":"LiquidIcePotTempSHumNonEquil(θ_liq_ice, ρ, q_pt)\n\nConstructs a PhaseNonEquil thermodynamic state from:\n\nθ_liq_ice liquid-ice potential temperature\nρ (moist-)air density\nq_pt phase partition\n\nand, optionally\n\ntol tolerance for non-linear equation solve\nmaxiter maximum iterations for non-linear equation solve\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.LiquidIcePotTempSHumNonEquil_given_pressure","page":"API","title":"MoistThermodynamics.LiquidIcePotTempSHumNonEquil_given_pressure","text":"LiquidIcePotTempSHumNonEquil_given_pressure(θ_liq_ice, p, q_pt)\n\nConstructs a PhaseNonEquil thermodynamic state from:\n\nθ_liq_ice liquid-ice potential temperature\np pressure\nq_pt phase partition\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamic-state-methods-1","page":"API","title":"Thermodynamic state methods","text":"","category":"section"},{"location":"API/#","page":"API","title":"API","text":"air_density\nair_pressure\nair_temperature\nair_temperature_from_liquid_ice_pottemp\ncp_m\ncv_m\ndry_pottemp\nexner\ngas_constant_air\nIce\ninternal_energy\ninternal_energy_sat\nlatent_heat_fusion\nlatent_heat_sublim\nlatent_heat_vapor\nLiquid\nliquid_fraction\nliquid_ice_pottemp\nliquid_ice_pottemp_sat\ngas_constants\nsaturation_adjustment\nsaturation_excess\nq_vap_saturation\nq_vap_saturation_generic\nsaturation_vapor_pressure\nsoundspeed_air\nspecific_volume\ntotal_energy\nvirtual_pottemp","category":"page"},{"location":"API/#MoistThermodynamics.air_density","page":"API","title":"MoistThermodynamics.air_density","text":"air_density(T, p[, q::PhasePartition])\n\nThe (moist-)air density from the equation of state (ideal gas law) where\n\nT air temperature\np pressure\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nair_density(ts::ThermodynamicState)\n\nThe (moist-)air density, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.air_pressure","page":"API","title":"MoistThermodynamics.air_pressure","text":"air_pressure(T::FT, T∞::FT, p∞::FT, ::DryAdiabaticProcess)\n\nThe air pressure for an isentropic process, where\n\nT temperature\nT∞ ambient temperature\np∞ ambient pressure\n\n\n\n\n\nair_pressure(T, ρ[, q::PhasePartition])\n\nThe air pressure from the equation of state (ideal gas law) where\n\nT air temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nair_pressure(ts::ThermodynamicState)\n\nThe air pressure from the equation of state (ideal gas law), given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.air_temperature","page":"API","title":"MoistThermodynamics.air_temperature","text":"air_temperature(p::FT, θ::FT, Φ::FT, ::DryAdiabaticProcess)\n\nThe air temperature for an isentropic process, where\n\np pressure\nθ potential temperature\n\n\n\n\n\nair_temperature(e_int, q::PhasePartition)\n\nThe air temperature, where\n\ne_int internal energy per unit mass\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nair_temperature(ts::ThermodynamicState)\n\nThe air temperature, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.air_temperature_from_liquid_ice_pottemp","page":"API","title":"MoistThermodynamics.air_temperature_from_liquid_ice_pottemp","text":"air_temperature_from_liquid_ice_pottemp(θ_liq_ice, ρ, q::PhasePartition)\n\nThe temperature given\n\nθ_liq_ice liquid-ice potential temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.cp_m","page":"API","title":"MoistThermodynamics.cp_m","text":"cp_m([q::PhasePartition])\n\nThe isobaric specific heat capacity of moist air where, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\ncp_m(ts::ThermodynamicState)\n\nThe isobaric specific heat capacity of moist air, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.cv_m","page":"API","title":"MoistThermodynamics.cv_m","text":"cv_m([q::PhasePartition])\n\nThe isochoric specific heat capacity of moist air where optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\ncv_m(ts::ThermodynamicState)\n\nThe isochoric specific heat capacity of moist air given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.dry_pottemp","page":"API","title":"MoistThermodynamics.dry_pottemp","text":"dry_pottemp(T, ρ[, q::PhasePartition])\n\nThe dry potential temperature where\n\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\n\n\ndry_pottemp(ts::ThermodynamicState)\n\nThe dry potential temperature, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.exner","page":"API","title":"MoistThermodynamics.exner","text":"exner(T, ρ[, q::PhasePartition)])\n\nThe Exner function where\n\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nexner(ts::ThermodynamicState)\n\nThe Exner function, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.gas_constant_air","page":"API","title":"MoistThermodynamics.gas_constant_air","text":"gas_constant_air([q::PhasePartition])\n\nThe specific gas constant of moist air given\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\ngas_constant_air(ts::ThermodynamicState)\n\nThe specific gas constant of moist air given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.Ice","page":"API","title":"MoistThermodynamics.Ice","text":"Ice <: Phase\n\nAn ice phase, to dispatch over saturation_vapor_pressure and q_vap_saturation_generic.\n\n\n\n\n\n","category":"type"},{"location":"API/#MoistThermodynamics.internal_energy","page":"API","title":"MoistThermodynamics.internal_energy","text":"internal_energy(T[, q::PhasePartition])\n\nThe internal energy per unit mass, given a thermodynamic state ts or\n\nT temperature\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\ninternal_energy(ts::ThermodynamicState)\n\nThe internal energy per unit mass, given a thermodynamic state ts.\n\n\n\n\n\ninternal_energy(ρ::FT, ρe::FT, ρu::AbstractVector{FT}, e_pot::FT)\n\nThe internal energy per unit mass, given\n\nρ (moist-)air density\nρe total energy per unit volume\nρu momentum vector\ne_pot potential energy (e.g., gravitational) per unit mass\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.internal_energy_sat","page":"API","title":"MoistThermodynamics.internal_energy_sat","text":"internal_energy_sat(T, ρ, q_tot)\n\nThe internal energy per unit mass in thermodynamic equilibrium at saturation where\n\nT temperature\nρ (moist-)air density\nq_tot total specific humidity\n\n\n\n\n\ninternal_energy_sat(ts::ThermodynamicState)\n\nThe internal energy per unit mass in thermodynamic equilibrium at saturation, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.latent_heat_fusion","page":"API","title":"MoistThermodynamics.latent_heat_fusion","text":"latent_heat_fusion(T::FT) where {FT<:Real}\n\nThe specific latent heat of fusion where\n\nT temperature\n\n\n\n\n\nlatent_heat_fusion(ts::ThermodynamicState)\n\nThe specific latent heat of fusion given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.latent_heat_sublim","page":"API","title":"MoistThermodynamics.latent_heat_sublim","text":"latent_heat_sublim(T::FT) where {FT<:Real}\n\nThe specific latent heat of sublimation where\n\nT temperature\n\n\n\n\n\nlatent_heat_sublim(ts::ThermodynamicState)\n\nThe specific latent heat of sublimation given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.latent_heat_vapor","page":"API","title":"MoistThermodynamics.latent_heat_vapor","text":"latent_heat_vapor(T::FT) where {FT<:Real}\n\nThe specific latent heat of vaporization where\n\nT temperature\n\n\n\n\n\nlatent_heat_vapor(ts::ThermodynamicState)\n\nThe specific latent heat of vaporization given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.Liquid","page":"API","title":"MoistThermodynamics.Liquid","text":"Liquid <: Phase\n\nA liquid phase, to dispatch over saturation_vapor_pressure and q_vap_saturation_generic.\n\n\n\n\n\n","category":"type"},{"location":"API/#MoistThermodynamics.liquid_fraction","page":"API","title":"MoistThermodynamics.liquid_fraction","text":"liquid_fraction(T[, q::PhasePartition])\n\nThe fraction of condensate that is liquid where\n\nT temperature\nq PhasePartition\n\nIf q.liq or q.ice are nonzero, the liquid fraction is computed from them.\n\nOtherwise, phase equilibrium is assumed so that the fraction of liquid is a function that is 1 above T_freeze and goes to zero below T_freeze.\n\n\n\n\n\nliquid_fraction(ts::ThermodynamicState)\n\nThe fraction of condensate that is liquid given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.liquid_ice_pottemp","page":"API","title":"MoistThermodynamics.liquid_ice_pottemp","text":"liquid_ice_pottemp(T, ρ, q::PhasePartition)\n\nThe liquid-ice potential temperature where\n\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nliquid_ice_pottemp(ts::ThermodynamicState)\n\nThe liquid-ice potential temperature, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.liquid_ice_pottemp_sat","page":"API","title":"MoistThermodynamics.liquid_ice_pottemp_sat","text":"liquid_ice_pottemp_sat(T, ρ[, q::PhasePartition])\n\nThe saturated liquid ice potential temperature where\n\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nliquid_ice_pottemp_sat(T, ρ, q_tot)\n\nThe saturated liquid ice potential temperature where\n\nT temperature\nρ (moist-)air density\nq_tot total specific humidity\n\n\n\n\n\nliquid_ice_pottemp_sat(ts::ThermodynamicState)\n\nThe liquid potential temperature given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.gas_constants","page":"API","title":"MoistThermodynamics.gas_constants","text":"(R_m, cp_m, cv_m, γ_m) = gas_constants([q::PhasePartition])\n\nWrapper to compute all gas constants at once, where optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\nThe function returns a tuple of\n\nR_m gas_constant_air\ncp_m cp_m\ncv_m cv_m\nγ_m = cp_m/cv_m\n\n\n\n\n\n(R_m, cp_m, cv_m, γ_m) = gas_constants(ts::ThermodynamicState)\n\nWrapper to compute all gas constants at once, given a thermodynamic state ts.\n\nThe function returns a tuple of\n\nR_m gas_constant_air\ncp_m cp_m\ncv_m cv_m\nγ_m = cp_m/cv_m\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.saturation_adjustment","page":"API","title":"MoistThermodynamics.saturation_adjustment","text":"saturation_adjustment(e_int, ρ, q_tot)\n\nCompute the temperature that is consistent with\n\ne_int internal energy\nρ (moist-)air density\nq_tot total specific humidity\ntol tolerance for non-linear equation solve\nmaxiter maximum iterations for non-linear equation solve\n\nby finding the root of\n\ne_int - internal_energy_sat(Tρq_tot) = 0\n\nusing Newtons method with analytic gradients.\n\nSee also saturation_adjustment.\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.saturation_excess","page":"API","title":"MoistThermodynamics.saturation_excess","text":"saturation_excess(T, ρ, q::PhasePartition)\n\nThe saturation excess in equilibrium where\n\nT temperature\nρ (moist-)air density\nq PhasePartition\n\nThe saturation excess is the difference between the total specific humidity q.tot and the saturation specific humidity in equilibrium, and it is defined to be nonzero only if this difference is positive.\n\n\n\n\n\nsaturation_excess(ts::ThermodynamicState)\n\nCompute the saturation excess in equilibrium, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.q_vap_saturation","page":"API","title":"MoistThermodynamics.q_vap_saturation","text":"q_vap_saturation(T, ρ[, q::PhasePartition])\n\nCompute the saturation specific humidity, given\n\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition\n\nIf the PhasePartition q is given, the saturation specific humidity is that of a mixture of liquid and ice, computed in a thermodynamically consistent way from the weighted sum of the latent heats of the respective phase transitions (Pressel et al., JAMES, 2015). That is, the saturation vapor pressure and from it the saturation specific humidity are computed from a weighted mean of the latent heats of vaporization and sublimation, with the weights given by the fractions of condensates q.liq/(q.liq + q.ice) and q.ice/(q.liq + q.ice) that are liquid and ice, respectively.\n\nIf the PhasePartition q is not given, or has zero liquid and ice specific humidities, the saturation specific humidity is that over a mixture of liquid and ice, with the fraction of liquid given by temperature dependent liquid_fraction(T) and the fraction of ice by the complement 1 - liquid_fraction(T).\n\n\n\n\n\nq_vap_saturation(ts::ThermodynamicState)\n\nCompute the saturation specific humidity, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.q_vap_saturation_generic","page":"API","title":"MoistThermodynamics.q_vap_saturation_generic","text":"q_vap_saturation_generic(T, ρ[; phase=Liquid()])\n\nCompute the saturation specific humidity over a plane surface of condensate, given\n\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nLiquid() indicating condensate is liquid\nIce() indicating condensate is ice\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.saturation_vapor_pressure","page":"API","title":"MoistThermodynamics.saturation_vapor_pressure","text":"saturation_vapor_pressure(T, Liquid())\n\nReturn the saturation vapor pressure over a plane liquid surface at temperature T.\n\nsaturation_vapor_pressure(T, Ice())\n\nReturn the saturation vapor pressure over a plane ice surface at temperature T.\n\nsaturation_vapor_pressure(T, LH_0, Δcp)\n\nCompute the saturation vapor pressure over a plane surface by integration of the Clausius-Clapeyron relation.\n\nThe Clausius-Clapeyron relation\n\ndlog(p_v_sat)/dT = [LH_0 + Δcp * (T-T_0)]/(R_v*T^2)\n\nis integrated from the triple point temperature T_triple, using Kirchhoff's relation\n\nL = LH_0 + Δcp * (T - T_0)\n\nfor the specific latent heat L with constant isobaric specific heats of the phases. The linear dependence of the specific latent heat on temperature T allows analytic integration of the Clausius-Clapeyron relation to obtain the saturation vapor pressure p_v_sat as a function of the triple point pressure press_triple.\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.soundspeed_air","page":"API","title":"MoistThermodynamics.soundspeed_air","text":"soundspeed_air(T[, q::PhasePartition])\n\nThe speed of sound in unstratified air, where\n\nT temperature\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nsoundspeed_air(ts::ThermodynamicState)\n\nThe speed of sound in unstratified air given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.specific_volume","page":"API","title":"MoistThermodynamics.specific_volume","text":"specific_volume(ts::ThermodynamicState)\n\nThe (moist-)air specific volume, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.total_energy","page":"API","title":"MoistThermodynamics.total_energy","text":"total_energy(e_kin, e_pot, T[, q::PhasePartition])\n\nThe total energy per unit mass, given\n\ne_kin kinetic energy per unit mass\ne_pot potential energy per unit mass\nT temperature\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\ntotal_energy(e_kin, e_pot, ts::ThermodynamicState)\n\nThe total energy per unit mass given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#MoistThermodynamics.virtual_pottemp","page":"API","title":"MoistThermodynamics.virtual_pottemp","text":"virtual_pottemp(T, ρ[, q::PhasePartition])\n\nThe virtual temperature where\n\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nvirtual_pottemp(ts::ThermodynamicState)\n\nThe virtual potential temperature, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"}]
}
