var documenterSearchIndex = {"docs":
[{"location":"Installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"Installation/","page":"Installation","title":"Installation","text":"Thermodynamics.jl is a Julia registered package, and can be added from the Julia Pkg manager:","category":"page"},{"location":"Installation/","page":"Installation","title":"Installation","text":"(v1.x) pkg> add Thermodynamics","category":"page"},{"location":"DevDocs/#Input-space-exploration","page":"Developer docs","title":"Input space exploration","text":"","category":"section"},{"location":"DevDocs/","page":"Developer docs","title":"Developer docs","text":"In the Tested Profiles section, we plotted the tested thermodynamic states. In this section, we explore the convergence of the input space beyond what is tested. In particular, rather than being interested in physically meaningful combinations of constructor inputs (e.g., ρ, e_int, q_tot), we are interested in all permutations of inputs within a given range of ρ, e_int, q_tot. Some of these permutations may not be physically meaningful, or likely to be observed in climate simulations, but showing the convergence space helps illustrate the buffer between our tested profiles and the nearest space where convergence fails.","category":"page"},{"location":"DevDocs/","page":"Developer docs","title":"Developer docs","text":"include(joinpath(@__DIR__, \"..\", \"ThreeDimensionalInput.jl\"))","category":"page"},{"location":"DevDocs/#Converged-cases-(3D-view)","page":"Developer docs","title":"Converged cases (3D view)","text":"","category":"section"},{"location":"DevDocs/","page":"Developer docs","title":"Developer docs","text":"(Image: )","category":"page"},{"location":"DevDocs/#Non-converged-cases-(3D-view)","page":"Developer docs","title":"Non-converged cases (3D view)","text":"","category":"section"},{"location":"DevDocs/","page":"Developer docs","title":"Developer docs","text":"(Image: )","category":"page"},{"location":"DevDocs/#Converged-cases-(2D-view),-binned-by-total-specific-humidity","page":"Developer docs","title":"Converged cases (2D view), binned by total specific humidity","text":"","category":"section"},{"location":"DevDocs/","page":"Developer docs","title":"Developer docs","text":"(Image: )","category":"page"},{"location":"DevDocs/#Non-converged-cases-(2D-view),-binned-by-total-specific-humidity","page":"Developer docs","title":"Non-converged cases (2D view), binned by total specific humidity","text":"","category":"section"},{"location":"DevDocs/","page":"Developer docs","title":"Developer docs","text":"(Image: )","category":"page"},{"location":"References/#References","page":"References","title":"References","text":"","category":"section"},{"location":"References/","page":"References","title":"References","text":"","category":"page"},{"location":"TestedProfiles/#Tested-Profiles","page":"Tested profiles","title":"Tested Profiles","text":"","category":"section"},{"location":"TestedProfiles/","page":"Tested profiles","title":"Tested profiles","text":"Thermodynamics.jl is tested using a set of profiles specified in src/TestedProfiles.jl.","category":"page"},{"location":"TestedProfiles/#Dry-Phase","page":"Tested profiles","title":"Dry Phase","text":"","category":"section"},{"location":"TestedProfiles/","page":"Tested profiles","title":"Tested profiles","text":"using Thermodynamics\nusing Thermodynamics.TemperatureProfiles\nusing Thermodynamics.TestedProfiles\nusing UnPack\nusing CLIMAParameters\nusing CLIMAParameters.Planet\nusing Plots\nstruct EarthParameterSet <: AbstractEarthParameterSet end;\nconst param_set = EarthParameterSet();\nthermo_dir = dirname(dirname(pathof(Thermodynamics)));\nprofiles = TestedProfiles.PhaseDryProfiles(param_set, Array{Float32});\n@unpack T, ρ, z = profiles\np1 = scatter(ρ, z./10^3, xlabel=\"Density [kg/m^3]\", ylabel=\"z [km]\", title=\"Density\");\np2 = scatter(T, z./10^3, xlabel=\"Temperature [K]\", ylabel=\"z [km]\", title=\"Temperature\");\nplot(p1, p2, layout=(1,2))\nsavefig(\"tested_profiles_dry.svg\");","category":"page"},{"location":"TestedProfiles/","page":"Tested profiles","title":"Tested profiles","text":"(Image: )","category":"page"},{"location":"TestedProfiles/#Moist-Phase-in-thermodynamic-equilibrium","page":"Tested profiles","title":"Moist Phase in thermodynamic equilibrium","text":"","category":"section"},{"location":"TestedProfiles/","page":"Tested profiles","title":"Tested profiles","text":"using Thermodynamics\nusing Thermodynamics.TemperatureProfiles\nusing Thermodynamics.TestedProfiles\nusing UnPack\nusing CLIMAParameters\nusing CLIMAParameters.Planet\nusing Plots\nstruct EarthParameterSet <: AbstractEarthParameterSet end;\nconst param_set = EarthParameterSet();\nthermo_dir = dirname(dirname(pathof(Thermodynamics)));\nprofiles = TestedProfiles.PhaseEquilProfiles(param_set, Array{Float32});\n@unpack T, ρ, q_tot, z = profiles\np1 = scatter(ρ, z./10^3, xlabel=\"Density [kg/m^3]\", ylabel=\"z [km]\", title=\"Density\");\np2 = scatter(T, z./10^3, xlabel=\"Temperature [K]\", ylabel=\"z [km]\", title=\"Temperature\");\np3 = scatter(q_tot*1000, z./10^3, xlabel=\"Total specific\\nhumidity [g/kg]\", ylabel=\"z [km]\", title=\"Total specific\\nhumidity\");\nplot(p1, p2, p3, layout=(1,3))\nsavefig(\"tested_profiles_virt_temp.svg\")","category":"page"},{"location":"TestedProfiles/","page":"Tested profiles","title":"Tested profiles","text":"(Image: )","category":"page"},{"location":"Formulation/#Mathematical-formulation","page":"Thermodynamics overview","title":"Mathematical formulation","text":"","category":"section"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"The thermodynamics of moist air is often subject to empirical approximations, which usually are opaque, internally inconsistent, and/or inconsistent across model components. For example, microphysical process models often use different approximations for thermodynamic quantities such as saturation vapor pressures than the dynamical core. The often bewildering array of approximations makes it difficult to achieve global conservation, e.g., of energy, and it complicates the use of models for other planetary atmospheres, with different thermodynamic parameters.","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"Here we introduce one consistent set of thermodynamic approximations for all model components. The key to thermodynamic consistency at reasonable accuracy is to take the specific heat capacities of the constituents of moist air (dry air, water vapor, liquid water, and ice) to be constant, i.e., to assume the gases to be calorically perfect. We discuss how to derive all other thermodynamic quantities that are needed on the basis of this one approximation (David M Romps  (2008),Pascal Marquet , Jean-Fran\\c{c}}}ois Geleyn  (2015)). This includes:","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"Giving accurate and easily adaptable closed-form expressions for internal energies, enthalpies, specific latent heats, and saturation vapor pressures\nShowing how to construct consistent sets of thermodynamic equations that either (i) assume equilibrium of the phases and require only one prognostic water variable, or (ii) do not assume equilibrium of the phases and require prognostic variables for all water phases\nShowing how to obtain temperatures from energy variables under either phase equilibrium assumptions (by saturation adjustment) or phase non-equilibrium assumptions (by a closed-form expression for temperature).","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"The resulting thermodynamic functions are implemented in Thermodynamics.jl.","category":"page"},{"location":"Formulation/#Working-Fluid-and-Equation-of-State","page":"Thermodynamics overview","title":"Working Fluid and Equation of State","text":"","category":"section"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"The working fluid of the atmosphere model is moist, potentially cloudy air, considered to be an ideal mixture of dry air, water vapor, and condensed water (liquid and ice) in clouds. Dry air and water vapor are taken to be ideal gases. The specific volume of the cloud condensate is neglected relative to that of the gas phases (it is a  factor 10^3 less than that of the gas phases). All phases are assumed to have the same temperature, and are advected with the same velocity. The cloud condensates may be sedimenting relative to the gas phases, but slowly enough to be in thermal equilibrium with the surrounding fluid. However, the condensates do not need to be in thermodynamic equilibrium with the other fluid constituents; out-of-equilibrium phases such as supercooled liquid can exist. Falling condensate (precipitation) is not considered part of the working fluid because it generally cannot be assumed to be in thermal equilibrium with the surrounding fluid; it is treated separately.","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"The density of the moist air is denoted by ρ. We use the following notation for the mass fractions of the moist air mixture (mass of a constituent divided by the total mass of the working fluid):","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"q_d: dry air mass fraction\nq_v: water vapor specific humidity\nq_l: liquid water specific humidity\nq_i: ice specific humidity\nq_c = q_l + q_i: condensate specific humidity\nq_t = q_v + q_c: total specific humidity","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"Because this enumerates all constituents of the working fluid, we have q_t + q_d = 1. In Earth's atmosphere, the water vapor specific humidity q_v generally dominates the total specific humidity q_t and is usually 𝒪(10^-2) or smaller; the condensate specific humidity is typically 𝒪(10^-4). Hence, water is a trace constituent of the atmosphere, and only a small fraction of atmospheric water is in condensed phases.","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"The pressure p of the working fluid is the sum of the partial pressures of dry air and water vapor, both taken to be ideal gases. Neglecting the volume of the condensed phases (but not their masses), this gives p = ρ (R_d q_d + R_v q_v) T, where R_d is the specific gas constant of dry air, and R_v is the specific gas constant of water vapor.","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"This can also be written as","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\n    p = ρ R_m T\nlabeleeos\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"where","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\nbeginaligned\n    R_m(q)  = R_d (1 - q_t) + R_v q_v \n         = R_d left 1 + (ε_dv-1)q_t - ε_dv q_cright\nendaligned\nlabeleRm\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"is the specific gas constant of moist air (which is not a constant); here, we have used q_d = 1-q_t and q_v = q_t - q_c and introduced the ratio of the molar masses of dry air and water vapor ε_dv = R_vR_d (≈ 1.61). Equations \\eqref{e:eos} and \\eqref{e:Rm} constitute the equation of state of the working fluid. We use the notation q=(q_t q_l q_i) for the tuple of specific humidities that determine the composition of moist air.","category":"page"},{"location":"Formulation/#Heat-Capacities","page":"Thermodynamics overview","title":"Heat Capacities","text":"","category":"section"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"The isochoric specific heat capacities of the constituents of moist air are:","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"c_vd: Isochoric specific heat capacity of dry air;\nc_vv: Isochoric specific heat capacity of water vapor;\nc_vl: Isochoric specific heat capacity of liquid water;\nc_vi: Isochoric specific heat capacity of ice.","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"Our key thermodynamic approximation is to take these isochoric specific heat capacities to be constants, i.e., we take the gases to be calorically perfect. This is an approximation because they depend weakly on temperature. But for atmospheric conditions, the error of approximating them as constant is less than 1% for dry air, the main constituent of moist air, and at most a few percent for the water phases.","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"The difference between the isochoric and isobaric specific heat capacities is proportional to the specific volume. Consistent with taking the specific volume of liquid water and ice to be zero, we take the isochoric and isobaric specific heat capacities of the condensed phases to be equal. The isobaric specific heat capacities of the constituents then are:","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"c_pd = c_vd + R_d: Isobaric specific heat capacity of dry air;\nc_pv = c_vv + R_v: Isobaric specific heat capacity of water vapor;\nc_pl = c_vl: Isobaric specific heat capacity of liquid water;\nc_pi = c_vi: Isobaric specific heat capacity of ice.","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"The corresponding specific heat capacities of moist air are the weighted sum of those of the constituents:","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\nbeginaligned\n    c_ m(q)  = (1-q_t) c_ d + q_v c_ v + q_l c_ l + q_i c_ i \n     = c_ d + (c_ v - c_ d)q_t + (c_ l - c_ v)q_l + (c_ i - c_ v)q_i\nendaligned\nlabeleSpecificHeat\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"where  stands for v or p and we have used q_v = q_t -q_l - q_i. Straightforward substitution shows that the above relation between the specific heat capacities of the constituents also holds for moist air as a whole:","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequationlabeleSpecificHeatRelation\n    c_pm(q) = c_vm(q) + R_m(q)\nendequation","category":"page"},{"location":"Formulation/#Latent-Heats","page":"Thermodynamics overview","title":"Latent Heats","text":"","category":"section"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"Kirchhoff's relation states that the specific latent enthalpy (heat) L of a phase change depends on temperature T through","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\n    fracdLdT = Δ c_p\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"where Δ c_p is the difference in isobaric specific heat capacities between the phase with the higher and lower specific volume. For the constant isobaric specific heat capacities that we assume, this can be integrated to give","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\n    L(T) = L_0 + Δ c_p (T-T_0)\n    labeleLHTemperature\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"where T_0 is a reference temperature and L_0 is the specific latent heat at T_0.","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"For the phase transitions of water, this implies specifically:","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"L_v(T) = L_v0 + (c_pv - c_pl) (T - T_0): Latent heat of vaporization;\nL_f(T) = L_f0 + (c_pl - c_pi) (T - T_0): Latent heat of fusion;\nL_s(T) = L_s0 + (c_pv - c_pi) (T - T_0): Latent heat of sublimation.","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"With L_s0 = L_v0 + L_f0, this gives L_s(T) = L_v(T) + L_f(T), as it should.","category":"page"},{"location":"Formulation/#Internal-Energies","page":"Thermodynamics overview","title":"Internal Energies","text":"","category":"section"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"The specific internal energies of the constituents of moist air can be written as","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\nbeginaligned\nI_d(T)  = c_vd (T - T_0)  \nI_v(T)  = c_vv (T - T_0) + I_v0\nI_l(T)  = c_vl (T - T_0) \nI_i(T)  = c_vi (T - T_0) - I_i0\nendaligned\nlabeleInternalEnergies\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"Here, the reference specific internal energy I_v0 is the difference in specific internal energy between vapor and liquid at the reference temperature T_0, and I_i0 is the difference in specific internal energy between ice and liquid at T_0. The internal energy of moist air is the weighted sum of that of the constituents,","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\nbeginaligned\n     I(T q)  = (1-q_t) I_d(T) + q_v I_v(T) + q_l I_l(T) + q_i I_i(T)\n           = c_vm(q) (T - T_0)  + q_v I_v0 - q_i I_i0\nendaligned\nlabeletotalInternalEnergy\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"The internal energy can be inverted to obtain the temperature given I and the specific humidities,","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\n    T = T_0 + fracI - (q_t - q_l) I_v0 + q_i (I_i0 + I_v0)c_vm(q)\n    labeletemperature\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"where we have used q_v = q_t - q_l - q_i. This allows one to recover temperature given internal energy and specific humidities as state variables.","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"The reference specific internal energies I_v0 and I_i0 are related to the reference specific latent heats L_v0 and L_f0, which indicate the enthalpy differences between the phases at T_0. The reference specific internal energies are obtained from the reference specific latent heats by subtracting the pV term, which is p_kρ_k for the relevant partial pressure p_k and specific volume 1ρ_k of the phase k (and hence is zero for the condensed phases, whose specific volume we neglect). This gives","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\nbeginaligned\n     I_v0 = L_v 0 - R_v T_0\n     I_i0 = L_f 0\nendaligned\nlabeleRefInternalEnergies\nendequation","category":"page"},{"location":"Formulation/#Enthalpies","page":"Thermodynamics overview","title":"Enthalpies","text":"","category":"section"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"The specific enthalpies of the constituents of moist air are obtained by adding p_kρ_k for phase k to the corresponding specific internal energy \\eqref{e:InternalEnergies}. Again neglecting the specific volumes of the condensed phases and using the relations \\eqref{e:RefInternalEnergies} between reference specific energies and latent heats, this gives:","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\nlabeleEnthalpies\nbeginaligned\n    h_d(T) = I_d(T) + R_d T = c_pd(T-T_0) + R_d T_0 \n    h_v(T) = I_v(T) + R_v T = c_pv(T-T_0) + L_v0 \n    h_l(T) = I_l(T) = c_pl(T-T_0) \n    h_i(T) = I_i(T) = c_pi(T-T_0) - L_f0\nendaligned\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"The enthalpy of moist air is the weighted sum of the constituent enthalpies:","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\nbeginsplitlabeleenthalpy_definition\n    h(T q)  = (1-q_t) h_d + q_v h_v + q_l h_l + q_i h_i \n        = c_pm(q) (T-T_0) + q_v L_v0 - q_i L_f0 + (1-q_t) R_d T_0\n        = I(q T) + R_m T\nendsplit\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"where the last equality used c_pm = c_vm + R_m (Eq. \\ref{e:SpecificHeatRelation}). The enthalpy is the relevant thermodynamic energy quantity in fluid transport. It arises in boundary conditions for energy fluxes and in the modeling of subgrid-scale (SGS) turbulent transport. For those purposes, we need gradients of the enthalpy, which can be written as","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\nlabeleEnthalpyGradient\n    h = c_pm(q) T - h_d(T) q_t\n    + h_v(T) q_v + h_l(T) q_l + h_i(T) q_i\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"This cleanly separates gradients involving temperature and gradients involving specific humidities.","category":"page"},{"location":"Formulation/#Moist-Static-Energy","page":"Thermodynamics overview","title":"Moist Static Energy","text":"","category":"section"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"The sum of the specific enthalpy of moist air and the specific gravitational potential energy Φ is the moist static energy J David Neelin , Isaac M Held  (1987)","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequationlabeleMSE\nmathrmMSE = h + Φ\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"Moist static energy arises naturally as the static energy component that is transported in moist air. Static here refers to the fact that the (small) kinetic energy contribution to the total energy is neglected (see section TODO). The global integral of moist static energy is approximately conserved in adiabatic processes, even in the presence of reversible phase transitions and latent heat release. It is also approximately materially conserved (David M Romps  (2015)).","category":"page"},{"location":"Formulation/#Saturation-Vapor-Pressure","page":"Thermodynamics overview","title":"Saturation Vapor Pressure","text":"","category":"section"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"The Clausius-Clapeyron relation describes how the saturation vapor pressure p_v^* of an ideal gas over a plane surface of condensate depends on temperature:","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\nlabeleClausius_Clapeyron\n    fracd log(p_v^*)dT = fracLR_v T^2\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"Here, L is the specific latent heat of the phase transition, which is L_v for the saturation vapor pressure over liquid, or L_s for the saturation vapor pressure over ice. Substituting the linear relation \\eqref{e:LHTemperature} between latent heat and temperature, and taking p_mathrmtr to be the vapor pressure at the triple point (by definition equal to the saturation vapor pressures both over liquid and ice), the Clausius-Clapeyron relation can be integrated to give a closed-form expression for the vapor pressure that is consistent with our thermodynamic assumptions:","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\n    p_v^* = p_mathrmtr left( fracTT_mathrmtr right)^fracDelta c_pR_v\n        exp left fracL_0 - Delta c_p T_0R_v\n        left( frac1T_mathrmtr - frac1T right) right\n        labeleSatVaporPressure\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"With L_0 = L_v0 or L_0 = L_s0 and the corresponding heat capacity difference Delta c_p, this gives saturation vapor pressures over liquid or ice that are accurate within 3% for temperatures between 200K and 330K (with accuracy better than 1% for typical near-surface conditions).","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"To obtain the saturation vapor pressure over a mixture of liquid and ice (e.g., in mixed-phase clouds), using a weighted average of the relevant specific latent heats in the vapor pressure \\eqref{e:SatVaporPressure} leads to a thermodynamically consistent formulation (Kyle G Pressel , Colleen M Kaul , Tapio Schneider , Zhihong Tan , Siddhartha Mishra  (2015)). That is, if a fraction λ_p of the condensate is liquid and the complement 1-λ_p is ice, calculating the saturation vapor pressure with a specific latent heat λ_p L_v + (1-λ_p)L_s gives a thermodynamically consistent saturation vapor pressure over the mixture.","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"In thermodynamic equilibrium, the liquid fraction","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequationlabeleliquid_fraction\n    λ_p(T) = mathcalH(T-T_mathrmfreeze)\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"is a Heaviside function mathcalH of temperature, being 0 below the freezing temperature T_mathrmfreeze and 1 above it. However, out of thermodynamic equilibrium, supercooled liquid can exist between the temperature of homogeneous ice nucleation T_mathrmicenuc and the freezing temperature T_mathrmfreeze. In most climate models, this is modeled by a continuous function","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\n    λ_p(T) =\n    begincases\n    0  textfor  Tle T_mathrmicenuc\n    0λ_i(T)1  textfor  T_mathrmicenuc  T   T_mathrmfreeze\n    1    textfor  Tge T_mathrmfreeze\n    endcases\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"where λ_i interpolates between 0 at the temperature of homogeneous ice nucleation and 1 at the freezing temperature. However, it is important to recognize that this is merely an attempt to model out-of-equilibrium phases such as supercooled liquid within a thermodynamic equilibrium framework (where phase partitioning only depends on thermodynamic state variables but not on the history of air masses); this is not generally possible, and we will adopt alternative approaches.","category":"page"},{"location":"Formulation/#Saturation-Specific-Humidity","page":"Thermodynamics overview","title":"Saturation Specific Humidity","text":"","category":"section"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"From the saturation vapor pressure p_v^*, the saturation specific humidity can be computed using the ideal gas law \\eqref{e:eos}, giving the density of water vapor at saturation ρ_v^* = p_v^*(T)(R_v T), and hence the saturation specific humidity ","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\n     q_v^* = fracρ_v^*ρ = fracp_v^*(T)ρ R_v T\nlabelesat_shum\nendequation","category":"page"},{"location":"Formulation/#Saturation-Adjustment","page":"Thermodynamics overview","title":"Saturation Adjustment","text":"","category":"section"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"Gibbs' phase rule states that in thermodynamic equilibrium, the temperature T and liquid and ice specific humidities q_l and q_i can be obtained from the three thermodynamic state variables density ρ, total water specific humidity q_t, and internal energy I. Thus, a moist dynamical core that assumes equilibrium thermodynamics can be constructed from a dry dynamical core with total energy as a prognostic variable by including only a tracer for the total specific humidity q_t, and calculating the temperature and condensate specific humidities from ρ, q_t, and I.","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"Obtaining the temperature and condensate specific humidities from the state variables ρ, q_t, and I is the problem of finding the root T of","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\nI^*(T ρ q_t) - I = 0\nlabeleSatAdjustment\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"where I^*(T ρ q_t) is the internal energy at equilibrium. In an unsaturated equilibrium, there is no condensate, so I^* is the internal energy with q_l=q_i=0. At saturation, the internal energy I^* depends on the vapor specific humidity, q_v = q_v^*(T ρ), and on the saturation excess (total condensate)","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\nq_c^* = maxbiglq_t - q_v^*(T ρ) 0bigr\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"which is partitioned according to the liquid fraction λ_p into","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\nq_l^* = λ_p(T) q_c^* quad textand quad q_i^* = bigl1-λ_p(T)bigrq_c^*\nlabelePhasePartition\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"In saturated conditions, finding the root of \\eqref{e:SatAdjustment} is a nonlinear problem, which must be solved iteratively or approximately, in what is known as a saturation adjustment procedure.","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"A zeroth-order approximation of the temperature T satisfying the saturation adjustment condition \\eqref{e:SatAdjustment} is obtained by assuming unsaturated conditions. In that case, the expression \\eqref{e:temperature} for temperature, with q_l=q_i=0, gives the unsaturated temperature","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\n    T_1 = T_0 + fracI - q_t I_v0c_vm^*\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"Here, the isochoric specific heat capacity in equilibrium, c_vm^* = c_vm(q^*), is the specific heat capacity under equilibrium partitioning q^* of the phases, which here, for unsaturated conditions, means q^*=(q_t q_l=0 q_i=0). If the total specific humidity q_t is less than the saturation specific humidity at T_1 (q_t le q_v^*(T_1 ρ)), the air is indeed unsaturated, and T=T_1 is the exact temperature consistent given I, ρ, and q_t. ","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"If the air is saturated (q_t  q_v^*(T_1 ρ)), successively improved temperature estimates T_n+1 can be obtained from the temperature T_n (n=1dots) by Newton's method, with analytical gradients. Linearizing the saturation internal energy I^*(T ρ q_t) around the temperature T_n gives","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\n    I^*(T ρ q_t) approx I^*(T_n ρ q_t) + leftfracpartial I^*(T ρ q_t)partial Tright_T_n (T - T_n)\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"and solving for the temperature T gives the first-order Newton update","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\n    T_n+1 = T_n - fracI^*(T_n ρ q_t) - I(partial I^*partial T)_T_n\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"The derivative partial I^*partial T_T_n is obtained by differentiation of the internal energy \\eqref{e:totalinternalenergy}, \\hl{[add derivatives of phase partitioning function and make that function smooth]}","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginmultline\n     leftfracpartial I^*(T ρ q_t)partial Tright_T_n \n     = c_vm^*(q_t T_n) \n     +  left( I_v0 + 1-λ_p(T_n)I_i0 + (T_n - T_0) left fracdc_vm^*dq_v^*right_T_n right) left fracpartial q_v^*(T ρ q_t)partial Tright_T_n\nendmultline","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"where c_vm^*(q_t T_n) = c_vmq^*(T_n) is the isochoric specific heat in equilibrium at temperature T_n, with q_v = q_v^*(T_n) and with the corresponding phase partitioning q^* = (q_t q_l^* q_i^*) according to \\eqref{e:PhasePartition}. The derivative of the saturation specific humidity, partial q_v^*(Tρ q_t)partial T, is to be taken at a fixed density ρ and total specific humidity q_t, like the other derivatives. We have neglected the singular derivative of λ_p at the freezing temperature T_mathrmfreeze. The two remaining derivatives are that of the isochoric specific heat,","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\n    left fracdc_vm^*dq_v^*right_T_n = c_vv - λ_p(T_n) c_vl - 1-λ_p(T_n)c_vi\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"obtained from the definition \\eqref{e:SpecificHeat} of the specific heat of moist air, and that of the saturation specific humidity,","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\n    left fracpartial q_v^*(T ρ q_t)partial Tright_T_n = q_v^*(T_n) fracLR_v T_n^2 quad textwith quad L = λ_p(T_n) L_v + 1-λ_p(T_n) L_s\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"obtained from the Clausius-Clapeyron relation \\eqref{e:ClausiusClapeyron} and the relation \\eqref{e:satshum} between specific humidity and vapor pressure. ","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"The resulting successive Newton approximations T_n generally converge quadratically. Because condensate specific humidities are usually small, T_1 provides a close initial estimate, and few iterations are needed. Even the first-order approximation Tapprox T_2 often suffices. However, convergence may not be achieved near the phase transition at the freezing temperature T_mathrmfreeze because the derivative of I^* with respect to temperature is discontinuous there. In that case, the number of iterations needs to be limited (2–3 iterations generally suffice). ","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"Using saturation adjustment makes it possible to construct a moist dynamical core that has the total specific humidity q_t as the only prognostic moisture variable. The price for this simplicity is the necessity to solve a nonlinear problem iteratively (or approximately) at each time step, and being confined to an equilibrium thermodynamics framework which cannot adequately account for non-equilibrium processes. Using explicit tracers for the condensates q_l and q_i in addition to q_t avoids iterations at each time step and allows the inclusion of explicit non-equilibrium processes, such as those leading to the formation of supercooled liquid in mixed-phase clouds. ","category":"page"},{"location":"Formulation/#Auxiliary-Thermodynamic-Functions","page":"Thermodynamics overview","title":"Auxiliary Thermodynamic Functions","text":"","category":"section"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"Several auxiliary thermodynamic functions are commonly used.","category":"page"},{"location":"Formulation/#Relative-Humidity","page":"Thermodynamics overview","title":"Relative Humidity","text":"","category":"section"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"The relative humidity is defined as the ratio of the partial pressure of water vapor p_v to the saturation vapor pressure p_v^*,","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"mathrmRH = fracp_vp_v^*","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"Using the ideal gas law for water vapor, p_v = q_v ρ R_v T, this can be written as","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\n    mathrmRH = fracq_v ρ R_v Tp_v^*\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"where p_v^* is the saturation vapor pressure \\eqref{e:SatVaporPressure}. Over a mixture of ice and liquid, the saturation vapor pressure \\eqref{e:SatVaporPressure} is evaluated with a specific latent heat L = λ_p L_v + (1-λ_p) L_s that is a weighted sum of those for vaporization and sublimation.","category":"page"},{"location":"Formulation/#Potential-Temperature","page":"Thermodynamics overview","title":"Potential Temperature","text":"","category":"section"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"The potential temperature θ is the temperature an air mass would have if brought adiabatically from pressure p and temperature T to some reference pressure p_0 (typically taken to be mean sea level pressure):","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\nθ = fracTPi\nlabelePotTempPressT\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"where Pi is known as the Exner function","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\n    Pi  = left( fracpp_0 right)^κ quad textwith quad κ = fracR_mc_pm\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"Note that the adiabatic exponent κ takes the effect of  moisture on the effective gas constant and specific heat capacity of air into account.","category":"page"},{"location":"Formulation/#Virtual-(Potential)-Temperature","page":"Thermodynamics overview","title":"Virtual (Potential) Temperature","text":"","category":"section"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"The virtual or density temperature T_v is the temperature dry air would need to have to have the same density as moist air at the same pressure. Using the ideal gas law pρ = R_m T, this implies R_m T  = R_d T_v, or","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequationlabelevirtual_temp\nT_v = fracR_mR_d T\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"A virtual potential temperature can be defined analogously:","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\nθ_v = fracR_mR_d θ\nlabelevirtual_pottemp\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"Some texts distinguish virtual and density (potential) temperatures, where density (potential) temperatures take the mass of condensate into account, whereas virtual (potential) temperatures do not. We always take the mass of any condensate into account in the thermodynamics of moist air and do not make this distinction here.","category":"page"},{"location":"Formulation/#Liquid-Ice-Potential-Temperature","page":"Thermodynamics overview","title":"Liquid-Ice Potential Temperature","text":"","category":"section"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"When the amount of condensate in air is small and the temperature T is not too small (e.g., Gregory J Tripoli , William R Cotton  (1981)), the (linearized) liquid-ice potential temperature,","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequationlabeleliquid_ice_pottemp\nθ_li = θ left( 1 - fracL_v0 q_l + L_s 0 q_ic_pm T right)\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"is approximately materially conserved in adiabatic and reversible processes (including phase transitions). It is approximately the potential temperature \\eqref{e:PotTempPressT} an air parcel would have if all liquid water in the parcel were evaporated and all ice sublimated. It is the limit of a more general expression for liquid-ice potential temperature for small q_l and q_i and taking the specific latent heats to be constant (e.g., George H Bryan , J Michael Fritsch  (2004)). The liquid-ice potential temperature \\eqref{e:liquidicepottemp} and variants thereof are sometimes used as variables in numerical models. We use it for diagnostic purposes, for comparison with other studies.","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"The liquid-ice potential temperature θ_li can be inverted for the temperature given pressure p (and hence Pi) and the specific humidities q_t, q_l, and q_i:","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\n    T = Pi θ_li + fracL_v 0 q_l + L_s 0 q_ic_pm\nlabeleTempFromThetaLiGivenP\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"Alternatively, when density ρ instead of pressure p is given, the temperature can be obtained by Taylor expansion from the liquid-ice potential temperature θ_li,","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\nT approx T_u + fracL_v0 q_l + L_s0q_ic_vm - fracκ2 frac1T_uleft(fracL_v0 q_l + L_s0 q_ic_vmright)^2\nendequation\nlabeleTempFromThetaLiGivenRho","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"where","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\n   T_u =  left( fracρ R_m θ_lip_0 right)^R_mc_vm θ_li\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"is the temperature that would correspond to θ_li in unsaturated conditions, i.e., when the condensate specific humidities q_l and q_i are zero. However, the specific heats c_vm and c_pm and the moist gas constant R_m are evaluated with the given total and condensate specific humidities q_t, q_l, and q_i.","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"TODO: there was a commented equation here, do we need it?","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"This expression for temperature as a function of liquid-ice potential temperature is obtained from \\eqref{e:TempFromThetaLiGivenP} by substituting for pressure in the Exner function Pi from the ideal gas law, p=ρ R_m T, solving for temperature using a second-order Taylor expansion around T_u for small condensate specific humidities, and using the relation 1-κ = c_vmc_pm, which follows from c_pm - R_m = c_vm. The relation for temperature \\eqref{e:TempFromThetaLiGivenRho} holds to second order in condensate specific humidities q_l and q_i. That is, the inversion relation \\eqref{e:TempFromThetaLiGivenRho} holds to one higher order of accuracy than the definition of the liquid-ice potential temperature \\eqref{e:liquidicepottemp} itself, which is only first-order accurate in the condensate specific humidities q_l and q_i.","category":"page"},{"location":"Formulation/#Speed-of-Sound","page":"Thermodynamics overview","title":"Speed of Sound","text":"","category":"section"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"The speed of sound in (moist) unstratified air is","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"beginequation\n c_s = left(fracc_pmc_vm R_m T right)^12\nlabelesoundspeed\nendequation","category":"page"},{"location":"Formulation/","page":"Thermodynamics overview","title":"Thermodynamics overview","text":"with the appropriate gas constants for moist air. In the presence of stratification, additional terms arise (Dale R Durran  (1999)).","category":"page"},{"location":"TemperatureProfiles/#Atmospheric-temperature-profiles","page":"Temperature profiles","title":"Atmospheric temperature profiles","text":"","category":"section"},{"location":"TemperatureProfiles/","page":"Temperature profiles","title":"Temperature profiles","text":"CurrentModule = Thermodynamics.TemperatureProfiles","category":"page"},{"location":"TemperatureProfiles/","page":"Temperature profiles","title":"Temperature profiles","text":"Several temperature profiles are available in Thermodynamics.TemperatureProfiles. Here, we plot each profile.","category":"page"},{"location":"TemperatureProfiles/#Usage","page":"Temperature profiles","title":"Usage","text":"","category":"section"},{"location":"TemperatureProfiles/","page":"Temperature profiles","title":"Temperature profiles","text":"Using a profile involves passing two arguments:","category":"page"},{"location":"TemperatureProfiles/","page":"Temperature profiles","title":"Temperature profiles","text":"param_set a parameter set, from CLIMAParameters.jl\nz altitude","category":"page"},{"location":"TemperatureProfiles/","page":"Temperature profiles","title":"Temperature profiles","text":"to one of the temperature profile constructors.","category":"page"},{"location":"TemperatureProfiles/#IsothermalProfile","page":"Temperature profiles","title":"IsothermalProfile","text":"","category":"section"},{"location":"TemperatureProfiles/","page":"Temperature profiles","title":"Temperature profiles","text":"using Thermodynamics\nusing Thermodynamics.TemperatureProfiles\nusing CLIMAParameters\nusing CLIMAParameters.Planet\nusing Plots\nstruct EarthParameterSet <: AbstractEarthParameterSet end;\nconst param_set = EarthParameterSet();\nFT = Float64;\nz = range(FT(0), stop = FT(2.5e4), length = 50);\n\nisothermal = IsothermalProfile(param_set, FT);\nargs = isothermal.(Ref(param_set), z)\nT = first.(args)\np = last.(args)\n\np1 = plot(T, z./10^3, xlabel=\"Temperature [K]\");\np2 = plot(p./10^3, z./10^3, xlabel=\"Pressure [kPa]\");\nplot(p1, p2, layout=(1,2), title=\"Isothermal\", ylabel=\"z [km]\")\nsavefig(\"isothermal.svg\")","category":"page"},{"location":"TemperatureProfiles/","page":"Temperature profiles","title":"Temperature profiles","text":"(Image: )","category":"page"},{"location":"TemperatureProfiles/#DecayingTemperatureProfile","page":"Temperature profiles","title":"DecayingTemperatureProfile","text":"","category":"section"},{"location":"TemperatureProfiles/","page":"Temperature profiles","title":"Temperature profiles","text":"using Thermodynamics.TemperatureProfiles\nusing Thermodynamics\nusing CLIMAParameters\nusing CLIMAParameters.Planet\nusing Plots\nstruct EarthParameterSet <: AbstractEarthParameterSet end;\nconst param_set = EarthParameterSet();\nFT = Float64;\nz = range(FT(0), stop = FT(2.5e4), length = 50);\n\ndecaying = DecayingTemperatureProfile{FT}(param_set);\nargs = decaying.(Ref(param_set), z)\nT = first.(args)\np = last.(args)\n\np1 = plot(T, z./10^3, xlabel=\"Temperature [K]\");\np2 = plot(p./10^3, z./10^3, xlabel=\"Pressure [kPa]\");\nplot(p1, p2, layout=(1,2), ylabel=\"z [km]\", title=\"Decaying\")\nsavefig(\"decaying.svg\")","category":"page"},{"location":"TemperatureProfiles/","page":"Temperature profiles","title":"Temperature profiles","text":"(Image: )","category":"page"},{"location":"TemperatureProfiles/#DryAdiabaticProfile","page":"Temperature profiles","title":"DryAdiabaticProfile","text":"","category":"section"},{"location":"TemperatureProfiles/","page":"Temperature profiles","title":"Temperature profiles","text":"using Thermodynamics.TemperatureProfiles\nusing Thermodynamics\nusing CLIMAParameters\nusing CLIMAParameters.Planet\nusing Plots\nstruct EarthParameterSet <: AbstractEarthParameterSet end;\nconst param_set = EarthParameterSet();\nFT = Float64;\nz = range(FT(0), stop = FT(2.5e4), length = 50);\n\ndry_adiabatic = DryAdiabaticProfile{FT}(param_set);\nargs = dry_adiabatic.(Ref(param_set), z)\nT = first.(args)\np = last.(args)\nθ_dry = Thermodynamics.dry_pottemp_given_pressure.(Ref(param_set), T, p)\n\np1 = plot(T, z./10^3, xlabel=\"Temperature [K]\");\np2 = plot(p./10^3, z./10^3, xlabel=\"Pressure [kPa]\");\np3 = plot(θ_dry, z./10^3, xlabel=\"Potential temperature [K]\");\nplot(p1, p2, p3, layout=(1,3), ylabel=\"z [km]\", title=\"Dry adiabatic\")\nsavefig(\"dry_adiabatic.svg\")","category":"page"},{"location":"TemperatureProfiles/","page":"Temperature profiles","title":"Temperature profiles","text":"(Image: )","category":"page"},{"location":"TemperatureProfiles/#Extending","page":"Temperature profiles","title":"Extending","text":"","category":"section"},{"location":"TemperatureProfiles/","page":"Temperature profiles","title":"Temperature profiles","text":"Additional constructors, or additional profiles can be added to this module by adding a struct, containing parameters needed to construct the profile, and a functor to call the profile with a parameter set and altitude.","category":"page"},{"location":"HowToGuide/#How-to-guide","page":"How-to-guide","title":"How to guide","text":"","category":"section"},{"location":"HowToGuide/","page":"How-to-guide","title":"How-to-guide","text":"If Thermodynamics.jl does not have a particular thermodynamic constructor that is needed, you can implement a new one in Thermodynamics/states.jl. In this constructor, you must add whichever arguments you wish to offer as inputs, then translate this thermodynamic state into one of:","category":"page"},{"location":"HowToGuide/","page":"How-to-guide","title":"How-to-guide","text":"PhaseDry a dry thermodynamic state, uniquely determined by two independent thermodynamic properties\nPhaseEquil a moist thermodynamic state in thermodynamic equilibrium, uniquely determined by three independent thermodynamic properties\nPhaseNonEquil a moist thermodynamic state in thermodynamic non-equilibrium, uniquely determined by four independent thermodynamic properties","category":"page"},{"location":"#How-to-guide","page":"Home","title":"How to guide","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Thermodynamics.jl provides all thermodynamic functions needed for the atmosphere and functions shared across model components. The functions are general for a moist atmosphere that includes suspended cloud condensate in the working fluid; the special case of a dry atmosphere is obtained for zero specific humidities (or simply by omitting the optional specific humidity arguments in the functions that are needed for a dry atmosphere). The general formulation assumes that there are tracers for specific humidity q, partitioned into","category":"page"},{"location":"","page":"Home","title":"Home","text":"q.tot total water specific humidity\nq.liq liquid specific humidity\nq.ice ice specific humidity","category":"page"},{"location":"","page":"Home","title":"Home","text":"to characterize the thermodynamic state and composition of moist air.","category":"page"},{"location":"","page":"Home","title":"Home","text":"There are several types of functions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Equation of state (ideal gas law):\nair_pressure\nSpecific gas constant and isobaric and isochoric specific heats of moist air:\ngas_constant_air\ncp_m\ncv_m\nSpecific latent heats of vaporization, fusion, and sublimation:\nlatent_heat_vapor\nlatent_heat_fusion\nlatent_heat_sublim\nSaturation vapor pressure and specific humidity over liquid and ice:\nsat_vapor_press_liquid\nsat_vapor_press_ice\nsat_shum\nFunctions computing energies and inverting them to obtain temperatures\ntotal_energy\ninternal_energy\nair_temperature\nFunctions to compute temperatures and partitioning of water into phases in thermodynamic equilibrium (when Gibbs' phase rule implies that the entire thermodynamic state of moist air, including the liquid and ice specific humidities, can be calculated from the 3 thermodynamic state variables, such as energy, pressure, and total specific humidity)\nliquid_fraction (fraction of condensate that is liquid)\nsaturation_adjustment (compute temperature from energy, density, and total specific humidity)\nAuxiliary functions for diagnostic purposes, e.g., other thermodynamic","category":"page"},{"location":"","page":"Home","title":"Home","text":"quantities     * liquid_ice_pottemp (liquid-ice potential temperature)","category":"page"},{"location":"","page":"Home","title":"Home","text":"A moist dynamical core that assumes equilibrium thermodynamics can be obtained from a dry dynamical core with total energy as a prognostic variable by including a tracer for the total specific humidity q.tot, using the functions, e.g., for the energies in the module, and computing the temperature T and the liquid and ice specific humidities (q.liq and q.ice) from the internal energy e_int by saturation adjustment.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Users are encouraged to first establish a thermodynamic state with one of our Thermodynamic State Constructors. For example, we would construct a moist thermodynamic state using","category":"page"},{"location":"","page":"Home","title":"Home","text":"ts = PhaseEquil(param_set, e_int, ρ, q_tot);","category":"page"},{"location":"","page":"Home","title":"Home","text":"here, ρ is the density of the moist air, and the internal energy e_int = e_tot - e_kin - geopotential is the total energy e_tot minus kinetic energy e_kin and potential energy geopotential (all energies per unit mass). Once we've established a thermodynamic state, we can call Thermodynamic state methods that support thermodynamic states:","category":"page"},{"location":"","page":"Home","title":"Home","text":"T = air_temperature(ts);\nq = PhasePartition(ts);","category":"page"},{"location":"","page":"Home","title":"Home","text":"No changes to the \"right-hand sides\" of the dynamical equations are needed for a moist dynamical core that supports clouds, as long as they do not precipitate. Additional source-sink terms arise from precipitation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Schematically, the workflow in such a core would look as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# initialize\ngeopotential = grav * z\nq_tot          = ...\nρ            = ...\n\n(u, v, w)    = ...\ne_kin           = 0.5 * (u^2 + v^2 + w^2)\n\ne_tot        = total_energy(e_kin, geopotential, T, q_tot)\n\ndo timestep   # timestepping loop\n\n  # advance dynamical variables by a timestep (temperature typically\n  # appears in terms on the rhs, such as radiative transfer)\n  advance(u, v, w, ρ, e_tot, q_tot)\n\n  # compute internal energy from dynamic variables\n  e_int = e_tot - 0.5 * (u^2 + v^2 + w^2) - geopotential\n\n  # compute temperature, pressure and condensate specific humidities,\n  ts = PhaseEquil(param_set, e_int, ρ, q_tot);\n  T = air_temperature(ts);\n  q = PhasePartition(ts);\n  p = air_pressure(ts);\n\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"For a dynamical core that additionally uses the liquid and ice specific humidities q.liq and q.ice as prognostic variables, and thus explicitly allows the presence of non-equilibrium phases such as supercooled water, the saturation adjustment in the above workflow is replaced calling a non-equilibrium moist thermodynamic state:","category":"page"},{"location":"","page":"Home","title":"Home","text":"q_tot, q_liq, q_ice = ...\nts = PhaseNonEquil(param_set, e_int, ρ, PhasePartition(q_tot, q_liq, q_ice));\nT = air_temperature(ts);\np = air_pressure(ts);","category":"page"},{"location":"API/#Thermodynamics","page":"API","title":"Thermodynamics","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"CurrentModule = Thermodynamics","category":"page"},{"location":"API/","page":"API","title":"API","text":"Thermodynamics","category":"page"},{"location":"API/#Thermodynamics.Thermodynamics","page":"API","title":"Thermodynamics.Thermodynamics","text":"Thermodynamics\n\nMoist thermodynamic functions, e.g., for air pressure (atmosphere equation of state), latent heats of phase transitions, saturation vapor pressures, and saturation specific humidities.\n\nAbstractParameterSet's\n\nMany functions defined in this module rely on CLIMAParameters.jl. CLIMAParameters.jl defines several functions (e.g., many planet parameters). For example, to compute the mole-mass ratio:\n\nusing CLIMAParameters.Planet: molmass_ratio\nusing CLIMAParameters: AbstractEarthParameterSet\nstruct EarthParameterSet <: AbstractEarthParameterSet end\nparam_set = EarthParameterSet()\n_molmass_ratio = molmass_ratio(param_set)\n\nBecause these parameters are widely used throughout this module, param_set is an argument for many Thermodynamics functions.\n\nNumerical methods for saturation adjustment\n\nSaturation adjustment function are designed to accept\n\nsat_adjust_method a type used to dispatch which numerical method to use\n\nand a function to return an instance of the numerical method. For example:\n\nsa_numerical_method_ρpq returns an instance of the numerical  method. One of these functions must be defined for the particular  numerical method and the particular formulation (ρ-p-q_tot in this case).\n\nThe currently supported numerical methods, in RootSolvers.jl, are:\n\nNewtonsMethod uses Newton method with analytic gradients\nNewtonsMethodAD uses Newton method with autodiff\nSecantMethod uses Secant method\nRegulaFalsiMethod uses Regula-Falsi method\n\n\n\n\n\n","category":"module"},{"location":"API/#Thermodynamic-State-Constructors","page":"API","title":"Thermodynamic State Constructors","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"PhasePartition\nPhasePartition_equil\nThermodynamicState\nPhaseDry\nPhaseDry_pT\nPhaseDry_pθ\nPhaseDry_pe\nPhaseDry_ρθ\nPhaseDry_ρT\nPhaseDry_ρp\nPhaseEquil\nPhaseEquil_ρTq\nPhaseEquil_pTq\nPhaseEquil_pθq\nPhaseEquil_peq\nPhaseEquil_ρθq\nPhaseEquil_ρpq\nPhaseNonEquil\nPhaseNonEquil_ρTq\nPhaseNonEquil_ρθq\nPhaseNonEquil_pθq\nPhaseNonEquil_peq\nPhaseNonEquil_ρpq","category":"page"},{"location":"API/#Thermodynamics.PhasePartition","page":"API","title":"Thermodynamics.PhasePartition","text":"PhasePartition\n\nRepresents the mass fractions of the moist air mixture.\n\nConstructors\n\nPhasePartition(q_tot::Real[, q_liq::Real[, q_ice::Real]])\nPhasePartition(ts::ThermodynamicState)\n\nSee also PhasePartition_equil\n\nFields\n\ntot\ntotal specific humidity\nliq\nliquid water specific humidity (default: 0)\nice\nice specific humidity (default: 0)\n\n\n\n\n\n","category":"type"},{"location":"API/#Thermodynamics.PhasePartition_equil","page":"API","title":"Thermodynamics.PhasePartition_equil","text":"PhasePartition_equil(param_set, T, ρ, q_tot, phase_type)\n\nPartition the phases in equilibrium, returning a PhasePartition object using the liquid_fraction function where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\nq_tot total specific humidity\nphase_type a thermodynamic state type\n\nThe residual q.tot - q.liq - q.ice is the vapor specific humidity.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.ThermodynamicState","page":"API","title":"Thermodynamics.ThermodynamicState","text":"ThermodynamicState{FT}\n\nA thermodynamic state, which can be initialized for various thermodynamic formulations (via its sub-types). All ThermodynamicState's have access to functions to compute all other thermodynamic properties.\n\n\n\n\n\n","category":"type"},{"location":"API/#Thermodynamics.PhaseDry","page":"API","title":"Thermodynamics.PhaseDry","text":"PhaseDry{FT} <: ThermodynamicState\n\nA dry thermodynamic state (q_tot = 0).\n\nConstructors\n\nPhaseDry(param_set, e_int, ρ)\n\nFields\n\nparam_set\nparameter set, used to dispatch planet parameter function calls\ne_int\ninternal energy\nρ\ndensity of dry air\n\n\n\n\n\n","category":"type"},{"location":"API/#Thermodynamics.PhaseDry_pT","page":"API","title":"Thermodynamics.PhaseDry_pT","text":"PhaseDry_pT(param_set, p, T)\n\nConstructs a PhaseDry thermodynamic state from:\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\nT temperature\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseDry_pθ","page":"API","title":"Thermodynamics.PhaseDry_pθ","text":"PhaseDry_pθ(param_set, p, θ_dry)\n\nConstructs a PhaseDry thermodynamic state from:\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\nθ_dry dry potential temperature\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseDry_pe","page":"API","title":"Thermodynamics.PhaseDry_pe","text":"PhaseDry_pe(param_set, p, e_int)\n\nConstructs a PhaseDry thermodynamic state from:\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\ne_int internal energy\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseDry_ρθ","page":"API","title":"Thermodynamics.PhaseDry_ρθ","text":"PhaseDry_ρθ(param_set, ρ, θ_dry)\n\nConstructs a PhaseDry thermodynamic state from:\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nρ density\nθ_dry dry potential temperature\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseDry_ρT","page":"API","title":"Thermodynamics.PhaseDry_ρT","text":"PhaseDry_ρT(param_set, ρ, T)\n\nConstructs a PhaseDry thermodynamic state from:\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nρ density\nT temperature\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseDry_ρp","page":"API","title":"Thermodynamics.PhaseDry_ρp","text":"PhaseDry_ρp(param_set, ρ, p)\n\nConstructs a PhaseDry thermodynamic state from:\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nρ density\np pressure\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseEquil","page":"API","title":"Thermodynamics.PhaseEquil","text":"PhaseEquil{FT} <: ThermodynamicState\n\nA thermodynamic state assuming thermodynamic equilibrium (therefore, saturation adjustment may be needed).\n\nConstructors\n\nPhaseEquil(param_set, e_int, ρ, q_tot)\n\nFields\n\nparam_set\nparameter set, used to dispatch planet parameter function calls\ne_int\ninternal energy\nρ\ndensity of air (potentially moist)\nq_tot\ntotal specific humidity\nT\ntemperature: computed via saturation_adjustment\n\n\n\n\n\n","category":"type"},{"location":"API/#Thermodynamics.PhaseEquil_ρTq","page":"API","title":"Thermodynamics.PhaseEquil_ρTq","text":"PhaseEquil_ρTq(param_set, ρ, T, q_tot)\n\nConstructs a PhaseEquil thermodynamic state from temperature.\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nρ density\nT temperature\nq_tot total specific humidity\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseEquil_pTq","page":"API","title":"Thermodynamics.PhaseEquil_pTq","text":"PhaseEquil_pTq(param_set, p, T, q_tot)\n\nConstructs a PhaseEquil thermodynamic state from temperature.\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\nT temperature\nq_tot total specific humidity\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseEquil_pθq","page":"API","title":"Thermodynamics.PhaseEquil_pθq","text":"PhaseEquil_pθq(param_set, p, θ_liq_ice, q_tot)\n\nConstructs a PhaseEquil thermodynamic state from:\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\nθ_liq_ice liquid-ice potential temperature\nq_tot total specific humidity\ntemperature_tol temperature tolerance for saturation adjustment\nmaxiter maximum iterations for saturation adjustment\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseEquil_peq","page":"API","title":"Thermodynamics.PhaseEquil_peq","text":"PhaseEquil_peq(param_set, p, e_int, q_tot)\n\nConstructs a PhaseEquil thermodynamic state from temperature.\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\ne_int temperature\nq_tot total specific humidity\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseEquil_ρθq","page":"API","title":"Thermodynamics.PhaseEquil_ρθq","text":"PhaseEquil_ρθq(param_set, ρ, θ_liq_ice, q_tot)\n\nConstructs a PhaseEquil thermodynamic state from:\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nρ (moist-)air density\nθ_liq_ice liquid-ice potential temperature\nq_tot total specific humidity\ntemperature_tol temperature tolerance for saturation adjustment\nmaxiter maximum iterations for saturation adjustment\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseEquil_ρpq","page":"API","title":"Thermodynamics.PhaseEquil_ρpq","text":"PhaseEquil_ρpq(param_set, ρ, p, q_tot, perform_sat_adjust=true)\n\nConstructs a PhaseEquil thermodynamic state from temperature.\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nρ density\np pressure\nq_tot total specific humidity\nperform_sat_adjust Bool indicating to perform saturation adjustment\nmaxiter maximum number of iterations to perform in saturation adjustment\nsat_adjust_method the numerical method to use.  See the Thermodynamics for options.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseNonEquil","page":"API","title":"Thermodynamics.PhaseNonEquil","text":" PhaseNonEquil{FT} <: ThermodynamicState\n\nA thermodynamic state assuming thermodynamic non-equilibrium (therefore, temperature can be computed directly).\n\nConstructors\n\nPhaseNonEquil(param_set, e_int, q::PhasePartition, ρ)\n\nFields\n\nparam_set\nparameter set, used to dispatch planet parameter function calls\ne_int\ninternal energy\nρ\ndensity of air (potentially moist)\nq\nphase partition\n\n\n\n\n\n","category":"type"},{"location":"API/#Thermodynamics.PhaseNonEquil_ρTq","page":"API","title":"Thermodynamics.PhaseNonEquil_ρTq","text":"PhaseNonEquil_ρTq(param_set, ρ, T, q_pt)\n\nConstructs a PhaseNonEquil thermodynamic state from:\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nρ (moist-)air density\nT temperature\nq_pt phase partition\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseNonEquil_ρθq","page":"API","title":"Thermodynamics.PhaseNonEquil_ρθq","text":"PhaseNonEquil_ρθq(param_set, ρ, θ_liq_ice, q_pt)\n\nConstructs a PhaseNonEquil thermodynamic state from:\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nρ (moist-)air density\nθ_liq_ice liquid-ice potential temperature\nq_pt phase partition\n\nand, optionally\n\npotential_temperature_tol potential temperature for non-linear equation solve\nmaxiter maximum iterations for non-linear equation solve\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseNonEquil_pθq","page":"API","title":"Thermodynamics.PhaseNonEquil_pθq","text":"PhaseNonEquil_pθq(param_set, p, θ_liq_ice, q_pt)\n\nConstructs a PhaseNonEquil thermodynamic state from:\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\nθ_liq_ice liquid-ice potential temperature\nq_pt phase partition\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseNonEquil_peq","page":"API","title":"Thermodynamics.PhaseNonEquil_peq","text":"PhaseNonEquil_peq(param_set, p, e_int, q_pt)\n\nConstructs a PhaseNonEquil thermodynamic state from:\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\ne_int internal energy\nq_pt phase partition\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseNonEquil_ρpq","page":"API","title":"Thermodynamics.PhaseNonEquil_ρpq","text":"PhaseNonEquil_ρpq(param_set, ρ, p, q_pt)\n\nConstructs a PhaseNonEquil thermodynamic state from:\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nρ density\np pressure\nq_pt phase partition\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamic-state-methods","page":"API","title":"Thermodynamic state methods","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"air_density\nair_pressure\nair_temperature\ncondensate\ncp_m\ncv_m\ndry_pottemp\nexner\ngas_constant_air\ngas_constants\nhas_condensate\nIce\nice_specific_humidity\ninternal_energy\ninternal_energy_dry\ninternal_energy_vapor\ninternal_energy_liquid\ninternal_energy_ice\ninternal_energy_sat\nlatent_heat_fusion\nlatent_heat_liq_ice\nlatent_heat_sublim\nlatent_heat_vapor\nLiquid\nliquid_fraction\nliquid_ice_pottemp\nliquid_ice_pottemp_sat\nliquid_specific_humidity\nmixing_ratios\nvol_vapor_mixing_ratio\nmoist_static_energy\nq_vap_saturation\nq_vap_saturation_liquid\nq_vap_saturation_ice\nq_vap_saturation_generic\nrelative_humidity\nsaturated\nsaturation_adjustment\nsaturation_excess\nsaturation_vapor_pressure\nsoundspeed_air\nshum_to_mixing_ratio\nspecific_enthalpy\nspecific_volume\nsupersaturation\ntotal_energy\ntotal_specific_enthalpy\ntotal_specific_humidity\nvapor_specific_humidity\nvirtual_pottemp\nvirtual_temperature","category":"page"},{"location":"API/#Thermodynamics.air_density","page":"API","title":"Thermodynamics.air_density","text":"air_density(param_set, T, p[, q::PhasePartition])\n\nThe (moist-)air density from the equation of state (ideal gas law) where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT air temperature\np pressure\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nair_density(ts::ThermodynamicState)\n\nThe (moist-)air density, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.air_pressure","page":"API","title":"Thermodynamics.air_pressure","text":"air_pressure(param_set, T, ρ[, q::PhasePartition])\n\nThe air pressure from the equation of state (ideal gas law) where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT air temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nair_pressure(ts::ThermodynamicState)\n\nThe air pressure from the equation of state (ideal gas law), given a thermodynamic state ts.\n\n\n\n\n\nair_pressure(param_set, T::FT, T∞::FT, p∞::FT, ::DryAdiabaticProcess)\n\nThe air pressure for an isentropic process, where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nT∞ ambient temperature\np∞ ambient pressure\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.air_temperature","page":"API","title":"Thermodynamics.air_temperature","text":"air_temperature(param_set, e_int, q::PhasePartition)\n\nThe air temperature, where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\ne_int internal energy per unit mass\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nair_temperature(ts::ThermodynamicState)\n\nThe air temperature, given a thermodynamic state ts.\n\n\n\n\n\nair_temperature(param_set, p::FT, θ::FT, Φ::FT, ::DryAdiabaticProcess)\n\nThe air temperature for an isentropic process, where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\nθ potential temperature\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.condensate","page":"API","title":"Thermodynamics.condensate","text":"condensate(q::PhasePartition{FT})\ncondensate(ts::ThermodynamicState)\n\nCondensate of the phase partition.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.cp_m","page":"API","title":"Thermodynamics.cp_m","text":"cp_m(param_set, [q::PhasePartition])\n\nThe isobaric specific heat capacity of moist air given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\n\nand, optionally\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\ncp_m(ts::ThermodynamicState)\n\nThe isobaric specific heat capacity of moist air, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.cv_m","page":"API","title":"Thermodynamics.cv_m","text":"cv_m(param_set, [q::PhasePartition])\n\nThe isochoric specific heat capacity of moist air given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\n\nand, optionally\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\ncv_m(ts::ThermodynamicState)\n\nThe isochoric specific heat capacity of moist air, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.dry_pottemp","page":"API","title":"Thermodynamics.dry_pottemp","text":"dry_pottemp(param_set, T, ρ[, q::PhasePartition])\n\nThe dry potential temperature where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\n\n\ndry_pottemp(ts::ThermodynamicState)\n\nThe dry potential temperature, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.exner","page":"API","title":"Thermodynamics.exner","text":"exner(param_set, T, ρ[, q::PhasePartition)])\n\nThe Exner function where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nexner(ts::ThermodynamicState)\n\nThe Exner function, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.gas_constant_air","page":"API","title":"Thermodynamics.gas_constant_air","text":"gas_constant_air(param_set, [q::PhasePartition])\n\nThe specific gas constant of moist air given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\ngas_constant_air(ts::ThermodynamicState)\n\nThe specific gas constant of moist air given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.gas_constants","page":"API","title":"Thermodynamics.gas_constants","text":"(R_m, cp_m, cv_m, γ_m) = gas_constants(param_set, [q::PhasePartition])\n\nWrapper to compute all gas constants at once, where optionally,\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nq PhasePartition. Without this argument, the results are for dry air.\n\nThe function returns a tuple of\n\nR_m gas_constant_air\ncp_m cp_m\ncv_m cv_m\nγ_m = cp_m/cv_m\n\n\n\n\n\n(R_m, cp_m, cv_m, γ_m) = gas_constants(ts::ThermodynamicState)\n\nWrapper to compute all gas constants at once, given a thermodynamic state ts.\n\nThe function returns a tuple of\n\nR_m gas_constant_air\ncp_m cp_m\ncv_m cv_m\nγ_m = cp_m/cv_m\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.has_condensate","page":"API","title":"Thermodynamics.has_condensate","text":"has_condensate(q::PhasePartition{FT})\nhas_condensate(ts::ThermodynamicState)\n\nBool indicating if condensate exists in the phase partition\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.Ice","page":"API","title":"Thermodynamics.Ice","text":"Ice <: Phase\n\nAn ice phase, to dispatch over saturation_vapor_pressure and q_vap_saturation_generic.\n\n\n\n\n\n","category":"type"},{"location":"API/#Thermodynamics.ice_specific_humidity","page":"API","title":"Thermodynamics.ice_specific_humidity","text":"ice_specific_humidity(ts::ThermodynamicState)\nice_specific_humidity(q::PhasePartition)\n\nIce specific humidity given\n\nts a thermodynamic state\n\nor\n\nq a PhasePartition\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.internal_energy","page":"API","title":"Thermodynamics.internal_energy","text":"internal_energy(param_set, T[, q::PhasePartition])\n\nThe internal energy per unit mass, given a thermodynamic state ts or\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\ninternal_energy(ts::ThermodynamicState)\n\nThe internal energy per unit mass, given a thermodynamic state ts.\n\n\n\n\n\ninternal_energy(ρ::FT, ρe::FT, ρu::AbstractVector{FT}, e_pot::FT)\n\nThe internal energy per unit mass, given\n\nρ (moist-)air density\nρe total energy per unit volume\nρu momentum vector\ne_pot potential energy (e.g., gravitational) per unit mass\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.internal_energy_dry","page":"API","title":"Thermodynamics.internal_energy_dry","text":"internal_energy_dry(param_set, T)\n\nThe dry air internal energy\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\n\n\n\n\n\ninternal_energy_dry(ts::ThermodynamicState)\n\nThe the dry air internal energy, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.internal_energy_vapor","page":"API","title":"Thermodynamics.internal_energy_vapor","text":"internal_energy_vapor(param_set, T)\n\nThe water vapor internal energy\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\n\n\n\n\n\ninternal_energy_vapor(ts::ThermodynamicState)\n\nThe the water vapor internal energy, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.internal_energy_liquid","page":"API","title":"Thermodynamics.internal_energy_liquid","text":"internal_energy_liquid(param_set, T)\n\nThe liquid water internal energy\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\n\n\n\n\n\ninternal_energy_liquid(ts::ThermodynamicState)\n\nThe the liquid water internal energy, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.internal_energy_ice","page":"API","title":"Thermodynamics.internal_energy_ice","text":"internal_energy_ice(param_set, T)\n\nThe ice internal energy\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\n\n\n\n\n\ninternal_energy_ice(ts::ThermodynamicState)\n\nThe the ice internal energy, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.internal_energy_sat","page":"API","title":"Thermodynamics.internal_energy_sat","text":"internal_energy_sat(param_set, T, ρ, q_tot, phase_type)\n\nThe internal energy per unit mass in thermodynamic equilibrium at saturation where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\nq_tot total specific humidity\nphase_type a thermodynamic state type\n\n\n\n\n\ninternal_energy_sat(ts::ThermodynamicState)\n\nThe internal energy per unit mass in thermodynamic equilibrium at saturation, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.latent_heat_fusion","page":"API","title":"Thermodynamics.latent_heat_fusion","text":"latent_heat_fusion(param_set, T::FT) where {FT<:Real}\n\nThe specific latent heat of fusion where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\n\n\n\n\n\nlatent_heat_fusion(ts::ThermodynamicState)\n\nThe specific latent heat of fusion given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.latent_heat_liq_ice","page":"API","title":"Thermodynamics.latent_heat_liq_ice","text":"latent_heat_liq_ice(param_set, q::PhasePartition{FT})\n\nEffective latent heat of condensate (weighted sum of liquid and ice), with specific latent heat evaluated at reference temperature T_0 given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.latent_heat_sublim","page":"API","title":"Thermodynamics.latent_heat_sublim","text":"latent_heat_sublim(param_set, T::FT) where {FT<:Real}\n\nThe specific latent heat of sublimation where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\n\n\n\n\n\nlatent_heat_sublim(ts::ThermodynamicState)\n\nThe specific latent heat of sublimation given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.latent_heat_vapor","page":"API","title":"Thermodynamics.latent_heat_vapor","text":"latent_heat_vapor(param_set, T::FT) where {FT<:Real}\n\nThe specific latent heat of vaporization where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\n\n\n\n\n\nlatent_heat_vapor(ts::ThermodynamicState)\n\nThe specific latent heat of vaporization given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.Liquid","page":"API","title":"Thermodynamics.Liquid","text":"Liquid <: Phase\n\nA liquid phase, to dispatch over saturation_vapor_pressure and q_vap_saturation_generic.\n\n\n\n\n\n","category":"type"},{"location":"API/#Thermodynamics.liquid_fraction","page":"API","title":"Thermodynamics.liquid_fraction","text":"liquid_fraction(param_set, T, phase_type[, q])\n\nThe fraction of condensate that is liquid where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nphase_type a thermodynamic state type\n\nPhaseNonEquil behavior\n\nIf q.liq or q.ice are nonzero, the liquid fraction is computed from them.\n\nThermodynamicState\n\nOtherwise, phase equilibrium is assumed so that the fraction of liquid is a function that is 1 above T_freeze and goes to zero below T_freeze.\n\n\n\n\n\nliquid_fraction(ts::ThermodynamicState)\n\nThe fraction of condensate that is liquid given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.liquid_ice_pottemp","page":"API","title":"Thermodynamics.liquid_ice_pottemp","text":"liquid_ice_pottemp(param_set, T, ρ, q::PhasePartition)\n\nThe liquid-ice potential temperature where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nliquid_ice_pottemp(ts::ThermodynamicState)\n\nThe liquid-ice potential temperature, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.liquid_ice_pottemp_sat","page":"API","title":"Thermodynamics.liquid_ice_pottemp_sat","text":"liquid_ice_pottemp_sat(param_set, T, ρ, phase_type[, q::PhasePartition])\n\nThe saturated liquid ice potential temperature where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\nphase_type a thermodynamic state type\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nliquid_ice_pottemp_sat(param_set, T, ρ, phase_type, q_tot)\n\nThe saturated liquid ice potential temperature where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\nphase_type a thermodynamic state type\nq_tot total specific humidity\n\n\n\n\n\nliquid_ice_pottemp_sat(ts::ThermodynamicState)\n\nThe liquid potential temperature given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.liquid_specific_humidity","page":"API","title":"Thermodynamics.liquid_specific_humidity","text":"liquid_specific_humidity(ts::ThermodynamicState)\nliquid_specific_humidity(q::PhasePartition)\n\nLiquid specific humidity given\n\nts a thermodynamic state\n\nor\n\nq a PhasePartition\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.mixing_ratios","page":"API","title":"Thermodynamics.mixing_ratios","text":"mixing_ratios(q::PhasePartition)\n\nMixing ratios\n\nr.tot total mixing ratio\nr.liq liquid mixing ratio\nr.ice ice mixing ratio\n\ngiven a phase partition, q.\n\n\n\n\n\nmixing_ratios(ts::ThermodynamicState)\n\nMixing ratios stored, in a phase partition, for\n\ntotal specific humidity\nliquid specific humidity\nice specific humidity\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.vol_vapor_mixing_ratio","page":"API","title":"Thermodynamics.vol_vapor_mixing_ratio","text":"vol_vapor_mixing_ratio(param_set, q::PhasePartition)\n\nVolume mixing ratio of water vapor given a parameter set param_set and a phase partition, q.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.moist_static_energy","page":"API","title":"Thermodynamics.moist_static_energy","text":"moist_static_energy(ts, e_pot)\n\nMoist static energy, given\n\nts a thermodynamic state\ne_pot potential energy (e.g., gravitational) per unit mass\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.q_vap_saturation","page":"API","title":"Thermodynamics.q_vap_saturation","text":"q_vap_saturation(param_set, T, ρ, phase_type[, q::PhasePartition])\n\nCompute the saturation specific humidity, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\nphase_type a thermodynamic state type\n\nand, optionally,\n\nq PhasePartition\n\nIf the PhasePartition q is given, the saturation specific humidity is that of a mixture of liquid and ice, computed in a thermodynamically consistent way from the weighted sum of the latent heats of the respective phase transitions (Pressel et al., JAMES, 2015). That is, the saturation vapor pressure and from it the saturation specific humidity are computed from a weighted mean of the latent heats of vaporization and sublimation, with the weights given by the fractions of condensates q.liq/(q.liq + q.ice) and q.ice/(q.liq + q.ice) that are liquid and ice, respectively.\n\nIf the PhasePartition q is not given, or has zero liquid and ice specific humidities, the saturation specific humidity is that over a mixture of liquid and ice, with the fraction of liquid given by temperature dependent liquid_fraction(param_set, T, phase_type) and the fraction of ice by the complement 1 - liquid_fraction(param_set, T, phase_type).\n\n\n\n\n\nq_vap_saturation(ts::ThermodynamicState)\n\nCompute the saturation specific humidity, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.q_vap_saturation_liquid","page":"API","title":"Thermodynamics.q_vap_saturation_liquid","text":"q_vap_saturation_liquid(ts::ThermodynamicState)\n\nCompute the saturation specific humidity over liquid, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.q_vap_saturation_ice","page":"API","title":"Thermodynamics.q_vap_saturation_ice","text":"q_vap_saturation_ice(ts::ThermodynamicState)\n\nCompute the saturation specific humidity over ice, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.q_vap_saturation_generic","page":"API","title":"Thermodynamics.q_vap_saturation_generic","text":"q_vap_saturation_generic(param_set, T, ρ[, phase=Liquid()])\n\nCompute the saturation specific humidity over a plane surface of condensate, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nLiquid() indicating condensate is liquid\nIce() indicating condensate is ice\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.relative_humidity","page":"API","title":"Thermodynamics.relative_humidity","text":"relative_humidity(param_set, T, p, phase_type, q::PhasePartition)\n\nThe relative humidity, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\nphase_type a thermodynamic state type\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\n\n\nrelative_humidity(ts::ThermodynamicState)\n\nThe relative humidity, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.saturated","page":"API","title":"Thermodynamics.saturated","text":"saturated(ts::ThermodynamicState)\n\nBoolean indicating if thermodynamic state is saturated.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.saturation_adjustment","page":"API","title":"Thermodynamics.saturation_adjustment","text":"saturation_adjustment(\n    sat_adjust_method,\n    param_set,\n    e_int,\n    ρ,\n    q_tot,\n    phase_type,\n    maxiter,\n    temperature_tol\n)\n\nCompute the temperature that is consistent with\n\nsat_adjust_method the numerical method to use.  See the Thermodynamics for options.\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\ne_int internal energy\nρ (moist-)air density\nq_tot total specific humidity\nphase_type a thermodynamic state type\nmaxiter maximum iterations for non-linear equation solve\ntemperature_tol temperature tolerance\n\nby finding the root of\n\ne_int - internal_energy_sat(param_set, T, ρ, q_tot, phase_type) = 0\n\nusing the given numerical method sat_adjust_method.\n\nSee also saturation_adjustment.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.saturation_excess","page":"API","title":"Thermodynamics.saturation_excess","text":"saturation_excess(param_set, T, ρ, phase_type, q::PhasePartition)\n\nThe saturation excess in equilibrium where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\nphase_type a thermodynamic state type\nq PhasePartition\n\nThe saturation excess is the difference between the total specific humidity q.tot and the saturation specific humidity in equilibrium, and it is defined to be nonzero only if this difference is positive.\n\n\n\n\n\nsaturation_excess(ts::ThermodynamicState)\n\nCompute the saturation excess in equilibrium, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.saturation_vapor_pressure","page":"API","title":"Thermodynamics.saturation_vapor_pressure","text":"saturation_vapor_pressure(param_set, T, Liquid())\n\nReturn the saturation vapor pressure over a plane liquid surface given\n\nT temperature\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nsaturation_vapor_pressure(param_set, T, Ice())\n\nReturn the saturation vapor pressure over a plane ice surface given\n\nT temperature\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nsaturation_vapor_pressure(param_set, T, LH_0, Δcp)\n\nCompute the saturation vapor pressure over a plane surface by integration of the Clausius-Clapeyron relation.\n\nThe Clausius-Clapeyron relation\n\n`dlog(p_v_sat)/dT = [LH_0 + Δcp * (T-T_0)]/(R_v*T^2)`\n\nis integrated from the triple point temperature T_triple, using Kirchhoff's relation\n\n`L = LH_0 + Δcp * (T - T_0)`\n\nfor the specific latent heat L with constant isobaric specific heats of the phases. The linear dependence of the specific latent heat on temperature T allows analytic integration of the Clausius-Clapeyron relation to obtain the saturation vapor pressure p_v_sat as a function of the triple point pressure press_triple.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.soundspeed_air","page":"API","title":"Thermodynamics.soundspeed_air","text":"soundspeed_air(param_set, T[, q::PhasePartition])\n\nThe speed of sound in unstratified air, where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nsoundspeed_air(ts::ThermodynamicState)\n\nThe speed of sound in unstratified air given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.shum_to_mixing_ratio","page":"API","title":"Thermodynamics.shum_to_mixing_ratio","text":"shum_to_mixing_ratio(q, q_tot)\n\nMixing ratio, from specific humidity\n\nq specific humidity\nq_tot total specific humidity\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.specific_enthalpy","page":"API","title":"Thermodynamics.specific_enthalpy","text":"specific_enthalpy(e_int, R_m, T)\n\nSpecific enthalpy, given\n\ne_int internal specific energy\nR_m gas_constant_air\nT air temperature\n\n\n\n\n\nspecific_enthalpy(ts)\n\nSpecific enthalpy, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.specific_volume","page":"API","title":"Thermodynamics.specific_volume","text":"specific_volume(ts::ThermodynamicState)\n\nThe (moist-)air specific volume, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.supersaturation","page":"API","title":"Thermodynamics.supersaturation","text":"supersaturation(param_set, q, ρ, T, Liquid())\nsupersaturation(param_set, q, ρ, T, Ice())\nsupersaturation(ts, Ice())\nsupersaturation(ts, Liquid())\n\nparam_set - abstract set with earth parameters\nq - phase partition\nρ - air density,\nT - air temperature\nLiquid(), Ice() - liquid or ice phase to dispatch over.\nts thermodynamic state\n\nReturns supersaturation (qv/qv_sat -1) over water or ice.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.total_energy","page":"API","title":"Thermodynamics.total_energy","text":"total_energy(param_set, e_kin, e_pot, T[, q::PhasePartition])\n\nThe total energy per unit mass, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\ne_kin kinetic energy per unit mass\ne_pot potential energy per unit mass\nT temperature\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\ntotal_energy(e_kin, e_pot, ts::ThermodynamicState)\n\nThe total energy per unit mass given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.total_specific_enthalpy","page":"API","title":"Thermodynamics.total_specific_enthalpy","text":"total_specific_enthalpy(e_tot, R_m, T)\n\nTotal specific enthalpy, given\n\ne_tot total specific energy\nR_m gas_constant_air\nT air temperature\n\n\n\n\n\ntotal_specific_enthalpy(ts)\n\nTotal specific enthalpy, given\n\ne_tot total specific energy\nts a thermodynamic state\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.total_specific_humidity","page":"API","title":"Thermodynamics.total_specific_humidity","text":"total_specific_humidity(ts::ThermodynamicState)\ntotal_specific_humidity(param_set, T, p, relative_humidity)\n\nTotal specific humidity given\n\nts a thermodynamic state\n\nor\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\np pressure\nrelative_humidity relative humidity (can exceed 1 when there is super saturation/condensate)\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.vapor_specific_humidity","page":"API","title":"Thermodynamics.vapor_specific_humidity","text":"vapor_specific_humidity(q::PhasePartition{FT})\n\nThe vapor specific humidity, given a PhasePartition q.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.virtual_pottemp","page":"API","title":"Thermodynamics.virtual_pottemp","text":"virtual_pottemp(param_set, T, ρ[, q::PhasePartition])\n\nThe virtual potential temperature where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nvirtual_pottemp(ts::ThermodynamicState)\n\nThe virtual potential temperature, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.virtual_temperature","page":"API","title":"Thermodynamics.virtual_temperature","text":"virtual_temperature(param_set, T, ρ[, q::PhasePartition])\n\nThe virtual temperature where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nvirtual_temperature(ts::ThermodynamicState)\n\nThe virtual temperature, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Dispatch-types","page":"API","title":"Dispatch types","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"DryAdiabaticProcess","category":"page"},{"location":"API/#Thermodynamics.DryAdiabaticProcess","page":"API","title":"Thermodynamics.DryAdiabaticProcess","text":"DryAdiabaticProcess\n\nFor dispatching to isentropic formulas\n\n\n\n\n\n","category":"type"},{"location":"API/#Temperature-Profiles","page":"API","title":"Temperature Profiles","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"TemperatureProfiles.IsothermalProfile\nTemperatureProfiles.TemperatureProfile\nTemperatureProfiles.DryAdiabaticProfile\nTemperatureProfiles.DecayingTemperatureProfile","category":"page"},{"location":"API/#Thermodynamics.TemperatureProfiles.IsothermalProfile","page":"API","title":"Thermodynamics.TemperatureProfiles.IsothermalProfile","text":"IsothermalProfile(param_set, T_virt)\nIsothermalProfile(param_set, ::Type{FT<:AbstractFloat})\n\nA uniform virtual temperature profile, which is implemented as a special case of DecayingTemperatureProfile.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.TemperatureProfiles.TemperatureProfile","page":"API","title":"Thermodynamics.TemperatureProfiles.TemperatureProfile","text":"TemperatureProfile\n\nSpecifies the temperature or virtual temperature profile for a reference state.\n\nInstances of this type are required to be callable objects with the following signature\n\nT,p = (::TemperatureProfile)(param_set::AbstractParameterSet, z::FT) where {FT}\n\nwhere T is the temperature or virtual temperature (in K), and p is the pressure (in Pa).\n\n\n\n\n\n","category":"type"},{"location":"API/#Thermodynamics.TemperatureProfiles.DryAdiabaticProfile","page":"API","title":"Thermodynamics.TemperatureProfiles.DryAdiabaticProfile","text":"DryAdiabaticProfile{FT} <: TemperatureProfile{FT}\n\nA temperature profile that has uniform dry potential temperature θ\n\nFields\n\nT_surface\nSurface temperature (K)\nT_min_ref\nMinimum temperature (K)\n\n\n\n\n\n","category":"type"},{"location":"API/#Thermodynamics.TemperatureProfiles.DecayingTemperatureProfile","page":"API","title":"Thermodynamics.TemperatureProfiles.DecayingTemperatureProfile","text":"DecayingTemperatureProfile{F} <: TemperatureProfile{FT}\n\nA virtual temperature profile that decays smoothly with height z, from T_virt_surf to T_min_ref over a height scale H_t. The default height scale H_t is the density scale height evaluated with T_virt_surf.\n\nT_textv(z) = max(T_textv sfc  (T_textv sfc - T_textv min) tanh(zH_textt)\n\nFields\n\nT_virt_surf\nVirtual temperature at surface (K)\nT_min_ref\nMinimum virtual temperature at the top of the atmosphere (K)\nH_t\nHeight scale over which virtual temperature drops (m)\n\n\n\n\n\n","category":"type"},{"location":"API/#Tested-profiles","page":"API","title":"Tested profiles","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Thermodynamics.TestedProfiles","category":"page"},{"location":"API/#Thermodynamics.TestedProfiles","page":"API","title":"Thermodynamics.TestedProfiles","text":"TestedProfiles\n\nTested thermodynamic profiles\n\nThis module contains functions to compute all of the thermodynamic states that Thermodynamics is tested with in runtests.jl\n\n\n\n\n\n","category":"module"}]
}
