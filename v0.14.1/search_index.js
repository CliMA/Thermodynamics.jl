var documenterSearchIndex = {"docs":
[{"location":"Clausius_Clapeyron/#Clausius-Clapeyron-Relation-Validation","page":"Clausius-Clapeyron Validation","title":"Clausius-Clapeyron Relation Validation","text":"","category":"section"},{"location":"Clausius_Clapeyron/#Overview","page":"Clausius-Clapeyron Validation","title":"Overview","text":"","category":"section"},{"location":"Clausius_Clapeyron/","page":"Clausius-Clapeyron Validation","title":"Clausius-Clapeyron Validation","text":"This document validates the analytical derivatives of the Clausius-Clapeyron relation by comparing them with finite difference derivatives computed using ForwardDiff.jl. The Clausius-Clapeyron relation describes how the saturation vapor pressure changes with temperature during phase transitions.","category":"page"},{"location":"Clausius_Clapeyron/#Purpose","page":"Clausius-Clapeyron Validation","title":"Purpose","text":"","category":"section"},{"location":"Clausius_Clapeyron/","page":"Clausius-Clapeyron Validation","title":"Clausius-Clapeyron Validation","text":"The validation ensures that our analytical implementation of the Clausius-Clapeyron derivatives is mathematically correct and numerically accurate. This is critical for:","category":"page"},{"location":"Clausius_Clapeyron/","page":"Clausius-Clapeyron Validation","title":"Clausius-Clapeyron Validation","text":"Saturation adjustment algorithms that rely on accurate derivatives\nNumerical stability in thermodynamic calculations\nPhysical consistency of the thermodynamic formulation","category":"page"},{"location":"Clausius_Clapeyron/#Implementation","page":"Clausius-Clapeyron Validation","title":"Implementation","text":"","category":"section"},{"location":"Clausius_Clapeyron/","page":"Clausius-Clapeyron Validation","title":"Clausius-Clapeyron Validation","text":"The validation compares two approaches:","category":"page"},{"location":"Clausius_Clapeyron/","page":"Clausius-Clapeyron Validation","title":"Clausius-Clapeyron Validation","text":"Analytical derivatives: Direct computation using the derived mathematical expressions\nFinite difference derivatives: Numerical approximation using ForwardDiff.jl","category":"page"},{"location":"Clausius_Clapeyron/","page":"Clausius-Clapeyron Validation","title":"Clausius-Clapeyron Validation","text":"include(\"Clausius_Clapeyron.jl\")","category":"page"},{"location":"Clausius_Clapeyron/#Results","page":"Clausius-Clapeyron Validation","title":"Results","text":"","category":"section"},{"location":"Clausius_Clapeyron/","page":"Clausius-Clapeyron Validation","title":"Clausius-Clapeyron Validation","text":"The plot shows:","category":"page"},{"location":"Clausius_Clapeyron/","page":"Clausius-Clapeyron Validation","title":"Clausius-Clapeyron Validation","text":"Top panel: Comparison of analytical vs. finite difference derivatives\nMiddle panel: Error between the two methods\nBottom panel: Saturation vapor pressure as a function of temperature","category":"page"},{"location":"Clausius_Clapeyron/","page":"Clausius-Clapeyron Validation","title":"Clausius-Clapeyron Validation","text":"(Image: )","category":"page"},{"location":"Clausius_Clapeyron/#Interpretation","page":"Clausius-Clapeyron Validation","title":"Interpretation","text":"","category":"section"},{"location":"Clausius_Clapeyron/","page":"Clausius-Clapeyron Validation","title":"Clausius-Clapeyron Validation","text":"Agreement: The analytical and finite difference derivatives should closely match\nError analysis: The middle panel shows the difference between methods\nPhysical range: The temperature range covers typical atmospheric conditions\nValidation: Small errors indicate correct implementation","category":"page"},{"location":"Clausius_Clapeyron/","page":"Clausius-Clapeyron Validation","title":"Clausius-Clapeyron Validation","text":"warning: Implementation Note\nThis script is currently decoupled from the test suite implementation. Consider unifying the validation code with the test suite to ensure that tests and plots remain synchronized.","category":"page"},{"location":"References/#References","page":"References","title":"References","text":"","category":"section"},{"location":"References/","page":"References","title":"References","text":"D. M. Romps. The dry-entropy budget of a moist atmosphere. Journal of the Atmospheric Sciences 65, 3779–3799 (2008).\n\n\n\nA. Bott. Theoretical considerations on the mass and energy consistent treatment of precipitation in cloudy atmospheres. Atmos. Res. 89, 252–269 (2008).\n\n\n\nP. Marquet and J.-F. Geleyn. Formulations of moist thermodynamics for atmospheric modelling. In: Parameterization of Atmospheric Convection, Vol. 2, edited by R. S. Plant and J.-I. Yano (Imperial College Press, London, UK, 2016); Chapter 22, pp. 221–274.\n\n\n\nD. Yatunin, S. Byrne, C. Kawczynski, S. Kandala, G. Bozzola, A. Sridhar, Z. Shen, A. Jaruga, J. Sloan, J. He, D. Z. Huang, V. Barra, O. Knoth, P. Ullrich and T. Schneider. The CliMA atmosphere dynamical core: Concepts, numerics, and scaling. J. Adv. Model. Earth Sys. in review (2025).\n\n\n\nJ. D. Neelin and I. M. Held. Modeling tropical convergence based on the moist static energy budget. Monthly Weather Review 115, 3–12 (1987).\n\n\n\nD. M. Romps. MSE minus CAPE is the true conserved variable for an adiabatically lifted parcel. Journal of the Atmospheric Sciences 72, 3639–3646 (2015).\n\n\n\nD. M. Romps. The Rankine–Kirchhoff approximations for moist thermodynamics. Quart. J. Roy. Meteor. Soc. 147, 3493–3497 (2021).\n\n\n\nK. G. Pressel, C. M. Kaul, T. Schneider, Z. Tan and S. Mishra. Large-eddy simulation in an anelastic framework with closed water and entropy balances. Journal of Advances in Modeling Earth Systems 7, 1425–1456 (2015).\n\n\n\nG. J. Tripoli and W. R. Cotton. The use of lce-liquid water potential temperature as a thermodynamic variable in deep atmospheric models. Monthly Weather Review 109, 1094–1102 (1981).\n\n\n\nG. H. Bryan and J. M. Fritsch. A reevaluation of ice–liquid water potential temperature. Monthly weather review 132, 2421–2431 (2004).\n\n\n\nD. R. Durran. Finite-Volume Methods. In: Numerical Methods for Wave Equations in Geophysical Fluid Dynamics (Springer, 1999); pp. 241–302.\n\n\n\n","category":"page"},{"location":"SaturationAdjustmentConvergence/#Saturation-Adjustment-Convergence-Testing","page":"Saturation Adjustment Convergence","title":"Saturation Adjustment Convergence Testing","text":"","category":"section"},{"location":"SaturationAdjustmentConvergence/#Overview","page":"Saturation Adjustment Convergence","title":"Overview","text":"","category":"section"},{"location":"SaturationAdjustmentConvergence/","page":"Saturation Adjustment Convergence","title":"Saturation Adjustment Convergence","text":"The saturation adjustment procedure requires solving a non-linear equation to find the temperature that satisfies thermodynamic equilibrium conditions. This document describes the convergence testing framework used to validate the robustness of different numerical methods across the input parameter space.","category":"page"},{"location":"SaturationAdjustmentConvergence/#Purpose","page":"Saturation Adjustment Convergence","title":"Purpose","text":"","category":"section"},{"location":"SaturationAdjustmentConvergence/","page":"Saturation Adjustment Convergence","title":"Saturation Adjustment Convergence","text":"While the Tested Profiles section shows physically meaningful thermodynamic states, this section explores convergence behavior across a broader parameter space. We test all permutations of inputs within given ranges of density (rho), internal energy (e_int), and total specific humidity (q_t), including combinations that may not be physically meaningful but help identify the boundaries where convergence fails.","category":"page"},{"location":"SaturationAdjustmentConvergence/","page":"Saturation Adjustment Convergence","title":"Saturation Adjustment Convergence","text":"This testing framework is dedicated to monitoring and improving the performance and robustness of various numerical methods in solving saturation adjustment equations.","category":"page"},{"location":"SaturationAdjustmentConvergence/","page":"Saturation Adjustment Convergence","title":"Saturation Adjustment Convergence","text":"note: Performance Note\nThe dims parameter in docs/src/saturation_adjustment.jl is currently set to dims = (6, 6, 6) to avoid heavy computations during documentation builds. For higher resolution testing, increase it to dims = (10, 10, 10) or higher when running locally.","category":"page"},{"location":"SaturationAdjustmentConvergence/#Convergence-Maps","page":"Saturation Adjustment Convergence","title":"Convergence Maps","text":"","category":"section"},{"location":"SaturationAdjustmentConvergence/#3D-Parameter-Space","page":"Saturation Adjustment Convergence","title":"3D Parameter Space","text":"","category":"section"},{"location":"SaturationAdjustmentConvergence/","page":"Saturation Adjustment Convergence","title":"Saturation Adjustment Convergence","text":"The following maps show convergence behavior across the full 3D parameter space:","category":"page"},{"location":"SaturationAdjustmentConvergence/","page":"Saturation Adjustment Convergence","title":"Saturation Adjustment Convergence","text":"Numerical Method Converged Cases Non-converged Cases\nSecantMethod (Image: ) (Image: )\nNewtonsMethod (Image: ) (Image: )","category":"page"},{"location":"SaturationAdjustmentConvergence/#2D-Slices-by-Total-Specific-Humidity","page":"Saturation Adjustment Convergence","title":"2D Slices by Total Specific Humidity","text":"","category":"section"},{"location":"SaturationAdjustmentConvergence/","page":"Saturation Adjustment Convergence","title":"Saturation Adjustment Convergence","text":"These maps show convergence behavior in 2D slices, binned by total specific humidity:","category":"page"},{"location":"SaturationAdjustmentConvergence/","page":"Saturation Adjustment Convergence","title":"Saturation Adjustment Convergence","text":"Numerical Method Converged Cases Non-converged Cases\nSecantMethod (Image: ) (Image: )\nNewtonsMethod (Image: ) (Image: )","category":"page"},{"location":"SaturationAdjustmentConvergence/#Implementation","page":"Saturation Adjustment Convergence","title":"Implementation","text":"","category":"section"},{"location":"SaturationAdjustmentConvergence/","page":"Saturation Adjustment Convergence","title":"Saturation Adjustment Convergence","text":"The convergence testing is implemented in the following code:","category":"page"},{"location":"SaturationAdjustmentConvergence/","page":"Saturation Adjustment Convergence","title":"Saturation Adjustment Convergence","text":"include(\"saturation_adjustment.jl\")","category":"page"},{"location":"SaturationAdjustmentConvergence/#Interpretation","page":"Saturation Adjustment Convergence","title":"Interpretation","text":"","category":"section"},{"location":"SaturationAdjustmentConvergence/","page":"Saturation Adjustment Convergence","title":"Saturation Adjustment Convergence","text":"Converged regions (green/blue areas) indicate parameter combinations where the numerical method successfully finds a solution\nNon-converged regions (red areas) indicate parameter combinations where the method fails to converge\nBoundary regions help identify the robustness limits of each numerical method\nPhysical relevance should be considered when interpreting results - some non-converged regions may correspond to unphysical parameter combinations","category":"page"},{"location":"SaturationAdjustmentConvergence/#Numerical-Methods-Tested","page":"Saturation Adjustment Convergence","title":"Numerical Methods Tested","text":"","category":"section"},{"location":"SaturationAdjustmentConvergence/","page":"Saturation Adjustment Convergence","title":"Saturation Adjustment Convergence","text":"SecantMethod: A derivative-free method that uses finite differences to approximate derivatives\nNewtonsMethod: Uses analytical derivatives for potentially faster convergence","category":"page"},{"location":"SaturationAdjustmentConvergence/#Usage-Guidelines","page":"Saturation Adjustment Convergence","title":"Usage Guidelines","text":"","category":"section"},{"location":"SaturationAdjustmentConvergence/","page":"Saturation Adjustment Convergence","title":"Saturation Adjustment Convergence","text":"Use these maps to understand the convergence characteristics of different numerical methods\nConsider the trade-offs between robustness (SecantMethod) and efficiency (NewtonsMethod)\nThe tested parameter ranges should cover your expected simulation conditions\nFor production use, ensure your parameter combinations fall within well-converged regions ","category":"page"},{"location":"TestedProfiles/#Tested-Profiles","page":"Tested Profiles","title":"Tested Profiles","text":"","category":"section"},{"location":"TestedProfiles/#Overview","page":"Tested Profiles","title":"Overview","text":"","category":"section"},{"location":"TestedProfiles/","page":"Tested Profiles","title":"Tested Profiles","text":"Thermodynamics.jl is tested using a comprehensive set of thermodynamic profiles specified in src/TestedProfiles.jl. These profiles represent a wide range of atmospheric conditions and are used to validate the thermodynamic calculations.","category":"page"},{"location":"TestedProfiles/#Purpose","page":"Tested Profiles","title":"Purpose","text":"","category":"section"},{"location":"TestedProfiles/","page":"Tested Profiles","title":"Tested Profiles","text":"The tested profiles serve several important functions:","category":"page"},{"location":"TestedProfiles/","page":"Tested Profiles","title":"Tested Profiles","text":"Validation: Ensure thermodynamic calculations are correct across diverse conditions\nCoverage: Test the full range of atmospheric temperatures and humidities\nRobustness: Verify numerical stability under various thermodynamic states\nBenchmarking: Provide consistent test cases for performance evaluation","category":"page"},{"location":"TestedProfiles/","page":"Tested Profiles","title":"Tested Profiles","text":"note: Related Testing Tools\nFor additional testing scenarios, see Temperature Profiles for pre-defined atmospheric temperature profiles.","category":"page"},{"location":"TestedProfiles/#Profile-Characteristics","page":"Tested Profiles","title":"Profile Characteristics","text":"","category":"section"},{"location":"TestedProfiles/","page":"Tested Profiles","title":"Tested Profiles","text":"The tested profiles cover:","category":"page"},{"location":"TestedProfiles/","page":"Tested Profiles","title":"Tested Profiles","text":"Altitude range: 0 to 25 km (surface to upper troposphere)\nTemperature range: 150 K to 340 K (cryogenic to hot conditions)\nHumidity range: 0 to 102% relative humidity (subsaturated to supersaturated)\nDensity range: Full atmospheric density variation with height","category":"page"},{"location":"TestedProfiles/#Dry-Phase-Profiles","page":"Tested Profiles","title":"Dry Phase Profiles","text":"","category":"section"},{"location":"TestedProfiles/","page":"Tested Profiles","title":"Tested Profiles","text":"Dry phase profiles test thermodynamic calculations without moisture, ensuring the dry air thermodynamics are correctly implemented.","category":"page"},{"location":"TestedProfiles/","page":"Tested Profiles","title":"Tested Profiles","text":"import Thermodynamics as TD\nimport Plots\nimport ClimaParams as CP\nimport Thermodynamics.Parameters as TP\nFT = Float64\nparam_set = TP.ThermodynamicsParameters(FT)\n\nprofiles = TD.TestedProfiles.PhaseDryProfiles(param_set, Array{FT});\n(;T, ρ, z) = profiles\np1 = Plots.scatter(ρ, z./10^3, xlabel=\"Density [kg/m^3]\", ylabel=\"z [km]\", title=\"Density\");\np2 = Plots.scatter(T, z./10^3, xlabel=\"Temperature [K]\", ylabel=\"z [km]\", title=\"Temperature\");\nPlots.plot(p1, p2, layout=(1,2))\nPlots.savefig(\"tested_profiles_dry.svg\");","category":"page"},{"location":"TestedProfiles/","page":"Tested Profiles","title":"Tested Profiles","text":"(Image: )","category":"page"},{"location":"TestedProfiles/#Key-Features","page":"Tested Profiles","title":"Key Features","text":"","category":"section"},{"location":"TestedProfiles/","page":"Tested Profiles","title":"Tested Profiles","text":"No moisture: All humidity components are zero\nPressure variation: Follows hydrostatic balance\nTemperature variation: Uses decaying temperature profile\nDensity calculation: Computed from ideal gas law","category":"page"},{"location":"TestedProfiles/#Moist-Phase-Profiles-(Thermodynamic-Equilibrium)","page":"Tested Profiles","title":"Moist Phase Profiles (Thermodynamic Equilibrium)","text":"","category":"section"},{"location":"TestedProfiles/","page":"Tested Profiles","title":"Tested Profiles","text":"Moist phase profiles test thermodynamic calculations with moisture in thermodynamic equilibrium, including saturation adjustment.","category":"page"},{"location":"TestedProfiles/","page":"Tested Profiles","title":"Tested Profiles","text":"import Thermodynamics as TD\nimport Plots\nimport ClimaParams as CP\nimport Thermodynamics.Parameters as TP\nFT = Float64\nparam_set = TP.ThermodynamicsParameters(FT)\n\nprofiles = TD.TestedProfiles.PhaseEquilProfiles(param_set, Array{FT});\n(;T, ρ, q_tot, z) = profiles\np1 = Plots.scatter(ρ, z./10^3, xlabel=\"Density [kg/m^3]\", ylabel=\"z [km]\", title=\"Density\");\np2 = Plots.scatter(T, z./10^3, xlabel=\"Temperature [K]\", ylabel=\"z [km]\", title=\"Temperature\");\np3 = Plots.scatter(q_tot*1000, z./10^3, xlabel=\"Total specific\\nhumidity [g/kg]\", ylabel=\"z [km]\", title=\"Total specific\\nhumidity\");\nPlots.plot(p1, p2, p3, layout=(1,3))\nPlots.savefig(\"tested_profiles_virt_temp.svg\")","category":"page"},{"location":"TestedProfiles/","page":"Tested Profiles","title":"Tested Profiles","text":"(Image: )","category":"page"},{"location":"TestedProfiles/#Key-Features-2","page":"Tested Profiles","title":"Key Features","text":"","category":"section"},{"location":"TestedProfiles/","page":"Tested Profiles","title":"Tested Profiles","text":"Moisture included: Total specific humidity varies with height\nSaturation adjustment: Phase partitioning determined by equilibrium\nWide humidity range: From subsaturated to supersaturated conditions","category":"page"},{"location":"TestedProfiles/#Profile-Generation","page":"Tested Profiles","title":"Profile Generation","text":"","category":"section"},{"location":"TestedProfiles/","page":"Tested Profiles","title":"Tested Profiles","text":"The profiles are generated using:","category":"page"},{"location":"TestedProfiles/","page":"Tested Profiles","title":"Tested Profiles","text":"Altitude grid: 50 points from 0 to 25 km\nTemperature profile: Decaying temperature from 340 K at surface to 150 K at 25 km\nPressure: Computed using hydrostatic balance\nHumidity: Relative humidity from 0% to 102% (including supersaturation)","category":"page"},{"location":"TestedProfiles/#Usage-in-Testing","page":"Tested Profiles","title":"Usage in Testing","text":"","category":"section"},{"location":"TestedProfiles/","page":"Tested Profiles","title":"Tested Profiles","text":"These profiles are used in the test suite to validate:","category":"page"},{"location":"TestedProfiles/","page":"Tested Profiles","title":"Tested Profiles","text":"State constructors: All thermodynamic state creation methods\nProperty calculations: Temperature, pressure, density, humidity\nEnergy calculations: Internal energy, enthalpy, potential temperature\nPhase transitions: Saturation adjustment and phase partitioning\nNumerical stability: Convergence and accuracy across parameter space","category":"page"},{"location":"TestedProfiles/#Integration-with-Development","page":"Tested Profiles","title":"Integration with Development","text":"","category":"section"},{"location":"TestedProfiles/","page":"Tested Profiles","title":"Tested Profiles","text":"The tested profiles are automatically used in:","category":"page"},{"location":"TestedProfiles/","page":"Tested Profiles","title":"Tested Profiles","text":"Unit tests: Validate individual function correctness\nIntegration tests: Verify end-to-end thermodynamic calculations\nPerformance tests: Benchmark computational efficiency","category":"page"},{"location":"TestedProfiles/","page":"Tested Profiles","title":"Tested Profiles","text":"tip: Development Workflow\nWhen adding new thermodynamic functionality, ensure it works correctly with these tested profiles. The profiles provide comprehensive coverage of atmospheric conditions and help catch numerical issues early.","category":"page"},{"location":"Formulation/#Mathematical-Formulation","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"","category":"section"},{"location":"Formulation/#Table-of-Contents","page":"Mathematical Formulation","title":"Table of Contents","text":"","category":"section"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Introduction\nFundamental Assumptions\nWorking Fluid and Equation of State\n3.1 Mass Fractions and Notation\n3.2 Equation of State\nHeat Capacities\nLatent Heats\nInternal Energies\nEnthalpies\nMoist Static Energy\nSaturation Vapor Pressure\nSaturation Specific Humidity\nSaturation Adjustment\nAuxiliary Thermodynamic Functions\n12.1 Relative Humidity\n12.2 Potential Temperature\n12.3 Virtual Temperature and Virtual Potential Temperature\n12.4 Liquid-Ice Potential Temperature\n12.5 Speed of Sound","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"note: Cross-References\nThis documentation is closely related to the API documentation which provides detailed function signatures and usage examples. The theoretical framework described here is implemented in the Thermodynamics.jl package.","category":"page"},{"location":"Formulation/#1.-Introduction","page":"Mathematical Formulation","title":"1. Introduction","text":"","category":"section"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The thermodynamics of moist air is often subject to empirical approximations, which usually are opaque, internally inconsistent, and/or inconsistent across model components. For example, microphysical process models often use different approximations for thermodynamic quantities such as saturation vapor pressures than the dynamical core. The often bewildering array of approximations makes it difficult to achieve global conservation, e.g., of energy, and it complicates the use of models for other planetary atmospheres, with different thermodynamic parameters.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Here we introduce one consistent set of thermodynamic approximations for all model components. The key to thermodynamic consistency at reasonable accuracy is to take the specific heat capacities of the constituents of moist air (dry air, water vapor, liquid water, and ice) to be constant, i.e., to assume the gases to be calorically perfect. We discuss how to derive all other thermodynamic quantities that are needed on the basis of this one approximation ([1],[2], [3],[4]). This includes:","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Giving accurate and easily adaptable closed-form expressions for internal energies, enthalpies, specific latent heats, and saturation vapor pressures\nShowing how to construct consistent sets of thermodynamic equations that either (i) assume equilibrium of the phases and require only one prognostic water variable, or (ii) do not assume equilibrium of the phases and require prognostic variables for all water phases\nShowing how to obtain temperatures from energy variables under either phase equilibrium assumptions (by saturation adjustment) or phase non-equilibrium assumptions (by a closed-form expression for temperature).","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The resulting thermodynamic functions are implemented in Thermodynamics.jl.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"note: Physical Motivation\nThe assumption of calorically perfect gases (constant specific heat capacities) is justified for atmospheric conditions because the error of approximating them as constant is less than 1% for dry air, the main constituent of moist air, and at most a few percent for the water phases. This approximation enables closed-form expressions for all thermodynamic quantities while maintaining sufficient accuracy for atmospheric modeling.","category":"page"},{"location":"Formulation/#2.-Fundamental-Assumptions","page":"Mathematical Formulation","title":"2. Fundamental Assumptions","text":"","category":"section"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Our thermodynamic framework is based on the following fundamental assumptions:","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Ideal Gas Law: Dry air and water vapor behave as ideal gases\nCalorically Perfect Gases: Specific heat capacities are constant (temperature-independent)\nNegligible Condensate Volume: The specific volume of liquid water and ice is neglected relative to gas phases\nThermal Equilibrium: All phases have the same temperature\nReference State: All thermodynamic quantities are defined relative to a reference temperature T₀","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"tip: Implementation Note\nThese assumptions enable closed-form expressions for all thermodynamic quantities, making the implementation computationally efficient while maintaining sufficient accuracy for atmospheric modeling.","category":"page"},{"location":"Formulation/#3.-Working-Fluid-and-Equation-of-State","page":"Mathematical Formulation","title":"3. Working Fluid and Equation of State","text":"","category":"section"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The working fluid of the atmosphere model is moist air including precipitation. That is, it is an ideal mixture of dry air, water vapor, and condensed water (liquid and ice) in both clouds and precipitation (e.g., rain, snow, graupel). This comprehensive approach ensures that all water phases that can exchange mass and energy with the gas phases are included, providing full thermodynamic consistency.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"note: Key Distinction: Precipitation Included in Working Fluid\nUnlike many atmospheric models that treat precipitation as a separate component, this framework includes precipitation as part of the working fluid. This means:Mass and energy conservation are maintained across all phases (including precipitation)\nThermodynamic consistency is preserved throughout the system\nAll condensed water phases (cloud and precipitation) are assumed to be in thermal equilibrium with the surrounding air (which is an approximation, see [4] for discussion)","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Dry air and water vapor are taken to be ideal gases. The specific volume of all condensed phases (cloud liquid, cloud ice, and precipitation) is neglected relative to that of the gas phases (it is a factor 10^3 less than that of the gas phases). All phases are assumed to have the same temperature, and are advected with the same velocity. The condensates may be sedimenting or falling relative to the gas phases; nonetheless, they are assumed to be in thermal equilibrium with the surrounding fluid. However, the condensates do not need to be in thermodynamic equilibrium with the other fluid constituents; out-of-equilibrium phases such as supercooled liquid can exist.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"tip: Implementation Note\nThe inclusion of precipitation in the working fluid means that precipitation mass is included in the total water content q_t and affects the specific heat capacities. This is implemented consistently throughout the Thermodynamics.jl package.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"info: Sidebar: Pros and Cons of Including Precipitation in the Working Fluid\nPros:Ensures mass and energy conservation across all phases\nSimplifies the thermodynamic framework and implementation\nEnables consistent inclusion of microphysics schemes that treat hydrometeors as occupying a continuous spectrum (without artificial spectral gaps between cloud condensate and precipitation)Cons:Assumes precipitation is in thermal equilibrium with air, which may not always be true (e.g., large raindrops or hail)See [4] for further discussion and justification of this modeling choice.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"","category":"page"},{"location":"Formulation/#3.1-Mass-Fractions-and-Notation","page":"Mathematical Formulation","title":"3.1 Mass Fractions and Notation","text":"","category":"section"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The density of the moist air is denoted by rho. We use the following notation for the mass fractions of the moist air mixture (mass of a constituent divided by the total mass of the working fluid):","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Symbol Definition\nq_d dry air mass fraction\nq_v water vapor specific humidity\nq_l liquid water specific humidity (includes both cloud liquid and precipitating liquid)\nq_i ice specific humidity (includes both cloud ice and precipitating ice/snow)\nq_c = q_l + q_i condensate specific humidity (all condensed water, cloud + precipitation)\nq_t = q_v + q_c total specific humidity (all water phases)","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"note: Precipitation Inclusion\nThe liquid and ice specific humidities q_l and q_i include both cloud condensate and precipitation. This unified treatment ensures that all condensed water phases are thermodynamically consistent and can exchange mass and energy with the gas phases.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Because this enumerates all constituents of the working fluid, we have q_t + q_d = 1. In Earth's atmosphere, the water vapor specific humidity q_v generally dominates the total specific humidity q_t and is usually O(10^-2) or smaller; the condensate specific humidity is typically O(10^-4). Hence, water is a trace constituent of the atmosphere, and only a small fraction of atmospheric water is in condensed phases.","category":"page"},{"location":"Formulation/#3.2-Equation-of-State","page":"Mathematical Formulation","title":"3.2 Equation of State","text":"","category":"section"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The pressure p of the working fluid is the sum of the partial pressures of dry air and water vapor, both taken to be ideal gases. Neglecting the volume of the condensed phases (but not their masses), this gives p = rho (R_d q_d + R_v q_v) T, where R_d is the specific gas constant of dry air, and R_v is the specific gas constant of water vapor.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"note: Precipitation and the Equation of State\nAlthough precipitation is included in the working fluid, it does not contribute to the pressure because its specific volume is neglected. However, precipitation mass affects the gas constant R_m and specific heat capacities through the total water content q_t, ensuring thermodynamic consistency.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"This can also be written as","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\n    p = rho R_m T\nlabeleeos\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"where","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\nbeginaligned\n    R_m(q)  = R_d (1 - q_t) + R_v q_v \n            = R_d left 1 + (varepsilon_dv-1)q_t - varepsilon_dv q_cright\nendaligned\nlabeleRm\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"is the specific gas constant of moist air (which varies with composition); here, we have used q_d = 1-q_t and q_v = q_t - q_c and introduced the ratio of the molar masses of dry air and water vapor varepsilon_dv = R_vR_d (approx 161).","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"note: Mathematical Note\nAlthough called a \"constant,\" R_m actually varies with the composition of the moist air. This terminology reflects its role as the effective gas constant in the equation of state, similar to how the molecular weight of a gas mixture varies with composition.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Equations \\eqref{e:eos} and \\eqref{e:Rm} constitute the equation of state of the working fluid. We use the notation q=(q_t q_l q_i) for the tuple of specific humidities that determine the composition of moist air.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"example: Typical Values\nFor Earth's atmosphere at sea level:Quantity Value\nR_d 2870 J/(kg·K)\nR_v 4615 J/(kg·K)\nvarepsilon_dv 161\nR_m (typical moist air, q_t = 001) 2887 J/(kg·K)\nR_m (air with precipitation, q_t = 0015) 2890 J/(kg·K)","category":"page"},{"location":"Formulation/#4.-Heat-Capacities","page":"Mathematical Formulation","title":"4. Heat Capacities","text":"","category":"section"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The isochoric specific heat capacities of the constituents of moist air are:","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Symbol Definition\nc_vd Isochoric specific heat capacity of dry air\nc_vv Isochoric specific heat capacity of water vapor\nc_vl Isochoric specific heat capacity of liquid water\nc_vi Isochoric specific heat capacity of ice","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Our key thermodynamic approximation is to take these isochoric specific heat capacities to be constants, i.e., we take the gases to be calorically perfect. This is an approximation because they depend weakly on temperature. But for atmospheric conditions, the error of approximating them as constant is less than 1% for dry air, the main constituent of moist air, and at most a few percent for the water phases.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The difference between the isochoric and isobaric specific heat capacities is proportional to the specific volume. Consistent with taking the specific volume of liquid water and ice to be zero, we take the isochoric and isobaric specific heat capacities of the condensed phases to be equal. The isobaric specific heat capacities of the constituents then are:","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Symbol Definition\nc_pd = c_vd + R_d Isobaric specific heat capacity of dry air\nc_pv = c_vv + R_v Isobaric specific heat capacity of water vapor\nc_pl = c_vl Isobaric specific heat capacity of liquid water\nc_pi = c_vi Isobaric specific heat capacity of ice","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"tip: Implementation Note\nThe relationship c_p = c_v + R for ideal gases follows from the definition of enthalpy h = u + pv and the ideal gas law pv = RT. For condensed phases, we neglect the volume term, so c_p  c_v.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The corresponding specific heat capacities of moist air are the weighted sum of those of the constituents:","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\nbeginaligned\n    c_cdot m(q)  = (1-q_t) c_cdot d + q_v c_cdot v + q_l c_cdot l + q_i c_cdot i \n     = c_cdot d + (c_cdot v - c_cdot d)q_t + (c_cdot l - c_cdot v)q_l + (c_cdot i - c_cdot v)q_i\nendaligned\nlabeleSpecificHeat\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"where cdot stands for v or p and we have used q_v = q_t - q_l - q_i. ","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"note: Mathematical Note\nThe second form of the equation is computationally more efficient as it avoids computing q_v explicitly. This rearrangement is used in the implementation to improve performance.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Straightforward substitution shows that the above relation between the specific heat capacities of the constituents also holds for moist air as a whole:","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequationlabeleSpecificHeatRelation\n    c_pm(q) = c_vm(q) + R_m(q)\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"example: Typical Values\nFor Earth's atmosphere at standard conditions:Quantity Value\nc_vd 7176 J/(kg·K)\nc_vv 14100 J/(kg·K)\nc_vl 42190 J/(kg·K)\nc_vi 21060 J/(kg·K)\nc_vm (typical moist air, q_t = 001) 7200 J/(kg·K)\nc_pm (typical moist air, q_t = 001) 10080 J/(kg·K)","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"tip: Implementation Note\nThe specific heat capacities are implemented as weighted sums in the cp_m and cv_m functions. The implementation uses the rearranged form of equation \\eqref{e:SpecificHeat} for computational efficiency.","category":"page"},{"location":"Formulation/#5.-Latent-Heats","page":"Mathematical Formulation","title":"5. Latent Heats","text":"","category":"section"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Kirchhoff's relation states that the specific latent enthalpy (heat) L of a phase change depends on temperature T through","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\n    fracdLdT = Delta c_p\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"where Delta c_p is the difference in isobaric specific heat capacities between the phase with the higher and lower specific volume. For the constant isobaric specific heat capacities that we assume, this can be integrated to give","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\n    L(T) = L_0 + Delta c_p (T-T_0)\n    labeleLHTemperature\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"where T_0 is a reference temperature and L_0 is the specific latent heat at T_0.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"note: Physical Interpretation\nKirchhoff's relation follows from the fact that the enthalpy difference between phases changes with temperature due to the different heat capacities of the phases. The latent heat represents the energy required to transform a unit mass from one phase to another at constant pressure.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"tip: Implementation Note\nThe linear temperature dependence of latent heats enables closed-form expressions for saturation vapor pressure and other thermodynamic quantities. This approximation is accurate to within a few percent for atmospheric temperature ranges.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"For the phase transitions of water, this implies specifically:","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Formula Description\nL_v(T) = L_v0 + (c_pv - c_pl) (T - T_0) Latent heat of vaporization\nL_f(T) = L_f0 + (c_pl - c_pi) (T - T_0) Latent heat of fusion\nL_s(T) = L_s0 + (c_pv - c_pi) (T - T_0) Latent heat of sublimation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"With L_s0 = L_v0 + L_f0, this gives L_s(T) = L_v(T) + L_f(T), as it should.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"example: Typical Values\nAt the reference temperature T_0 = 27315 K:Quantity Value\nL_v0 2501 times 10^6 J/kg (latent heat of vaporization)\nL_f0 0334 times 10^6 J/kg (latent heat of fusion)\nL_s0 2835 times 10^6 J/kg (latent heat of sublimation)At T = 300 K:Quantity Value\nL_v 2430 times 10^6 J/kg\nL_f 0334 times 10^6 J/kg\nL_s 2764 times 10^6 J/kg","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"tip: Implementation Note\nThe latent heats are implemented in the latent_heat_vapor, latent_heat_fusion, and latent_heat_sublim functions. The weighted latent heat for mixed-phase conditions is computed in latent_heat_mixed.","category":"page"},{"location":"Formulation/#6.-Internal-Energies","page":"Mathematical Formulation","title":"6. Internal Energies","text":"","category":"section"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The specific internal energies of the constituents of moist air can be written as","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\nbeginaligned\nI_d(T)  = c_vd (T - T_0) - R_d T_0  \nI_v(T)  = c_vv (T - T_0) + I_v0\nI_l(T)  = c_vl (T - T_0) \nI_i(T)  = c_vi (T - T_0) - I_i0\nendaligned\nlabeleInternalEnergies\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Here, the reference specific internal energy I_v0 is the difference in specific internal energy between vapor and liquid at the reference temperature T_0, and I_i0 is the difference in specific internal energy between ice and liquid at T_0. We have included an arbitrary constant offset - R_d T_0 in the definition of the dry specific internal energy as that simplifies the corresponding specific enthalpies \\eqref{e:Enthalpies}.  ","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"note: Physical Interpretation\nThe internal energy represents the total energy of a substance excluding kinetic and potential energy. The reference energies I_v0 and I_i0 represent the energy differences between phases at the reference temperature, accounting for the fact that vapor has higher internal energy than liquid, and ice has lower internal energy than liquid.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The internal energy of moist air is the weighted sum of that of the constituents:","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\nbeginaligned\n     I(T q)  = (1-q_t) I_d(T) + q_v I_v(T) + q_l I_l(T) + q_i I_i(T)\n           = c_vm(q) (T - T_0)  + q_v I_v0 - q_i I_i0 - (1 - q_t) R_d T_0\nendaligned\nlabeleTotalInternalEnergy\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"tip: Implementation Note\nThe internal energy is implemented as a weighted sum of constituent energies in the internal_energy function. The constituent energies are computed separately in internal_energy_dry, internal_energy_vapor, internal_energy_liquid, and internal_energy_ice.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The internal energy can be inverted to obtain the temperature given I and the specific humidities:","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\n    T = T_0 + fracI - (q_t - q_l - q_i) I_v0 + q_i I_i0 + (1 - q_t) R_d T_0c_vm(q)\n    labeletemperature\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"where we have used q_v = q_t - q_l - q_i. This allows one to recover temperature given internal energy and specific humidities as state variables.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"note: Mathematical Note\nThe temperature recovery equation \\eqref{e:temperature} is crucial for saturation adjustment algorithms, where temperature must be computed from internal energy and composition. This inversion is possible because internal energy is a monotonic function of temperature for our assumptions.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The reference specific internal energies I_v0 and I_i0 are related to the reference specific latent heats L_v0 and L_f0, which indicate the enthalpy differences between the phases at T_0. The reference specific internal energies are obtained from the reference specific latent heats by subtracting the \"pV\" term, which is p_krho_k for the relevant partial pressure p_k and specific volume 1rho_k of the phase k (and hence is zero for the condensed phases, whose specific volume we neglect). This gives","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\nbeginaligned\n     I_v0 = L_v 0 - R_v T_0\n     I_i0 = L_f 0\nendaligned\nlabeleRefInternalEnergies\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"example: Typical Values\nAt the reference temperature T_0 = 27315 K:Quantity Value\nI_v0 2501 times 10^6 J/kg (vapor reference energy)\nI_i0 0334 times 10^6 J/kg (ice reference energy)For typical moist air at T = 300 K with q_t = 001:Quantity Value\nI 215 times 10^3 J/kg (total internal energy)","category":"page"},{"location":"Formulation/#7.-Enthalpies","page":"Mathematical Formulation","title":"7. Enthalpies","text":"","category":"section"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The specific enthalpies of the constituents of moist air are obtained by adding p_krho_k for phase k to the corresponding specific internal energy \\eqref{e:InternalEnergies}. Again neglecting the specific volumes of the condensed phases and using the relations \\eqref{e:RefInternalEnergies} between reference specific energies and latent heats, this gives:","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\nlabeleEnthalpies\nbeginaligned\n    h_d(T) = I_d(T) + R_d T = c_pd(T-T_0) \n    h_v(T) = I_v(T) + R_v T = c_pv(T-T_0) + L_v0 \n    h_l(T) = I_l(T) = c_pl(T-T_0) \n    h_i(T) = I_i(T) = c_pi(T-T_0) - L_f0\nendaligned\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"note: Physical Interpretation\nEnthalpy represents the total energy of a substance including the work done against pressure. For ideal gases, enthalpy includes the pV term, while for condensed phases this term is neglected due to their small specific volume. Enthalpy is the relevant energy quantity for fluid transport, including at boundaries.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The enthalpy of moist air is the weighted sum of the constituent enthalpies:","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\nbeginsplitlabeleenthalpy_definition\n    h(T q)  = (1-q_t) h_d + q_v h_v + q_l h_l + q_i h_i \n        = c_pm(q) (T-T_0) + q_v L_v0 - q_i L_f0\n        = I(q T) + R_m T\nendsplit\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"where the last equality used c_pm = c_vm + R_m (Eq. \\ref{e:SpecificHeatRelation}). ","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"tip: Implementation Note\nThe enthalpy is implemented in the specific_enthalpy function. The relationship h = I + R_m T is used for efficient computation, avoiding the need to compute individual constituent enthalpies.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The enthalpy is the relevant thermodynamic energy quantity in fluid transport. It arises in boundary conditions for energy fluxes and in the modeling of subgrid-scale (SGS) turbulent transport. For those purposes, we need gradients of the enthalpy, which can be written as","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\nlabeleEnthalpyGradient\n    h = c_pm(q) T - h_d(T) q_t\n    + h_v(T) q_v + h_l(T) q_l + h_i(T) q_i\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"This cleanly separates gradients involving temperature and gradients involving specific humidities.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"example: Typical Values\nFor typical moist air at T = 300 K with q_t = 001, we have the specific enthalpy h = 3020 times 10^3 J/kg. This is significantly larger than the specific internal energy due to the R_m T term.","category":"page"},{"location":"Formulation/#8.-Moist-Static-Energy","page":"Mathematical Formulation","title":"8. Moist Static Energy","text":"","category":"section"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The sum of the specific enthalpy of moist air and the specific gravitational potential energy Φ is the moist static energy [5]","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequationlabeleMSE\nmathrmMSE = h + Φ\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Moist static energy arises naturally as the static energy component that is transported in moist air. \"Static\" here refers to the fact that the (small) kinetic energy contribution to the total energy is neglected. The global integral of moist static energy is approximately conserved in adiabatic processes, even in the presence of reversible phase transitions and latent heat release. It is also approximately materially conserved ([6]).","category":"page"},{"location":"Formulation/#9.-Saturation-Vapor-Pressure","page":"Mathematical Formulation","title":"9. Saturation Vapor Pressure","text":"","category":"section"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The Clausius-Clapeyron relation describes how the saturation vapor pressure p_v^* of an ideal gas over a plane surface of condensate depends on temperature:","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\nlabeleClausiusClapeyron\n    fracd log(p_v^*)dT = fracLR_v T^2\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Here, L is the specific latent heat of the phase transition, which is L_v for the saturation vapor pressure over liquid, or L_s for the saturation vapor pressure over ice.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"note: Validation\nThe analytical derivatives of this relation are validated against finite difference methods. See Clausius-Clapeyron Relations for validation details.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Substituting the linear relation \\eqref{e:LHTemperature} between latent heat and temperature, and taking p_mathrmtr to be the vapor pressure at the triple point (by definition equal to the saturation vapor pressures both over liquid and ice), the Clausius-Clapeyron relation can be integrated to give a closed-form expression, the so-called Rankine-Kirchhoff approximation ([7]), for the vapor pressure that is consistent with our thermodynamic assumptions:","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\n    p_v^* = p_mathrmtr left( fracTT_mathrmtr right)^fracDelta c_pR_v\n        exp left fracL_0 - Delta c_p T_0R_v\n        left( frac1T_mathrmtr - frac1T right) right\n        labeleSatVaporPressure\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"tip: Implementation Note\nThe saturation vapor pressure is implemented in the saturation_vapor_pressure function. The closed-form expression enables efficient computation without numerical integration. ","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"With L_0 = L_v0 or L_0 = L_s0 and the corresponding heat capacity difference Delta c_p, this gives saturation vapor pressures over liquid or ice that are accurate within 3% for temperatures between 200K and 330K (with accuracy better than 1% for typical near-surface conditions).","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"example: Typical Values\nAt T = 300 K:Quantity Value\np_v^* (liquid) 3537 Pa\np_v^* (ice) 286 PaAt T = 27315 K (triple point):Quantity Value\np_v^* (liquid) = p_v^* (ice) 611 PaThe ratio of liquid to ice saturation vapor pressure at 300 K is approximately 12.4, reflecting the higher energy required for sublimation compared to vaporization.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"To obtain the saturation vapor pressure over a mixture of liquid and ice (e.g., in mixed-phase clouds), using a weighted average of the relevant specific latent heats in the vapor pressure \\eqref{e:SatVaporPressure} leads to a thermodynamically consistent formulation ([8]). That is, if a fraction lambda_p of the condensate is liquid and the complement 1-lambda_p is ice, calculating the saturation vapor pressure with a specific latent heat lambda_p L_v + (1-lambda_p)L_s gives a thermodynamically consistent saturation vapor pressure over the mixture.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"note: Physical Interpretation\nThe weighted latent heat approach ensures thermodynamic consistency when computing saturation vapor pressure over mixed-phase conditions. This is important for modeling mixed-phase clouds where both liquid and ice coexist.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"In thermodynamic equilibrium, the liquid fraction","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequationlabeleliquid_fraction\n    lambda_p(T) = H(T-T_mathrmfreeze)\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"is a Heaviside function H of temperature, being 0 below the freezing temperature T_mathrmfreeze and 1 above it. However, out of thermodynamic equilibrium, supercooled liquid can exist between the temperature of homogeneous ice nucleation T_mathrmicenuc and the freezing temperature T_mathrmfreeze. In many climate models, this is modeled by a continuous function","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\n    lambda_p(T) =\n    begincases\n    0  textfor  Tle T_mathrmicenuc\n    0lambda_i(T)1  textfor  T_mathrmicenuc  T   T_mathrmfreeze\n    1    textfor  Tge T_mathrmfreeze\n    endcases\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"where lambda_i interpolates between 0 at the temperature of homogeneous ice nucleation and 1 at the freezing temperature. However, it is important to recognize that this is merely an attempt to model out-of-equilibrium phases such as supercooled liquid within a thermodynamic equilibrium framework (where phase partitioning only depends on thermodynamic state variables but not on the history of air masses); this is not generally possible, and we will adopt alternative approaches that predict liquid and ice specific humidities separately.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"tip: Implementation Note\nThe liquid fraction is implemented in the liquid_fraction function. For equilibrium conditions, it uses a Heaviside function, which could be extended to  continuous interpolation as described above. For non-equilibrium conditions, it is computed from the prognostic liquid and ice specific humidities. ","category":"page"},{"location":"Formulation/#10.-Saturation-Specific-Humidity","page":"Mathematical Formulation","title":"10. Saturation Specific Humidity","text":"","category":"section"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"From the saturation vapor pressure p_v^*, the saturation specific humidity can be computed using the ideal gas law \\eqref{e:eos}, giving the density of water vapor at saturation rho_v^* = p_v^*(T)(R_v T), and hence the saturation specific humidity","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\n     q_v^* = fracrho_v^*rho = fracp_v^*(T)rho R_v T\nlabeleSatShum\nendequation","category":"page"},{"location":"Formulation/#11.-Saturation-Adjustment","page":"Mathematical Formulation","title":"11. Saturation Adjustment","text":"","category":"section"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Gibbs' phase rule states that in thermodynamic equilibrium, the temperature T and liquid and ice specific humidities q_l and q_i can be obtained from the three thermodynamic state variables density rho, total water specific humidity q_t, and internal energy I. Thus, a moist dynamical core that assumes equilibrium thermodynamics can be constructed from a dry dynamical core with internal (or total) energy as a prognostic variable by including only a tracer for the total specific humidity q_t, and calculating the temperature and condensate specific humidities from rho, q_t, and I.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Obtaining the temperature and condensate specific humidities from the state variables rho, q_t, and I is the problem of finding the root T of","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\nI^*(T rho q_t) - I = 0\nlabeleSatAdjustment\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"where I^*(T rho q_t) is the internal energy at equilibrium. In an unsaturated equilibrium, there is no condensate, so I^* is the internal energy with q_l=q_i=0. At saturation, the internal energy I^* depends on the vapor specific humidity, q_v = q_v^*(T rho), and on the saturation excess (total condensate)","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\nq_c^* = maxbiglq_t - q_v^*(T rho) 0bigr\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"which is partitioned according to the liquid fraction λ_p into","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\nq_l^* = λ_p(T) q_c^* quad textand quad q_i^* = bigl1-λ_p(T)bigrq_c^*\nlabelePhasePartition\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"In saturated conditions, finding the root of \\eqref{e:SatAdjustment} is a nonlinear problem, which must be solved iteratively or approximately, in what is known as a saturation adjustment procedure.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"A zeroth-order approximation of the temperature T satisfying the saturation adjustment condition \\eqref{e:SatAdjustment} is obtained by assuming unsaturated conditions. In that case, the expression \\eqref{e:temperature} for temperature, with q_l=q_i=0, gives the unsaturated temperature","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\n    T_1 = T_0 + fracI - q_t I_v0c_vm^*\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Here, the isochoric specific heat capacity in equilibrium, c_vm^* = c_vm(q^*), is the specific heat capacity under equilibrium partitioning q^* of the phases, which here, for unsaturated conditions, means q^*=(q_t q_l=0 q_i=0). If the total specific humidity q_t is less than the saturation specific humidity at T_1 (q_t le q_v^*(T_1 rho)), the air is indeed unsaturated, and T=T_1 is the exact temperature consistent given I, rho, and q_t.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"If the air is saturated (q_t  q_v^*(T_1 rho)), successively improved temperature estimates T_n+1 can be obtained from the temperature T_n (n=1dots) by Newton's method. Linearizing the saturation internal energy I^*(T rho q_t) around the temperature T_n gives","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\n    I^*(T rho q_t) approx I^*(T_n rho q_t) + leftfracpartial I^*(T rho q_t)partial Tright_T_n (T - T_n)\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"and solving for the temperature T gives the first-order Newton update","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\n    T_n+1 = T_n - fracI^*(T_n rho q_t) - I(partial I^*partial T)_T_n\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The derivative partial I^*partial T_T_n is obtained by differentiation of the internal energy \\eqref{e:TotalInternalEnergy}, either through automatic differentiation or analytically:","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginmultline\n     leftfracpartial I^*(T rho q_t)partial Tright_T_n\n     = c_vm^*(q_t T_n) \n     +  left( I_v0 + 1-λ_p(T_n)I_i0 + (T_n - T_0) left fracdc_vm^*dq_v^*right_T_n right) left fracpartial q_v^*(T rho q_t)partial Tright_T_n\nendmultline","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"where c_vm^*(q_t T_n) = c_vmq^*(T_n) is the isochoric specific heat in equilibrium at temperature T_n, with q_v = q_v^*(T_n) and with the corresponding phase partitioning q^* = (q_t q_l^* q_i^*) according to \\eqref{e:PhasePartition}. The derivative of the saturation specific humidity, partial q_v^*(Trho q_t)partial T, is to be taken at a fixed density rho and total specific humidity q_t, like the other derivatives. We have neglected the singular derivative of lambda_p at the freezing temperature T_mathrmfreeze. The two remaining derivatives are that of the isochoric specific heat,","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\n    left fracdc_vm^*dq_v^*right_T_n = c_vv - λ_p(T_n) c_vl - 1-λ_p(T_n)c_vi\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"obtained from the definition \\eqref{e:SpecificHeat} of the specific heat of moist air, and that of the saturation specific humidity,","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\n    left fracpartial q_v^*(T rho q_t)partial Tright_T_n = q_v^*(T_n) fracLR_v T_n^2 quad textwith quad L = λ_p(T_n) L_v + 1-λ_p(T_n) L_s\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"obtained from the Clausius-Clapeyron relation \\eqref{e:ClausiusClapeyron} and the relation \\eqref{e:SatShum} between specific humidity and vapor pressure.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The resulting successive Newton approximations T_n generally converge quadratically. Because condensate specific humidities are usually small, T_1 provides a close initial estimate, and few iterations are needed. Even the first-order approximation Tapprox T_2 often suffices. However, convergence may not be achieved near the phase transition at the freezing temperature T_mathrmfreeze because the derivative of I^* with respect to temperature is discontinuous there. That case requires special treatment to ensure convergence (or limiting the number of iterations).","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Using saturation adjustment makes it possible to construct a moist dynamical core that has the total specific humidity q_t as the only prognostic moisture variable. The price for this simplicity is the necessity to solve a nonlinear problem iteratively (or approximately) at each time step, and being confined to an equilibrium thermodynamics framework which cannot adequately account for non-equilibrium processes. Using explicit tracers for the condensates q_l and q_i in addition to q_t avoids iterations at each time step and allows the inclusion of explicit non-equilibrium processes, such as those leading to the formation of supercooled liquid in mixed-phase clouds.","category":"page"},{"location":"Formulation/#12.-Auxiliary-Thermodynamic-Functions","page":"Mathematical Formulation","title":"12. Auxiliary Thermodynamic Functions","text":"","category":"section"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Several auxiliary thermodynamic functions are commonly used.","category":"page"},{"location":"Formulation/#12.1-Relative-Humidity","page":"Mathematical Formulation","title":"12.1 Relative Humidity","text":"","category":"section"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The relative humidity is defined as the ratio of the partial pressure of water vapor p_v to the saturation vapor pressure p_v^*,","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"mathrmRH = fracp_vp_v^*","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Using the ideal gas law for water vapor, p_v = q_v rho R_v T, this can be written as","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\n    mathrmRH = fracq_v rho R_v Tp_v^*\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"where p_v^* is the saturation vapor pressure \\eqref{e:SatVaporPressure}. Over a mixture of ice and liquid, the saturation vapor pressure \\eqref{e:SatVaporPressure} is evaluated with a specific latent heat L = λ_p L_v + (1-λ_p) L_s that is a weighted sum of those for vaporization and sublimation.","category":"page"},{"location":"Formulation/#12.2-Potential-Temperature","page":"Mathematical Formulation","title":"12.2 Potential Temperature","text":"","category":"section"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The potential temperature theta is the temperature an air mass would have if brought adiabatically from pressure p and temperature T to some reference pressure p_0 (typically taken to be mean sea level pressure):","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\nθ = fracTPi\nlabelePotTempPressT\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"where Pi is known as the Exner function","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\n    Pi  = left( fracpp_0 right)^κ quad textwith quad κ = fracR_mc_pm\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Note that the adiabatic exponent kappa takes the effect of  moisture on the effective gas \"constant\" and specific heat capacity of air into account.","category":"page"},{"location":"Formulation/#12.3-Virtual-Temperature-and-Virtual-Potential-Temperature","page":"Mathematical Formulation","title":"12.3 Virtual Temperature and Virtual Potential Temperature","text":"","category":"section"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The virtual or density temperature T_v is the temperature dry air would need to have to have the same density as moist air at the same pressure. Using the ideal gas law prho = R_m T, this implies R_m T  = Rd Tv $, or","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation labelevirtual_temp\nT_v = fracR_mR_d T\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"A virtual potential temperature can be defined analogously:","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\nθ_v = fracR_mR_d θ\nlabelevirtual_pottemp\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"note: Relationship between virtual temperature and 'density temperature'\nSome texts distinguish a \"(condensate-ignoring) virtual temperature\" and a \"density temperature\", and an analogous condensate-ignoring virtual potential temperature and density potential temperature. In those texts, the definition of density temperature incorporates condensate mass but their \"condensate-ignoring virtual temperature\" does not. We always take the mass of any condensate into account in the thermodynamics of moist air, so this distinction is irrelevant here. In other words, because the virtual temperature defined above incorporates the mass of condensate into R_m(q) (and virtual potential temperature is additionally defined in terms of c_pm(q)) via the potential temperature exponent κ), there is no distinction between our virtual temperature and a hypothetical \"density temperature\".","category":"page"},{"location":"Formulation/#12.4-Liquid-Ice-Potential-Temperature","page":"Mathematical Formulation","title":"12.4 Liquid-Ice Potential Temperature","text":"","category":"section"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"When the amount of condensate in air is small and the temperature T is not too small (e.g., [9]), the (linearized) liquid-ice potential temperature,","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequationlabeleLiquidIcePottemp\nθ_li = θ left( 1 - fracL_v0 q_l + L_s 0 q_ic_pm T right)\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"is approximately materially conserved in adiabatic and reversible processes (including phase transitions). It is approximately the potential temperature \\eqref{e:PotTempPressT} an air parcel would have if all liquid water in the parcel were evaporated and all ice sublimated. It is the limit of a more general expression for liquid-ice potential temperature for small q_l and q_i and taking the specific latent heats to be constant (e.g., [10]). The liquid-ice potential temperature \\eqref{e:LiquidIcePottemp} and variants thereof are sometimes used as variables in numerical models. We use it for diagnostic purposes, for comparison with other studies.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The liquid-ice potential temperature theta_li can be inverted for the temperature given pressure p (and hence Pi) and the specific humidities q_t, q_l, and q_i:","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\n    T = Pi θ_li + fracL_v 0 q_l + L_s 0 q_ic_pm\nlabeleTempFromThetaLiGivenP\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Alternatively, when density rho instead of pressure p is given, the temperature can be obtained by Taylor expansion from the liquid-ice potential temperature theta_li,","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\nT approx T_u + fracL_v0 q_l + L_s0q_ic_vm - fracκ2 frac1T_uleft(fracL_v0 q_l + L_s0 q_ic_vmright)^2\nendequation\nlabeleTempFromThetaLiGivenRho","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"where","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\n   T_u =  left( fracrho R_m θ_lip_0 right)^R_mc_vm θ_li\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"is the temperature that would correspond to theta_li in unsaturated conditions, i.e., when the condensate specific humidities q_l and q_i are zero. However, the specific heats c_vm and c_pm and the moist gas constant R_m are evaluated with the given total and condensate specific humidities q_t, q_l, and q_i.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"This expression for temperature as a function of liquid-ice potential temperature is obtained from \\eqref{e:TempFromThetaLiGivenP} by substituting for pressure in the Exner function Pi from the ideal gas law, p=rho R_m T, solving for temperature using a second-order Taylor expansion around T_u for small condensate specific humidities, and using the relation 1-kappa = c_vmc_pm, which follows from c_pm - R_m = c_vm. The relation for temperature \\eqref{e:TempFromThetaLiGivenRho} holds to second order in condensate specific humidities q_l and q_i. That is, the inversion relation \\eqref{e:TempFromThetaLiGivenRho} holds to one higher order of accuracy than the definition of the liquid-ice potential temperature \\eqref{e:LiquidIcePottemp} itself, which is only first-order accurate in the condensate specific humidities q_l and q_i.","category":"page"},{"location":"Formulation/#12.5-Speed-of-Sound","page":"Mathematical Formulation","title":"12.5 Speed of Sound","text":"","category":"section"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The speed of sound in (moist) unstratified air is","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginequation\n c_s = left(fracc_pmc_vm R_m T right)^12\nlabelesoundspeed\nendequation","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"with the appropriate gas constants for moist air. In the presence of stratification, additional terms arise ([11]).","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"note: Physical Interpretation\nThe speed of sound represents the rate at which pressure perturbations propagate through the fluid. The expression accounts for the effect of moisture on the gas constant and specific heat capacities of the air mixture.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"example: Typical Values\nFor dry air at T = 300 K: c_s approx 347 m/s For moist air with q_t = 001 at T = 300 K: c_s  348 m/s","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"tip: Implementation Note\nThe speed of sound is implemented in the soundspeed_air function. It is used in numerical schemes that require the characteristic wave speeds for stability analysis.","category":"page"},{"location":"Formulation/#13.-Summary-and-Implementation-Guidelines","page":"Mathematical Formulation","title":"13. Summary and Implementation Guidelines","text":"","category":"section"},{"location":"Formulation/#13.1-Key-Theoretical-Framework","page":"Mathematical Formulation","title":"13.1 Key Theoretical Framework","text":"","category":"section"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The thermodynamic framework presented here is based on a single fundamental approximation: calorically perfect gases with constant specific heat capacities. This approximation enables:","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Closed-form expressions for all thermodynamic quantities\nConsistent thermodynamics across all model components\nComputational efficiency without numerical integration\nAccuracy within 1-3% for atmospheric conditions","category":"page"},{"location":"Formulation/#13.2-Core-Equations","page":"Mathematical Formulation","title":"13.2 Core Equations","text":"","category":"section"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The most important equations for implementation are:","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Equation of State: p = rho R_m T with R_m(q) = R_d (1 - q_t) + R_v q_v\nInternal Energy: I(T q) = c_vm(q) (T - T_0) + q_v I_v0 - q_i I_i0 - (1 - q_t) R_d T_0\nTemperature Recovery: T = T_0 + (I - q_v I_v0 + q_i I_i0 + (1 - q_t) R_d T_0)  c_vm(q)\nSaturation Vapor Pressure: Closed-form expression \\eqref{e:SatVaporPressure}","category":"page"},{"location":"Formulation/#13.3-Implementation-Strategy","page":"Mathematical Formulation","title":"13.3 Implementation Strategy","text":"","category":"section"},{"location":"Formulation/#**Equilibrium-vs.-Non-Equilibrium-Approaches**","page":"Mathematical Formulation","title":"Equilibrium vs. Non-Equilibrium Approaches","text":"","category":"section"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Equilibrium Approach (Saturation Adjustment):\nPrognostic variables: rho, q_t, I\nDiagnostic variables: T, q_l, q_i\nRequires iterative solution for temperature\nNon-Equilibrium Approach:\nPrognostic variables: rho, q_t, q_l, q_i, I\nDiagnostic variable: T\nClosed-form temperature recovery","category":"page"},{"location":"Formulation/#**Numerical-Considerations**","page":"Mathematical Formulation","title":"Numerical Considerations","text":"","category":"section"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Saturation Adjustment: Use Newton's method with analytical derivatives (a derivative-free secant method is also provided)\nTemperature Recovery: Monotonic function enables robust inversion\nMixed-Phase Conditions: Weighted latent heats ensure consistency\nPerformance: Use rearranged forms to avoid redundant computations","category":"page"},{"location":"Formulation/#13.4-Validation-and-Testing","page":"Mathematical Formulation","title":"13.4 Validation and Testing","text":"","category":"section"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The implementation should be validated against:","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Energy Conservation: Total energy should be conserved even in the presence of moist processes\nTemperature Recovery: Inversion should recover original temperature \nSaturation Consistency: Saturation conditions should be self-consistent\nPhase Transitions: Latent heat release should match energy changes","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"note: Testing Framework\nComprehensive testing is performed using Tested Profiles that cover the full range of atmospheric conditions.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Thermodynamics.jl contains a battery of unit tests that check for consistency of the thermodynamic formulation and convergence of saturation adjustement in a broad range of conditions.","category":"page"},{"location":"Formulation/#13.5-Extensions-and-Limitations","page":"Mathematical Formulation","title":"13.5 Extensions and Limitations","text":"","category":"section"},{"location":"Formulation/#**Current-Limitations**","page":"Mathematical Formulation","title":"Current Limitations","text":"","category":"section"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Constant specific heat capacities (1-3% error)\nNeglected condensate volume","category":"page"},{"location":"Formulation/#**Potential-Extensions**","page":"Mathematical Formulation","title":"Potential Extensions","text":"","category":"section"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Temperature-dependent heat capacities\nNon-ideal gases","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"tip: Implementation Note\nThe Thermodynamics.jl package provides a complete implementation of this framework with comprehensive testing and validation. See the API documentation for detailed function signatures and usage examples.","category":"page"},{"location":"Formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"note: References\nThis formulation is described in [4], building on the theoretical framework described in [1], [2], and [3], with additional developments for mixed-phase conditions from [8].","category":"page"},{"location":"TemperatureProfiles/#Atmospheric-Temperature-Profiles","page":"Temperature Profiles","title":"Atmospheric Temperature Profiles","text":"","category":"section"},{"location":"TemperatureProfiles/#Overview","page":"Temperature Profiles","title":"Overview","text":"","category":"section"},{"location":"TemperatureProfiles/","page":"Temperature Profiles","title":"Temperature Profiles","text":"The Thermodynamics.TemperatureProfiles module provides pre-defined atmospheric temperature profiles for testing and validation purposes, and to be used as reference states in atmosphere models. These profiles represent idealized atmospheric conditions commonly used in climate modeling and thermodynamic testing.","category":"page"},{"location":"TemperatureProfiles/#Available-Profiles","page":"Temperature Profiles","title":"Available Profiles","text":"","category":"section"},{"location":"TemperatureProfiles/","page":"Temperature Profiles","title":"Temperature Profiles","text":"Three temperature profiles are currently available:","category":"page"},{"location":"TemperatureProfiles/","page":"Temperature Profiles","title":"Temperature Profiles","text":"IsothermalProfile: Constant temperature with height\nDecayingTemperatureProfile: Temperature decreases smoothly with height\nDryAdiabaticProfile: Temperature follows dry adiabatic lapse rate","category":"page"},{"location":"TemperatureProfiles/#Usage","page":"Temperature Profiles","title":"Usage","text":"","category":"section"},{"location":"TemperatureProfiles/","page":"Temperature Profiles","title":"Temperature Profiles","text":"Each profile constructor requires two arguments:","category":"page"},{"location":"TemperatureProfiles/","page":"Temperature Profiles","title":"Temperature Profiles","text":"param_set: A thermodynamic parameter set from ClimaParams.jl\nz: Altitude (height above surface)","category":"page"},{"location":"TemperatureProfiles/","page":"Temperature Profiles","title":"Temperature Profiles","text":"The profiles return both temperature and pressure as a function of altitude.","category":"page"},{"location":"TemperatureProfiles/#Isothermal-Profile","page":"Temperature Profiles","title":"Isothermal Profile","text":"","category":"section"},{"location":"TemperatureProfiles/","page":"Temperature Profiles","title":"Temperature Profiles","text":"A constant temperature profile, useful for testing thermodynamic calculations under uniform conditions.","category":"page"},{"location":"TemperatureProfiles/","page":"Temperature Profiles","title":"Temperature Profiles","text":"import Thermodynamics as TD\nimport Plots\nimport ClimaParams as CP\nimport Thermodynamics.Parameters as TP\nFT = Float64\nparam_set = TP.ThermodynamicsParameters(FT)\nz = range(FT(0), stop = FT(2.5e4), length = 50);\n\nisothermal = TD.TemperatureProfiles.IsothermalProfile(param_set, FT);\nargs = isothermal.(Ref(param_set), z);\nT = first.(args);\np = last.(args);\n\np1 = Plots.plot(T, z./10^3, xlabel=\"Temperature [K]\");\np2 = Plots.plot(p./10^3, z./10^3, xlabel=\"Pressure [kPa]\");\nPlots.plot(p1, p2, layout=(1,2), title=\"Isothermal\", ylabel=\"z [km]\");\nPlots.savefig(\"isothermal.svg\");","category":"page"},{"location":"TemperatureProfiles/","page":"Temperature Profiles","title":"Temperature Profiles","text":"(Image: )","category":"page"},{"location":"TemperatureProfiles/#Decaying-Temperature-Profile","page":"Temperature Profiles","title":"Decaying Temperature Profile","text":"","category":"section"},{"location":"TemperatureProfiles/","page":"Temperature Profiles","title":"Temperature Profiles","text":"A profile where temperature decreases smoothly with height, representing typical atmospheric conditions.","category":"page"},{"location":"TemperatureProfiles/","page":"Temperature Profiles","title":"Temperature Profiles","text":"import Thermodynamics as TD\nimport Plots\nimport ClimaParams as CP\nimport Thermodynamics.Parameters as TP\nFT = Float64\nparam_set = TP.ThermodynamicsParameters(FT)\nz = range(FT(0), stop = FT(2.5e4), length = 50);\n\ndecaying = TD.TemperatureProfiles.DecayingTemperatureProfile{FT}(param_set);\nargs = decaying.(Ref(param_set), z);\nT = first.(args);\np = last.(args);\n\np1 = Plots.plot(T, z./10^3, xlabel=\"Temperature [K]\");\np2 = Plots.plot(p./10^3, z./10^3, xlabel=\"Pressure [kPa]\");\nPlots.plot(p1, p2, layout=(1,2), ylabel=\"z [km]\", title=\"Decaying\");\nPlots.savefig(\"decaying.svg\")","category":"page"},{"location":"TemperatureProfiles/","page":"Temperature Profiles","title":"Temperature Profiles","text":"(Image: )","category":"page"},{"location":"TemperatureProfiles/#Dry-Adiabatic-Profile","page":"Temperature Profiles","title":"Dry Adiabatic Profile","text":"","category":"section"},{"location":"TemperatureProfiles/","page":"Temperature Profiles","title":"Temperature Profiles","text":"A profile following the dry adiabatic lapse rate, where potential temperature is constant with height.","category":"page"},{"location":"TemperatureProfiles/","page":"Temperature Profiles","title":"Temperature Profiles","text":"import Thermodynamics as TD\nimport Plots\nimport ClimaParams as CP\nimport Thermodynamics.Parameters as TP\nFT = Float64\nparam_set = TP.ThermodynamicsParameters(FT)\nz = range(FT(0), stop = FT(2.5e4), length = 50);\n\ndry_adiabatic = TD.TemperatureProfiles.DryAdiabaticProfile{FT}(param_set);\nargs = dry_adiabatic.(Ref(param_set), z)\nT = first.(args)\np = last.(args)\nθ_dry = TD.dry_pottemp_given_pressure.(Ref(param_set), T, p)\n\np1 = Plots.plot(T, z./10^3, xlabel=\"Temperature [K]\");\np2 = Plots.plot(p./10^3, z./10^3, xlabel=\"Pressure [kPa]\");\np3 = Plots.plot(θ_dry, z./10^3, xlabel=\"Potential temperature [K]\");\nPlots.plot(p1, p2, p3, layout=(1,3), ylabel=\"z [km]\", title=\"Dry adiabatic\")\nPlots.savefig(\"dry_adiabatic.svg\")","category":"page"},{"location":"TemperatureProfiles/","page":"Temperature Profiles","title":"Temperature Profiles","text":"(Image: )","category":"page"},{"location":"TemperatureProfiles/#Applications","page":"Temperature Profiles","title":"Applications","text":"","category":"section"},{"location":"TemperatureProfiles/","page":"Temperature Profiles","title":"Temperature Profiles","text":"These temperature profiles are useful for:","category":"page"},{"location":"TemperatureProfiles/","page":"Temperature Profiles","title":"Temperature Profiles","text":"Testing thermodynamic calculations under controlled conditions\nBenchmarking performance across different atmospheric conditions\nEducational purposes to understand atmospheric thermodynamics","category":"page"},{"location":"TemperatureProfiles/#Integration-with-Thermodynamic-States","page":"Temperature Profiles","title":"Integration with Thermodynamic States","text":"","category":"section"},{"location":"TemperatureProfiles/","page":"Temperature Profiles","title":"Temperature Profiles","text":"Temperature profiles can be combined with thermodynamic state calculations:","category":"page"},{"location":"TemperatureProfiles/","page":"Temperature Profiles","title":"Temperature Profiles","text":"# Example: Create thermodynamic states along a temperature profile\nz = range(0, 25e3, length=100)  # 0 to 25 km\nprofile = TD.TemperatureProfiles.DryAdiabaticProfile{Float64}(param_set)\n\n# Get temperature and pressure at each altitude\nT_pairs = profile.(Ref(param_set), z)\nT = first.(T_pairs)\np = last.(T_pairs)\n\n# Create thermodynamic states\nts_states = [TD.PhaseDry_pT(param_set, p[i], T[i]) for i in 1:length(z)]","category":"page"},{"location":"TemperatureProfiles/#Extending-the-Module","page":"Temperature Profiles","title":"Extending the Module","text":"","category":"section"},{"location":"TemperatureProfiles/","page":"Temperature Profiles","title":"Temperature Profiles","text":"Additional temperature profiles can be added by:","category":"page"},{"location":"TemperatureProfiles/","page":"Temperature Profiles","title":"Temperature Profiles","text":"Creating a struct containing the parameters needed for the profile\nImplementing a functor that takes (param_set, z) and returns (T, p)","category":"page"},{"location":"TemperatureProfiles/","page":"Temperature Profiles","title":"Temperature Profiles","text":"Example structure:","category":"page"},{"location":"TemperatureProfiles/","page":"Temperature Profiles","title":"Temperature Profiles","text":"struct CustomProfile{FT} <: TemperatureProfile{FT}\n    # Profile parameters\nend\n\nfunction (profile::CustomProfile{FT})(param_set, z) where {FT}\n    # Calculate T and p based on z\n    return (T, p)\nend","category":"page"},{"location":"TemperatureProfiles/","page":"Temperature Profiles","title":"Temperature Profiles","text":"note: Implementation Details\nAll profiles implement the TemperatureProfile interface and return temperature-pressure pairs as a function of altitude. The profiles are designed to be composable with other thermodynamic calculations.","category":"page"},{"location":"HowToGuide/#How-To-Guide","page":"How-To Guide","title":"How-To Guide","text":"","category":"section"},{"location":"HowToGuide/","page":"How-To Guide","title":"How-To Guide","text":"This guide covers the essential aspects of using Thermodynamics.jl, from basic usage to advanced patterns.","category":"page"},{"location":"HowToGuide/#Table-of-Contents","page":"How-To Guide","title":"Table of Contents","text":"","category":"section"},{"location":"HowToGuide/","page":"How-To Guide","title":"How-To Guide","text":"Basic Setup\nThermodynamic States\nCommon Usage Patterns\nPerformance Considerations\nIntegration with Models\nExtending the Package","category":"page"},{"location":"HowToGuide/#Basic-Setup","page":"How-To Guide","title":"Basic Setup","text":"","category":"section"},{"location":"HowToGuide/#Installation-and-Import","page":"How-To Guide","title":"Installation and Import","text":"","category":"section"},{"location":"HowToGuide/","page":"How-To Guide","title":"How-To Guide","text":"using Pkg\nPkg.add(\"Thermodynamics\")\nPkg.add(\"ClimaParams\")\n\nimport Thermodynamics as TD\nusing ClimaParams","category":"page"},{"location":"HowToGuide/#Creating-Parameters","page":"How-To Guide","title":"Creating Parameters","text":"","category":"section"},{"location":"HowToGuide/","page":"How-To Guide","title":"How-To Guide","text":"# Create thermodynamic parameters for Float64 precision\nparams = TD.Parameters.ThermodynamicsParameters(Float64)\n\n# For Float32 precision (useful for GPU computations)\nparams_f32 = TD.Parameters.ThermodynamicsParameters(Float32)","category":"page"},{"location":"HowToGuide/#Thermodynamic-States","page":"How-To Guide","title":"Thermodynamic States","text":"","category":"section"},{"location":"HowToGuide/","page":"How-To Guide","title":"How-To Guide","text":"Thermodynamics.jl uses a state-based approach where you create a thermodynamic state from independent variables, then compute any other thermodynamic property from that state.","category":"page"},{"location":"HowToGuide/","page":"How-To Guide","title":"How-To Guide","text":"tip: Temperature Profiles\nFor testing and validation, you can use pre-defined atmospheric temperature profiles. See Temperature Profiles for available profiles and usage examples.","category":"page"},{"location":"HowToGuide/#Available-State-Constructors","page":"How-To Guide","title":"Available State Constructors","text":"","category":"section"},{"location":"HowToGuide/#**Equilibrium-States**-(Saturation-Adjustment)","page":"How-To Guide","title":"Equilibrium States (Saturation Adjustment)","text":"","category":"section"},{"location":"HowToGuide/","page":"How-To Guide","title":"How-To Guide","text":"import Thermodynamics as TD\nusing ClimaParams\n\nparams = TD.Parameters.ThermodynamicsParameters(Float64)\n\n# From density, internal energy, and total humidity\nρ = 1.0\ne_int = -7.0e4\nq_tot = 0.01\nts = TD.PhaseEquil_ρeq(params, ρ, e_int, q_tot)\n\n# From density, potential temperature, and total humidity  \nθ_liq_ice = 300.0\nts = TD.PhaseEquil_ρθq(params, ρ, θ_liq_ice, q_tot)\n\n# From pressure, internal energy, and total humidity\np = 1.0e5\nts = TD.PhaseEquil_peq(params, p, e_int, q_tot)","category":"page"},{"location":"HowToGuide/#**Non-Equilibrium-States**-(Explicit-Phase-Partitioning)","page":"How-To Guide","title":"Non-Equilibrium States (Explicit Phase Partitioning)","text":"","category":"section"},{"location":"HowToGuide/","page":"How-To Guide","title":"How-To Guide","text":"import Thermodynamics as TD\nusing ClimaParams\n\nparams = TD.Parameters.ThermodynamicsParameters(Float64)\n\n# With explicit liquid and ice partitioning\nq_tot = 0.01\nq_liq = 0.005\nq_ice = 0.0003\nts = TD.PhaseNonEquil(params, e_int, ρ, TD.PhasePartition(q_tot, q_liq, q_ice))\n\n# Or create phase partition separately\nq = TD.PhasePartition(q_tot, q_liq, q_ice)\nts = TD.PhaseNonEquil(params, e_int, ρ, q)","category":"page"},{"location":"HowToGuide/#**Dry-Air-States**","page":"How-To Guide","title":"Dry Air States","text":"","category":"section"},{"location":"HowToGuide/","page":"How-To Guide","title":"How-To Guide","text":"import Thermodynamics as TD\nusing ClimaParams\n\nparams = TD.Parameters.ThermodynamicsParameters(Float64)\n\n# Dry air from pressure and temperature\np = 1.0e5\nT = 300.0\nts = TD.PhaseDry_pT(params, p, T)","category":"page"},{"location":"HowToGuide/#Extracting-Properties-from-States","page":"How-To Guide","title":"Extracting Properties from States","text":"","category":"section"},{"location":"HowToGuide/","page":"How-To Guide","title":"How-To Guide","text":"import Thermodynamics as TD\nusing ClimaParams\n\nparams = TD.Parameters.ThermodynamicsParameters(Float64)\n\n# Create a thermodynamic state for demonstration\nρ = 1.0\ne_int = -7.0e4\nq_tot = 0.01\nts = TD.PhaseEquil_ρeq(params, ρ, e_int, q_tot)\n\n# Basic thermodynamic properties\nT = TD.air_temperature(params, ts)      # Temperature\np = TD.air_pressure(params, ts)         # Pressure\nρ = TD.air_density(params, ts)          # Density\n\n# Phase partitioning\nq = TD.PhasePartition(params, ts)       # Complete phase partition\nq_tot = TD.total_specific_humidity(params, ts)  # Total humidity\nq_liq = TD.liquid_specific_humidity(params, ts) # Liquid humidity\nq_ice = TD.ice_specific_humidity(params, ts)    # Ice humidity\nq_vap = TD.vapor_specific_humidity(params, ts)  # Vapor humidity\n\n# Alternative: Extract directly from PhasePartition object\nq = TD.PhasePartition(params, ts)\nq_tot = q.tot  # Total specific humidity\nq_liq = q.liq  # Liquid specific humidity  \nq_ice = q.ice  # Ice specific humidity\nq_vap = q.tot - q.liq - q.ice  # Vapor specific humidity (computed)\n\n# Energy quantities\ne_int = TD.internal_energy(params, ts)  # Internal energy","category":"page"},{"location":"HowToGuide/#Direct-Function-Usage","page":"How-To Guide","title":"Direct Function Usage","text":"","category":"section"},{"location":"HowToGuide/","page":"How-To Guide","title":"How-To Guide","text":"Thermodynamic functions can also be used directly without creating state objects, which can be more efficient because it avoids storing the state in memory:","category":"page"},{"location":"HowToGuide/","page":"How-To Guide","title":"How-To Guide","text":"import Thermodynamics as TD\nusing ClimaParams\n\nparams = TD.Parameters.ThermodynamicsParameters(Float64)\n\n# Direct phase partitioning (for non-equilibrium)\nq_tot = 0.01\nq_liq = 0.005\nq_ice = 0.0003\nq = TD.PhasePartition(q_tot, q_liq, q_ice)         # Create phase partition directly\n\n# Direct temperature calculations\ne_int = -7.0e4\nT = TD.air_temperature(params, e_int, q)           # From internal energy and humidity\nh = -6.0e4\nT = TD.air_temperature_from_enthalpy(params, h, q) # From enthalpy and humidity\n\n# Direct pressure calculations  \nρ = 1.0\np = TD.air_pressure(params, ρ, T, q)               # From density, temperature, humidity\n\n# Direct humidity calculations\nq_vap_sat = TD.q_vap_saturation(params, T, ρ, TD.PhaseEquil{Float64})  # Saturation vapor humidity\np_v_sat = TD.saturation_vapor_pressure(params, T, TD.Liquid())         # Saturation vapor pressure over liquid\n\n# Direct energy calculations\ne_int = TD.internal_energy(params, T, q)          # From temperature and humidity\nh = TD.specific_enthalpy(params, T, q)            # From temperature and humidity\n","category":"page"},{"location":"HowToGuide/","page":"How-To Guide","title":"How-To Guide","text":"tip: When to Use Each Approach\nState-based approach: Use when you need multiple properties from the same thermodynamic state and storing them is more efficient than re-computing them each time (e.g., because of iterative saturation adjustment)\nDirect functions: Use for calculations when you already have the required variables or re-computing them is more efficient than storing them\nSaturation adjustment: State constructors automatically handle saturation adjustment","category":"page"},{"location":"HowToGuide/#Performance-Considerations","page":"How-To Guide","title":"Performance Considerations","text":"","category":"section"},{"location":"HowToGuide/#**Type-Stability**","page":"How-To Guide","title":"Type Stability","text":"","category":"section"},{"location":"HowToGuide/","page":"How-To Guide","title":"How-To Guide","text":"import Thermodynamics as TD\nusing ClimaParams\n\n# Good: Type-stable operations\nparams = TD.Parameters.ThermodynamicsParameters(Float64)\nρ = 1.0\ne_int = -7.0e4\nq_tot = 0.01\nts = TD.PhaseEquil_ρeq(params, ρ, e_int, q_tot)\nT = TD.air_temperature(params, ts)\n\n# Avoid: Mixed precision (can cause type instability)\nparams_f64 = TD.Parameters.ThermodynamicsParameters(Float64)\nts = TD.PhaseEquil_ρeq(params_f64, Float32(ρ), Float32(e_int), Float32(q_tot))","category":"page"},{"location":"HowToGuide/#**Vectorized-Operations**","page":"How-To Guide","title":"Vectorized Operations","text":"","category":"section"},{"location":"HowToGuide/","page":"How-To Guide","title":"How-To Guide","text":"import Thermodynamics as TD\nusing ClimaParams\n\nparams = TD.Parameters.ThermodynamicsParameters(Float64)\n\n# For arrays of thermodynamic states\nρ_array = [1.0, 1.1, 1.2]\ne_int_array = [2.0e5, 2.1e5, 2.2e5]\nq_tot_array = [0.01, 0.012, 0.008]\n\n# State-based approach \nts_array = [TD.PhaseEquil_ρeq(params, ρ, e_int, q_tot) \n            for (ρ, e_int, q_tot) in zip(ρ_array, e_int_array, q_tot_array)]\nT_array = [TD.air_temperature(params, ts) for ts in ts_array]\n\n# Direct function approach \nT_array = [TD.air_temperature(params, e_int, TD.PhasePartition(q_tot)) \n           for (e_int, q_tot) in zip(e_int_array, q_tot_array)]","category":"page"},{"location":"HowToGuide/#**GPU-Compatibility**","page":"How-To Guide","title":"GPU Compatibility","text":"","category":"section"},{"location":"HowToGuide/","page":"How-To Guide","title":"How-To Guide","text":"import Thermodynamics as TD\nusing ClimaParams\n\n# Use Float32 for GPU computations\nFT = Float32\nparams_gpu = TD.Parameters.ThermodynamicsParameters(FT)\n\n# Ensure all inputs are Float32\nρ = FT(1.0f0)\ne_int = FT(-7.0e4f0)\nq_tot = FT(0.01f0)\nts_gpu = TD.PhaseEquil_ρeq(params_gpu, ρ, e_int, q_tot)","category":"page"},{"location":"HowToGuide/#Integration-with-Models","page":"How-To Guide","title":"Integration with Models","text":"","category":"section"},{"location":"HowToGuide/#**Dynamical-Core-Integration**","page":"How-To Guide","title":"Dynamical Core Integration","text":"","category":"section"},{"location":"HowToGuide/","page":"How-To Guide","title":"How-To Guide","text":"import Thermodynamics as TD\nusing ClimaParams\n\nparams = TD.Parameters.ThermodynamicsParameters(Float64)\n\ngrav = 9.81  # m/s²\ncv_d = 718.0  # J/(kg K)\n\n# Initialize prognostic variables\nρ = 1.0\ne_tot = cv_d * 20.0\nq_tot = 0.01\nq_liq = q_tot / 100.0\nq_ice = q_tot / 250.0\nu, v, w = 10.0, 5.0, 1.0\n\n# Timestepping loop\nfor timestep in 1:10\n    # Advance prognostic variables (simplified example)\n    ρ += 0.01\n    e_tot += cv_d * 0.5\n    q_tot += 0.001\n    u += FT(0.1)\n    v += FT(-0.1)\n    w += FT(0.01)\n    \n    # Extract internal energy\n    e_kin = 0.5 * (u^2 + v^2 + w^2)\n    z = 1000.0\n    e_pot = grav * z\n    e_int = e_tot - e_kin - e_pot\n    \n    # Saturation adjustment (state-based approach)\n    ts = TD.PhaseEquil_ρeq(params, ρ, e_int, q_tot)\n    T = TD.air_temperature(params, ts)\n    q = TD.PhasePartition(params, ts)\n    \n    # Or direct function approach (need to predict liquid and ice separately)\n    q_liq += 0.0001\n    q_ice -= 0.0001\n    T = TD.air_temperature(params, e_int, TD.PhasePartition(q_tot, q_liq, q_ice))  # No saturation adjustment, \n    \n    # Use temperature in physics (radiation, etc.)\n    # compute_physics!(T, q)  # Placeholder for physics calculations\nend","category":"page"},{"location":"HowToGuide/#Extending-the-Package","page":"How-To Guide","title":"Extending the Package","text":"","category":"section"},{"location":"HowToGuide/#**Adding-New-Thermodynamic-State-Constructors**","page":"How-To Guide","title":"Adding New Thermodynamic State Constructors","text":"","category":"section"},{"location":"HowToGuide/","page":"How-To Guide","title":"How-To Guide","text":"If Thermodynamics.jl doesn't have a constructor for your specific use case, you can implement one in src/states.jl. The constructor must translate your inputs into one of the fundamental state types:","category":"page"},{"location":"HowToGuide/","page":"How-To Guide","title":"How-To Guide","text":"import Thermodynamics as TD\nusing ClimaParams\n\n# Example: Constructor from pressure, temperature, and humidity\nfunction PhaseEquil_pTq(param_set::APS, p::FT, T::FT, q_tot::FT) where {FT}\n    # Compute density from equation of state\n    ρ = TD.air_density(param_set, T, p, TD.PhasePartition(q_tot))\n    \n    # Compute internal energy\n    e_int = TD.internal_energy(param_set, T, TD.PhasePartition(q_tot))\n    \n    # Return equilibrium state\n    return TD.PhaseEquil_ρeq(param_set, ρ, e_int, q_tot)\nend","category":"page"},{"location":"HowToGuide/#**Available-Base-State-Types**","page":"How-To Guide","title":"Available Base State Types","text":"","category":"section"},{"location":"HowToGuide/","page":"How-To Guide","title":"How-To Guide","text":"PhaseDry: Dry air state (2 independent variables)\nPhaseEquil: Moist air in thermodynamic equilibrium (3 independent variables)\nPhaseNonEquil: Moist air in non-equilibrium (3+ independent variables)","category":"page"},{"location":"HowToGuide/#**Best-Practices-for-Extensions**","page":"How-To Guide","title":"Best Practices for Extensions","text":"","category":"section"},{"location":"HowToGuide/","page":"How-To Guide","title":"How-To Guide","text":"Maintain type stability: Use consistent floating-point types\nFollow naming conventions: Use descriptive names with parameter types\nAdd tests: Include unit tests for new constructors using Tested Profiles\nDocument thoroughly: Add docstrings explaining the constructor's purpose","category":"page"},{"location":"HowToGuide/#Common-Pitfalls-and-Solutions","page":"How-To Guide","title":"Common Pitfalls and Solutions","text":"","category":"section"},{"location":"HowToGuide/#**Pitfall-1:-Incorrect-State-Type**","page":"How-To Guide","title":"Pitfall 1: Incorrect State Type","text":"","category":"section"},{"location":"HowToGuide/","page":"How-To Guide","title":"How-To Guide","text":"import Thermodynamics as TD\nusing ClimaParams\n\nparams = TD.Parameters.ThermodynamicsParameters(Float64)\n\n# Wrong: Using equilibrium constructor for non-equilibrium conditions\nρ = 1.0\ne_int = -7.0e4\nq_tot = 0.01\nq_liq = 0.005\nq_ice = 0.0003\nts = TD.PhaseEquil_ρeq(params, ρ, e_int, q_tot)  # Assumes saturation adjustment\n\n# Right: Use non-equilibrium constructor when you have explicit partitionin\nq = TD.PhasePartition(q_tot, q_liq, q_ice)\nts = TD.PhaseNonEquil(params, e_int, ρ, q)","category":"page"},{"location":"HowToGuide/#**Pitfall-2:-Mixed-Precision**","page":"How-To Guide","title":"Pitfall 2: Mixed Precision","text":"","category":"section"},{"location":"HowToGuide/","page":"How-To Guide","title":"How-To Guide","text":"import Thermodynamics as TD\nusing ClimaParams\n\n# Wrong: Mixing Float32 and Float64\nparams = TD.Parameters.ThermodynamicsParameters(Float64)\nρ = 1.0\ne_int = -7.0e4\nq_tot = 0.01\nts = TD.PhaseEquil_ρeq(params, Float32(ρ), Float32(e_int), Float32(q_tot))\n\n# Right: Consistent precision\nparams = TD.Parameters.ThermodynamicsParameters(Float32)\nts = TD.PhaseEquil_ρeq(params, Float32(ρ), Float32(e_int), Float32(q_tot))","category":"page"},{"location":"HowToGuide/#Next-Steps","page":"How-To Guide","title":"Next Steps","text":"","category":"section"},{"location":"HowToGuide/","page":"How-To Guide","title":"How-To Guide","text":"Explore the API Reference for complete function documentation\nRead the Mathematical Formulation for theoretical background\nCheck Saturation Adjustment Convergence for numerical method testing\nExplore the API Reference for complete function documentation","category":"page"},{"location":"HowToGuide/","page":"How-To Guide","title":"How-To Guide","text":"","category":"page"},{"location":"HowToGuide/","page":"How-To Guide","title":"How-To Guide","text":"tip: Getting Help\nFor specific questions or issues, check the documentation or open an issue on the GitHub repository.","category":"page"},{"location":"#Thermodynamics.jl","page":"Home","title":"Thermodynamics.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A comprehensive Julia package for atmospheric thermodynamics, providing consistent and accurate thermodynamic functions for moist air including all phases of water (vapor, liquid, and ice).","category":"page"},{"location":"#Table-of-Contents","page":"Home","title":"Table of Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Quick Start\nDocumentation Overview\nKey Features\nCore Design Principles\nGetting Started\nUsage Examples\nIntegration with Climate Models","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"Thermodynamics\")\nPkg.add(\"ClimaParams\")","category":"page"},{"location":"#Basic-Usage","page":"Home","title":"Basic Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"import Thermodynamics as TD\nusing ClimaParams\n\n# Create thermodynamic parameters\nparams = TD.Parameters.ThermodynamicsParameters(Float64)\n\n# Create a thermodynamic state\nρ = 1.0\ne_int = -7.e4\nq_tot = 0.01\nts = TD.PhaseEquil_ρeq(params, ρ, e_int, q_tot)\n\n# Compute thermodynamic properties from state\nT = TD.air_temperature(params, ts)\np = TD.air_pressure(params, ts)\nq = TD.PhasePartition(params, ts)\n\n# Or compute directly from independent variables\nq_liq = 0.005\nq_ice = 0.0004\nq = TD.PhasePartition(q_tot, q_liq, q_ice)\nT = TD.air_temperature(params, e_int, q)  # From internal energy and humidity\np = TD.air_pressure(params, ρ, T, q)      # From density, temperature, and humidity","category":"page"},{"location":"#Documentation-Overview","page":"Home","title":"Documentation Overview","text":"","category":"section"},{"location":"#**Core-Documentation**","page":"Home","title":"📚 Core Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Mathematical Formulation - Complete theoretical framework and equations\nFundamental assumptions and working fluid definition\nEquation of state and heat capacities\nInternal energies, enthalpies, and latent heats\nSaturation vapor pressure and specific humidity\nSaturation adjustment algorithms\nAuxiliary thermodynamic functions\nAPI Reference - Complete function documentation\nThermodynamic state constructors\nEquation of state functions\nEnergy and temperature functions\nSaturation and phase equilibrium functions\nAuxiliary diagnostic functions","category":"page"},{"location":"#**User-Guides**","page":"Home","title":"🛠️ User Guides","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"How-To Guide - Practical usage examples and patterns\nInstallation and setup\nCommon use cases and workflows","category":"page"},{"location":"#**Advanced-Topics**","page":"Home","title":"🔬 Advanced Topics","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Temperature Profiles - Pre-defined atmospheric profiles to be used as reference states in atmosphere models and for testing\nTested Profiles - Thermodynamic profiles used for testing of the package\nClausius-Clapeyron Validation - Validation of analytical derivatives","category":"page"},{"location":"#**Developer-Resources**","page":"Home","title":"👨‍💻 Developer Resources","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Saturation Adjustment Convergence - Convergence testing for numerical methods","category":"page"},{"location":"#**Published-References-and-Background**","page":"Home","title":"📚 Published References and Background","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"References - Bibliography of theoretical foundations","category":"page"},{"location":"#Key-Features","page":"Home","title":"Key Features","text":"","category":"section"},{"location":"#**Comprehensive-Thermodynamics**","page":"Home","title":"🌟 Comprehensive Thermodynamics","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Complete moist air thermodynamics including all water phases (vapor, liquid, ice)\nConsistent formulation for use across all model components\nPrecipitation included in the atmospheric working fluid for full thermodynamic consistency\nCalorically perfect gas approximation enabling closed-form (Rankine-Kirchhoff) expressions for saturation vapor pressure","category":"page"},{"location":"#**High-Performance**","page":"Home","title":"⚡ High Performance","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Type-stable implementations for optimal Julia performance\nGPU-compatible implementations\nDifferentiable implementation compatible with Julia's automatic differentiation capabilities\nEfficient saturation adjustment with Newton's method and analytical derivatives for equilibrium thermodynamics formulations","category":"page"},{"location":"#**Flexible-Design**","page":"Home","title":"🔧 Flexible Design","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Multiple thermodynamic state constructors for different use cases\nDirect function access for efficient single calculations\nEquilibrium and non-equilibrium phase partitioning\nExtensible parameter system for different planetary atmospheres\nComprehensive testing and validation suite","category":"page"},{"location":"#Core-Design-Principles","page":"Home","title":"Core Design Principles","text":"","category":"section"},{"location":"#**Thermodynamic-State-Abstraction**","page":"Home","title":"Thermodynamic State Abstraction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"As an option, the package leverages the fundamental principle that:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Given two (or more) independent intrinsic thermodynamic properties, we can establish a thermodynamic state\nGiven a thermodynamic state, we can compute any thermodynamic property","category":"page"},{"location":"","page":"Home","title":"Home","text":"This abstraction provides a clean, consistent interface for all thermodynamic calculations.  However, thermodynamic calculations are also accessible via direct functions. ","category":"page"},{"location":"#**Working-Fluid-Definition**","page":"Home","title":"Working Fluid Definition","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The working fluid includes moist air with precipitation, ensuring:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Mass and energy conservation across all phases\nThermodynamic consistency throughout the system\nUnified treatment of cloud and precipitation condensate","category":"page"},{"location":"#**Consistent-Formulation**","page":"Home","title":"Consistent Formulation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"All thermodynamic quantities are derived from a single fundamental approximation:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Calorically perfect gases with constant specific heat capacities\nClosed-form expressions for all thermodynamic quantities\nAccuracy within 1-3% for atmospheric conditions\nComputational efficiency without numerical integration or additional ad-hoc approximations","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"#Installation-2","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"Thermodynamics\")\nPkg.add(\"ClimaParams\")","category":"page"},{"location":"#Usage-Examples","page":"Home","title":"Usage Examples","text":"","category":"section"},{"location":"#**Equilibrium-Thermodynamics-(Saturation-Adjustment)**","page":"Home","title":"Equilibrium Thermodynamics (Saturation Adjustment)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"import Thermodynamics as TD \nusing ClimaParams\n\nparams = TD.Parameters.ThermodynamicsParameters(Float64)\n\n# Create state with internal energy, density, and total humidity\nρ = 1.0\ne_int = -7.0e4\nq_tot = 0.01\nts = TD.PhaseEquil_ρeq(params, ρ, e_int, q_tot)\n\n# Temperature and phase partitioning computed automatically\nT = TD.air_temperature(params, ts)\nq = TD.PhasePartition(params, ts)","category":"page"},{"location":"#**Non-Equilibrium-Thermodynamics**","page":"Home","title":"Non-Equilibrium Thermodynamics","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"import Thermodynamics as TD\nusing ClimaParams\n\nparams = TD.Parameters.ThermodynamicsParameters(Float64)\n\n# Explicit phase partitioning\nq_tot = 0.01\nq_liq = 0.005\nq_ice = 0.0003\nq = TD.PhasePartition(q_tot, q_liq, q_ice)\nρ = 1.0\ne_int = -7.0e4\nts = TD.PhaseNonEquil(params, e_int, ρ, q)\n\n# Temperature computation from thermodynamic state\nT = TD.air_temperature(params, ts)\n\n# Alternative direct computation, avoiding the thermodynamic state\nT = TD.air_temperature(params, e_int, q)","category":"page"},{"location":"#**Saturation-Calculations**","page":"Home","title":"Saturation Calculations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"import Thermodynamics as TD\nusing ClimaParams\n\nparams = TD.Parameters.ThermodynamicsParameters(Float64)\n\n# Create a thermodynamic state for testing\nρ = 1.0\ne_int = -7.0e4\nq_tot = 0.01\nts = TD.PhaseEquil_ρeq(params, ρ, e_int, q_tot)\nT = TD.air_temperature(params, ts)\np = TD.air_pressure(params, ts)\n\n# Saturation vapor pressure\np_v_sat = TD.saturation_vapor_pressure(params, T, TD.Liquid())\n\n# Saturation specific humidity\nq_v_sat = TD.q_vap_saturation(params, T, ρ, typeof(ts))\n\n# Relative humidity\nRH = TD.relative_humidity(params, ts)\n\n# Alternative, avoiding the thermodynamic state\nq_liq = 0.005\nq_ice = 0.0003\nRH_alt = TD.relative_humidity(params, T, p, typeof(ts), TD.PhasePartition(q_tot, q_liq, q_ice))","category":"page"},{"location":"#Integration-with-Climate-Models","page":"Home","title":"Integration with Climate Models","text":"","category":"section"},{"location":"#**Dynamical-Core-Integration**","page":"Home","title":"Dynamical Core Integration","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package is designed for seamless integration with atmospheric dynamical cores, schematically as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# Initialize\nimport Thermodynamics as TD\nusing ClimaParams\n\nFT = Float64\nparams = TD.Parameters.ThermodynamicsParameters(FT)\n\n# Define physical constants and initial conditions\ngrav = 9.81  # m/s²\ncv_d = 718.0  # J/(kg K)\nz = 1000.0   # m\ngeopotential = grav * z\nq_tot = 0.01\nρ = 1.0\nT = 300.0\n\n# Initial velocity components\nu, v, w = 10.0, 5.0, 1.0\ne_kin = 0.5 * (u^2 + v^2 + w^2)\ne_tot = TD.total_energy(params, e_kin, geopotential, T, TD.PhasePartition(q_tot))\n\n# Timestepping loop (simplified example)\nfor timestep in 1:10\n    # Advance dynamical variables (simplified)\n    u += FT(0.1)\n    v += FT(-0.1)\n    w += FT(0.01)\n    e_tot += cv_d * FT(1)\n    \n    # Compute internal energy\n    e_kin = 0.5 * (u^2 + v^2 + w^2)\n    e_int = e_tot - e_kin - geopotential\n    \n    # Saturation adjustment\n    ts = TD.PhaseEquil_ρeq(params, ρ, e_int, q_tot)\n    T = TD.air_temperature(params, ts)\n    q = TD.PhasePartition(params, ts)\n    p = TD.air_pressure(params, ts)\nend","category":"page"},{"location":"#Next-Steps","page":"Home","title":"Next Steps","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Read the Mathematical Formulation for theoretical background\nExplore the API Reference for complete function documentation\nFollow the How-To Guide for practical examples\nCheck Saturation Adjustment Convergence for numerical method testing","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Citation\nIf you use Thermodynamics.jl in your research, please cite the relevant papers listed in the References section.","category":"page"},{"location":"","page":"Home","title":"Home","text":"tip: Getting Help\nFor questions and issues, please check the documentation or open an issue on the GitHub repository.","category":"page"},{"location":"API/#Thermodynamics","page":"API Reference","title":"Thermodynamics","text":"","category":"section"},{"location":"API/#Thermodynamics.Thermodynamics","page":"API Reference","title":"Thermodynamics.Thermodynamics","text":"Thermodynamics\n\nMoist thermodynamic functions for atmospheric modeling, including air pressure, latent heats, saturation vapor pressures, and saturation specific humidities.\n\nParameter Sets\n\nMany functions defined in this module rely on ClimaParams.jl. ClimaParams.jl defines several functions (e.g., many planet parameters). For example, to compute the mole-mass ratio of  dry air and water vapor:\n\nimport ClimaParams as CP\nimport Thermodynamics.Parameters as TP\nFT = Float64\nparam_set = TP.ThermodynamicsParameters(FT)\n_Rv_over_Rd = TP.Rv_over_Rd(param_set)\n\nBecause these parameters are widely used throughout this module, param_set is an argument for many Thermodynamics functions.\n\nSaturation adjustment\n\nSaturation adjustment functions accept:\n\nsat_adjust_method: numerical method type (from RootSolvers.jl)\nA function returning the numerical method instance (e.g.,   sa_numerical_method_ρpq returns an instance of the numerical   method for the ρ-p-q_tot formulation)\n\nSupported methods in RootSolvers.jl:\n\nNewtonsMethod: Newton method with analytic gradients\nNewtonsMethodAD: Newton method with autodiff\nSecantMethod: Secant method\nRegulaFalsiMethod: Regula-Falsi method\n\n\n\n\n\n","category":"module"},{"location":"API/#Thermodynamics-Parameters","page":"API Reference","title":"Thermodynamics Parameters","text":"","category":"section"},{"location":"API/#Thermodynamics.Parameters.ThermodynamicsParameters","page":"API Reference","title":"Thermodynamics.Parameters.ThermodynamicsParameters","text":"ThermodynamicsParameters\n\nParameters for Thermodynamics.jl.\n\nExample\n\nimport ClimaParams as CP\nimport Thermodynamics.Parameters as TP\n\nFT = Float64;\nparam_set = TP.ThermodynamicsParameters(FT)\n\n# Alternatively:\ntoml_dict = CP.create_toml_dict(FT)\nparam_set = TP.ThermodynamicsParameters(toml_dict)\n\n\n\n\n\n\n","category":"type"},{"location":"API/#Thermodynamic-State-Constructors","page":"API Reference","title":"Thermodynamic State Constructors","text":"","category":"section"},{"location":"API/#Thermodynamics.PhasePartition","page":"API Reference","title":"Thermodynamics.PhasePartition","text":"PhasePartition\n\nRepresents the mass fractions of the moist air mixture (the partitioning of water substance  between vapor, liquid, and ice phases).\n\nThe total specific humidity q_tot represents the total water content, while q_liq and q_ice represent the liquid and ice specific humidities, respectively. The vapor specific humidity is computed as q_vap = q_tot - q_liq - q_ice.\n\nConstructors\n\nPhasePartition(q_tot::Real[, q_liq::Real[, q_ice::Real]])\nPhasePartition(param_set::APS, ts::ThermodynamicState)\n\nSee also PhasePartition_equil\n\nFields\n\ntot: total specific humidity\nliq: liquid water specific humidity (default: 0)\nice: ice specific humidity (default: 0)\n\n\n\n\n\n","category":"type"},{"location":"API/#Thermodynamics.ThermodynamicState","page":"API Reference","title":"Thermodynamics.ThermodynamicState","text":"ThermodynamicState{FT}\n\nA thermodynamic state representing the complete thermodynamic properties of a moist air parcel. All ThermodynamicState subtypes provide access to functions to compute all other thermodynamic properties through the equation of state and thermodynamic relations.\n\nThe state can be initialized using various thermodynamic formulations (via its subtypes), each representing different assumptions about phase equilibrium and the specific variables used to define the state.\n\n\n\n\n\n","category":"type"},{"location":"API/#Thermodynamics.PhaseDry","page":"API Reference","title":"Thermodynamics.PhaseDry","text":"PhaseDry{FT} <: AbstractPhaseDry\n\nA dry thermodynamic state representing air with no water vapor (q_tot = 0). This state assumes the air parcel contains only dry air components.\n\nConstructors\n\nPhaseDry(param_set, e_int, ρ)\n\nFields\n\ne_int: internal energy\nρ: density of dry air\n\n\n\n\n\n","category":"type"},{"location":"API/#Thermodynamics.PhaseDry_ρe","page":"API Reference","title":"Thermodynamics.PhaseDry_ρe","text":"PhaseDry_ρe(param_set, ρ, e_int)\n\nConstructs a PhaseDry thermodynamic state from density and internal energy, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nρ air density\ne_int specific internal energy\n\nThis constructor directly stores the provided density and internal energy without any additional computations, assuming the air is completely dry.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseDry_pT","page":"API Reference","title":"Thermodynamics.PhaseDry_pT","text":"PhaseDry_pT(param_set, p, T)\n\nConstructs a PhaseDry thermodynamic state from pressure and temperature, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\nT temperature\n\nThe internal energy is computed from the temperature using the dry air equation of state, and the density is computed from the ideal gas law using the pressure and temperature.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseDry_pθ","page":"API Reference","title":"Thermodynamics.PhaseDry_pθ","text":"PhaseDry_pθ(param_set, p, θ_dry)\n\nConstructs a PhaseDry thermodynamic state from pressure and dry potential temperature, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\nθ_dry dry potential temperature\n\nThe temperature is computed from the pressure and potential temperature using the Exner function, and the density is computed from the ideal gas law using the pressure and temperature.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseDry_pe","page":"API Reference","title":"Thermodynamics.PhaseDry_pe","text":"PhaseDry_pe(param_set, p, e_int)\n\nConstructs a PhaseDry thermodynamic state from pressure and internal energy, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\ne_int specific internal energy\n\nThe temperature is computed from the internal energy using the dry air equation of state, and the density is computed from the ideal gas law using the pressure and temperature.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseDry_ph","page":"API Reference","title":"Thermodynamics.PhaseDry_ph","text":" PhaseDry_ph(param_set, p, h)\n\nConstructs a PhaseDry thermodynamic state from pressure and specific enthalpy, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\nh specific enthalpy\n\nThe temperature is computed from the specific enthalpy using the dry air equation of state, and the density is computed from the ideal gas law using the pressure and temperature.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseDry_ρθ","page":"API Reference","title":"Thermodynamics.PhaseDry_ρθ","text":"PhaseDry_ρθ(param_set, ρ, θ_dry)\n\nConstructs a PhaseDry thermodynamic state from density and dry potential temperature, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nρ density\nθ_dry dry potential temperature\n\nThe temperature is computed from the density and potential temperature using the dry air equation of state, and the internal energy is computed from the temperature.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseDry_ρT","page":"API Reference","title":"Thermodynamics.PhaseDry_ρT","text":"PhaseDry_ρT(param_set, ρ, T)\n\nConstructs a PhaseDry thermodynamic state from density and temperature, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nρ density\nT temperature\n\nThe internal energy is computed directly from the temperature using the dry air equation of state.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseDry_ρp","page":"API Reference","title":"Thermodynamics.PhaseDry_ρp","text":"PhaseDry_ρp(param_set, ρ, p)\n\nConstructs a PhaseDry thermodynamic state from density and pressure, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nρ density\np pressure\n\nThe temperature is computed from the ideal gas law using the pressure and density, and the internal energy is computed from the temperature.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseEquil","page":"API Reference","title":"Thermodynamics.PhaseEquil","text":"PhaseEquil{FT} <: AbstractPhaseEquil\n\nA thermodynamic state assuming thermodynamic equilibrium between water phases. This state assumes that the water vapor is in equilibrium with liquid and/or ice, requiring saturation adjustment to compute the temperature and phase partitioning.\n\nThe state stores the density, pressure, internal energy, total specific humidity, and the computed temperature from saturation adjustment.\n\nConstructors\n\nPhaseEquil(param_set, ρ, e_int, q_tot)\n\nFields\n\nρ: density of air (potentially moist)\np: air pressure\ne_int: internal energy\nq_tot: total specific humidity\nT: temperature: computed via saturation_adjustment\n\n\n\n\n\n","category":"type"},{"location":"API/#Thermodynamics.PhaseEquil_ρeq","page":"API Reference","title":"Thermodynamics.PhaseEquil_ρeq","text":"PhaseEquil_ρeq(param_set, ρ, e_int, q_tot[, maxiter, relative_temperature_tol, sat_adjust_method, T_guess])\n\nConstructs a PhaseEquil thermodynamic state from density, internal energy, and total specific humidity, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nρ density\ne_int specific internal energy\nq_tot total specific humidity\n\nand, optionally\n\nmaxiter maximum iterations for saturation adjustment (default: 8)\nrelative_temperature_tol relative temperature tolerance for saturation adjustment (default: 1e-4)\nsat_adjust_method the numerical method to use for saturation adjustment (default: NewtonsMethod)  See the Thermodynamics for options.\nT_guess initial guess for temperature in saturation adjustment\n\nThe temperature is computed using saturation adjustment to ensure thermodynamic equilibrium, and the pressure is computed from the equation of state using the temperature and density.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseEquil_ρTq","page":"API Reference","title":"Thermodynamics.PhaseEquil_ρTq","text":"PhaseEquil_ρTq(param_set, ρ, T, q_tot)\n\nConstructs a PhaseEquil thermodynamic state from density, temperature, and total specific humidity, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nρ density\nT temperature\nq_tot total specific humidity\n\nThe phase partitioning is computed assuming thermodynamic equilibrium at the given temperature, and the pressure and internal energy are computed from the equation of state.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseEquil_pTq","page":"API Reference","title":"Thermodynamics.PhaseEquil_pTq","text":"PhaseEquil_pTq(param_set, p, T, q_tot)\n\nConstructs a PhaseEquil thermodynamic state from pressure, temperature, and total specific humidity, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\nT temperature\nq_tot total specific humidity\n\nThe phase partitioning is computed assuming thermodynamic equilibrium at the given temperature, and the density and internal energy are computed from the equation of state.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseEquil_pθq","page":"API Reference","title":"Thermodynamics.PhaseEquil_pθq","text":"PhaseEquil_pθq(param_set, p, θ_liq_ice, q_tot[, maxiter, relative_temperature_tol, sat_adjust_method, T_guess])\n\nConstructs a PhaseEquil thermodynamic state from pressure, liquid-ice potential temperature, and total specific humidity, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np air pressure\nθ_liq_ice liquid-ice potential temperature\nq_tot total specific humidity\n\nand, optionally\n\nmaxiter maximum iterations for saturation adjustment (default: 50)\nrelative_temperature_tol relative temperature tolerance for saturation adjustment (default: 1e-4)\nsat_adjust_method the numerical method to use for saturation adjustment (default: SecantMethod)  See the Thermodynamics for options.\nT_guess initial guess for temperature in saturation adjustment\n\nThe temperature is computed using saturation adjustment with respect to the liquid-ice potential temperature, and the density and internal energy are computed from the equation of state.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseEquil_peq","page":"API Reference","title":"Thermodynamics.PhaseEquil_peq","text":"PhaseEquil_peq(param_set, p, e_int, q_tot[, maxiter, relative_temperature_tol, sat_adjust_method, T_guess])\n\nConstructs a PhaseEquil thermodynamic state from pressure, internal energy, and total specific humidity, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\ne_int specific internal energy\nq_tot total specific humidity\n\nand, optionally\n\nmaxiter maximum iterations for saturation adjustment (default: 40)\nrelative_temperature_tol relative temperature tolerance for saturation adjustment (default: 1e-4)\nsat_adjust_method the numerical method to use for saturation adjustment (default: SecantMethod)  See the Thermodynamics for options.\nT_guess initial guess for temperature in saturation adjustment\n\nThe temperature is computed using saturation adjustment given pressure and internal energy, and the density is computed from the equation of state using the pressure and temperature.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseEquil_phq","page":"API Reference","title":"Thermodynamics.PhaseEquil_phq","text":"PhaseEquil_phq(param_set, p, h, q_tot[, maxiter, relative_temperature_tol, sat_adjust_method, T_guess])\n\nConstructs a PhaseEquil thermodynamic state from pressure, specific enthalpy, and total specific humidity, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\nh specific enthalpy\nq_tot total specific humidity\n\nand, optionally\n\nmaxiter maximum iterations for saturation adjustment (default: 40)\nrelative_temperature_tol relative temperature tolerance for saturation adjustment (default: 1e-4)\nsat_adjust_method the numerical method to use for saturation adjustment (default: SecantMethod)  See the Thermodynamics for options.\nT_guess initial guess for temperature in saturation adjustment\n\nThe temperature is computed using saturation adjustment given pressure and specific enthalpy, and the density and internal energy are computed from the equation of state.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseEquil_ρθq","page":"API Reference","title":"Thermodynamics.PhaseEquil_ρθq","text":"PhaseEquil_ρθq(param_set, ρ, θ_liq_ice, q_tot[, maxiter, relative_temperature_tol, T_guess])\n\nConstructs a PhaseEquil thermodynamic state from density, liquid-ice potential temperature, and total specific humidity, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nρ (moist-)air density\nθ_liq_ice liquid-ice potential temperature\nq_tot total specific humidity\n\nand, optionally\n\nmaxiter maximum iterations for saturation adjustment (default: 36)\nrelative_temperature_tol relative temperature tolerance for saturation adjustment (default: 1e-4)\nT_guess initial guess for temperature in saturation adjustment\n\nThe temperature is computed using saturation adjustment with respect to the liquid-ice potential temperature, and the pressure and internal energy are computed from the equation of state.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseEquil_ρpq","page":"API Reference","title":"Thermodynamics.PhaseEquil_ρpq","text":"PhaseEquil_ρpq(param_set, ρ, p, q_tot[, perform_sat_adjust=true, maxiter, sat_adjust_method, T_guess])\n\nConstructs a PhaseEquil thermodynamic state from density, pressure, and total specific humidity, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nρ density\np pressure\nq_tot total specific humidity\n\nand, optionally\n\nperform_sat_adjust Boolean indicating whether to perform saturation adjustment (default: false)\nmaxiter maximum number of iterations to perform in saturation adjustment (default: 5)\nsat_adjust_method the numerical method to use for saturation adjustment (default: NewtonsMethodAD)  See the Thermodynamics for options.\nT_guess initial guess for temperature in saturation adjustment\n\nIf perform_sat_adjust is true, the temperature is computed using saturation adjustment. Otherwise, the temperature is computed directly from the ideal gas law. The internal energy is computed from the temperature and phase partitioning.\n\nTODO: change input argument order: performsatadjust is       unique to this constructor, so it should be last.       (breaking change)\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseNonEquil","page":"API Reference","title":"Thermodynamics.PhaseNonEquil","text":" PhaseNonEquil{FT} <: ThermodynamicState\n\nA thermodynamic state assuming thermodynamic non-equilibrium between water phases. This state allows for arbitrary phase partitioning without requiring saturation adjustment, enabling direct computation of temperature from the given thermodynamic variables.\n\nThe state stores the internal energy, density, and a complete phase partition specifying the distribution of water substance between vapor, liquid, and ice phases.\n\nConstructors\n\nPhaseNonEquil(param_set, e_int, q::PhasePartition, ρ)\n\nFields\n\ne_int: internal energy\nρ: density of air (potentially moist)\nq: phase partition\n\n\n\n\n\n","category":"type"},{"location":"API/#Thermodynamics.PhaseNonEquil_ρTq","page":"API Reference","title":"Thermodynamics.PhaseNonEquil_ρTq","text":"PhaseNonEquil_ρTq(param_set, ρ, T, q_pt)\n\nConstructs a PhaseNonEquil thermodynamic state from density, temperature, and phase partition, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nρ (moist-)air density\nT temperature\nq_pt phase partition\n\nThe internal energy is computed from the temperature and phase partition using the equation of state.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseNonEquil_pTq","page":"API Reference","title":"Thermodynamics.PhaseNonEquil_pTq","text":"PhaseNonEquil_pTq(param_set, p, T, q_pt)\n\nConstructs a PhaseNonEquil thermodynamic state from pressure, temperature, and phase partition, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\nT air temperature\nq_pt phase partition\n\nThe density is computed from the ideal gas law using the pressure and temperature, and the internal energy is computed from the temperature and phase partition.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseNonEquil_ρθq","page":"API Reference","title":"Thermodynamics.PhaseNonEquil_ρθq","text":"PhaseNonEquil_ρθq(param_set, ρ, θ_liq_ice, q_pt)\n\nConstructs a PhaseNonEquil thermodynamic state from density, liquid-ice potential temperature, and phase partition, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nρ (moist-)air density\nθ_liq_ice liquid-ice potential temperature\nq_pt phase partition\n\nand, optionally\n\nmaxiter maximum iterations for non-linear equation solve (default: 10)\nrelative_temperature_tol relative temperature tolerance for non-linear equation solve (default: 1e-2)\n\nThe temperature is computed from the density and liquid-ice potential temperature using a non-linear solver, and the internal energy is computed from the temperature and phase partition.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseNonEquil_pθq","page":"API Reference","title":"Thermodynamics.PhaseNonEquil_pθq","text":"PhaseNonEquil_pθq(param_set, p, θ_liq_ice, q_pt)\n\nConstructs a PhaseNonEquil thermodynamic state from pressure, liquid-ice potential temperature, and phase partition, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\nθ_liq_ice liquid-ice potential temperature\nq_pt phase partition\n\nThe temperature is computed from the pressure and liquid-ice potential temperature, and the density and internal energy are computed from the equation of state.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseNonEquil_peq","page":"API Reference","title":"Thermodynamics.PhaseNonEquil_peq","text":"PhaseNonEquil_peq(param_set, p, e_int, q_pt)\n\nConstructs a PhaseNonEquil thermodynamic state from pressure, internal energy, and phase partition, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\ne_int specific internal energy\nq_pt phase partition\n\nThe temperature is computed from the internal energy and phase partition using the equation of state, and the density is computed from the ideal gas law using the pressure and temperature.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseNonEquil_phq","page":"API Reference","title":"Thermodynamics.PhaseNonEquil_phq","text":"PhaseNonEquil_phq(param_set, p, h, q_pt)\n\nConstructs a PhaseNonEquil thermodynamic state from pressure, specific enthalpy, and phase partition, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\nh specific enthalpy\nq_pt phase partition\n\nThe temperature is computed from the specific enthalpy and phase partition using the equation of state, and the density and internal energy are computed from the equation of state.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhaseNonEquil_ρpq","page":"API Reference","title":"Thermodynamics.PhaseNonEquil_ρpq","text":"PhaseNonEquil_ρpq(param_set, ρ, p, q_pt)\n\nConstructs a PhaseNonEquil thermodynamic state from density, pressure, and phase partition, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nρ density\np pressure\nq_pt phase partition\n\nThe temperature is computed from the ideal gas law using the pressure and density, and the internal energy is computed from the temperature and phase partition.\n\n\n\n\n\n","category":"function"},{"location":"API/#Types","page":"API Reference","title":"Types","text":"","category":"section"},{"location":"API/#Thermodynamics.Ice","page":"API Reference","title":"Thermodynamics.Ice","text":"Ice <: Phase\n\nAn ice phase, to dispatch over saturation_vapor_pressure and q_vap_saturation_generic.\n\n\n\n\n\n","category":"type"},{"location":"API/#Thermodynamics.Liquid","page":"API Reference","title":"Thermodynamics.Liquid","text":"Liquid <: Phase\n\nA liquid phase, to dispatch over saturation_vapor_pressure and q_vap_saturation_generic.\n\n\n\n\n\n","category":"type"},{"location":"API/#Thermodynamic-Functions","page":"API Reference","title":"Thermodynamic Functions","text":"","category":"section"},{"location":"API/#Thermodynamics.air_density","page":"API Reference","title":"Thermodynamics.air_density","text":"air_density(param_set, T, p[, q::PhasePartition])\n\nThe (moist-)air density from the equation of state (ideal gas law), given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT air temperature\np pressure\n\nand, optionally,\n\nq PhasePartition. \n\nWhen q is not provided, the results are for dry air.\n\n\n\n\n\nair_density(param_set, ts::ThermodynamicState)\n\nThe (moist-)air density, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.air_pressure","page":"API Reference","title":"Thermodynamics.air_pressure","text":"air_pressure(param_set, T, ρ[, q::PhasePartition])\n\nThe air pressure from the equation of state (ideal gas law), given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT air temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. \n\nWhen q is not provided, the results are for dry air.\n\n\n\n\n\nair_pressure(param_set, T, T∞, p∞, ::DryAdiabaticProcess)\n\nThe air pressure for an isentropic process, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT current temperature\nT∞ reference temperature\np∞ reference pressure\n\nThe pressure is computed using the isentropic relation: p = p∞ * (T/T∞)^(1/κ), where κ = R/cₚ is the ratio of the gas constant to the isobaric specific heat capacity of dry air.\n\n\n\n\n\nair_pressure(param_set, ts::ThermodynamicState)\n\nThe air pressure from the equation of state (ideal gas law), given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.air_temperature","page":"API Reference","title":"Thermodynamics.air_temperature","text":"air_temperature(param_set, e_int[, q::PhasePartition])\n\nThe air temperature, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\ne_int specific internal energy of moist air\n\nand, optionally,\n\nq PhasePartition. \n\nWhen q is not provided, the results are for dry air.\n\n\n\n\n\nair_temperature(param_set, p, θ, ::DryAdiabaticProcess)\n\nThe air temperature, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\nθ potential temperature\n\nThe temperature is computed using the definition of the dry potential temperature: T = θ * (p/p₀)^(R/cₚ), where p₀ is the reference pressure, R is the gas constant of dry air, and cₚ is the isobaric specific heat capacity of dry air.\n\n\n\n\n\nair_temperature(param_set, ts::ThermodynamicState)\n\nThe air temperature, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.air_pressure_given_θ","page":"API Reference","title":"Thermodynamics.air_pressure_given_θ","text":"air_pressure_given_θ(param_set, θ, Φ, ::DryAdiabaticProcess)\n\nThe air pressure for an isentropic process, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nθ potential temperature\nΦ gravitational potential\n\nThe pressure is computed using the hydrostatic balance and the definition of potential temperature for an isentropic process: p = p₀ * (1 - Φ/(θ * cₚ))^(cₚ/R), where p₀ is the reference pressure, cₚ is the isobaric specific heat capacity of dry air, and R is the gas constant of dry air.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.air_temperature_given_ρp","page":"API Reference","title":"Thermodynamics.air_temperature_given_ρp","text":"air_temperature_given_ρp(param_set, p, ρ[, q::PhasePartition])\n\nThe air temperature, where\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np air pressure\nρ air density\n\nand, optionally,\n\nq PhasePartition. \n\nWhen q is not provided, the results are for dry air.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.condensate","page":"API Reference","title":"Thermodynamics.condensate","text":"condensate(q::PhasePartition{FT})\n\nThis is identical to condensate_specific_humidity and will be removed in a future release.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.condensate_specific_humidity","page":"API Reference","title":"Thermodynamics.condensate_specific_humidity","text":"condensate_specific_humidity(q::PhasePartition{FT})\n\nThe condensate specific humidity (liquid + ice) of the phase  partition q.\n\n\n\n\n\ncondensate_specific_humidity(param_set, ts::ThermodynamicState)\n\nThe condensate specific humidity (liquid + ice) given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.cp_m","page":"API Reference","title":"Thermodynamics.cp_m","text":"cp_m(param_set, q_tot, q_liq, q_ice)\n\nThe isobaric specific heat capacity of moist air, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nq_tot total specific humidity of water\nq_liq specific humidity of liquid\nq_ice specific humidity of ice\n\n\n\n\n\ncp_m(param_set[, q::PhasePartition])\n\nThe isobaric specific heat capacity of moist air given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nq PhasePartition.\n\nWhen q is not provided, the results are for dry air.\n\n\n\n\n\ncp_m(param_set, ts::ThermodynamicState)\n\nThe isobaric specific heat capacity of moist air, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.cv_m","page":"API Reference","title":"Thermodynamics.cv_m","text":"cv_m(param_set[, q::PhasePartition])\n\nThe isochoric specific heat capacity of moist air, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nq PhasePartition. Without humidity argument, the results are for dry air.\n\n\n\n\n\ncv_m(param_set, ts::ThermodynamicState)\n\nThe isochoric specific heat capacity of moist air, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.dry_pottemp","page":"API Reference","title":"Thermodynamics.dry_pottemp","text":"dry_pottemp(param_set, T, ρ[, q::PhasePartition])\n\nThe dry potential temperature, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. \n\nWhen q is not provided, the results are for dry air.\n\n\n\n\n\ndry_pottemp(param_set, ts::ThermodynamicState)\n\nThe dry potential temperature, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.exner","page":"API Reference","title":"Thermodynamics.exner","text":"exner(param_set, T, ρ[, q::PhasePartition)])\n\nThe Exner function, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. \n\nWhen q is not provided, the results are for dry air.\n\n\n\n\n\nexner(param_set, ts::ThermodynamicState)\n\nThe Exner function, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.gas_constant_air","page":"API Reference","title":"Thermodynamics.gas_constant_air","text":"gas_constant_air(param_set, q_tot, q_liq, q_ice)\n\nThe specific gas constant of moist air, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nq_tot, q_liq, q_ice - specific humidities for total water, liquid water, and ice\n\n\n\n\n\ngas_constant_air(param_set[, q::PhasePartition])\n\nThe specific gas constant of moist air, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nq PhasePartition.\n\nWhen q is not provided, the results are for dry air.\n\n\n\n\n\ngas_constant_air(param_set, ts::ThermodynamicState)\n\nThe specific gas constant of moist air given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.gas_constants","page":"API Reference","title":"Thermodynamics.gas_constants","text":"(R_m, cp_m, cv_m, γ_m) = gas_constants(param_set, q::PhasePartition)\n\nWrapper to compute the gas constant, specific heat capacities, and their  ratio at once, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nq PhasePartition\n\nThe function returns a tuple of\n\nR_m gas_constant_air\ncp_m cp_m\ncv_m cv_m\nγ_m = cp_m/cv_m\n\nThis function is deprecated and will be removed in a future release.\n\n\n\n\n\n(R_m, cp_m, cv_m, γ_m) = gas_constants(param_set, ts::ThermodynamicState)\n\nWrapper to compute the gas constant, specific heat capacities, and their ratio at once, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.has_condensate","page":"API Reference","title":"Thermodynamics.has_condensate","text":"has_condensate(q::PhasePartition{FT})\n\nBool indicating if condensate exists in the phase partition\n\n\n\n\n\nhas_condensate(param_set, ts::ThermodynamicState)\n\nBool indicating if condensate exists given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.ice_specific_humidity","page":"API Reference","title":"Thermodynamics.ice_specific_humidity","text":"ice_specific_humidity(q::PhasePartition)\n\nThe ice specific humidity, given\n\nq a PhasePartition\n\n\n\n\n\nice_specific_humidity(param_set, ts::ThermodynamicState)\n\nThe ice specific humidity, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.internal_energy","page":"API Reference","title":"Thermodynamics.internal_energy","text":"internal_energy(param_set, T[, q::PhasePartition])\n\nThe internal energy per unit mass, given \n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\n\nand, optionally,\n\nq PhasePartition. \n\nWhen q is not provided, the results are for dry air.\n\n\n\n\n\ninternal_energy(param_set, ts::ThermodynamicState)\n\nThe internal energy per unit mass, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.internal_energy_dry","page":"API Reference","title":"Thermodynamics.internal_energy_dry","text":"internal_energy_dry(param_set, T)\n\nThe dry air internal energy, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\n\n\n\n\n\ninternal_energy_dry(param_set, ts::ThermodynamicState)\n\nThe dry air internal energy, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.internal_energy_vapor","page":"API Reference","title":"Thermodynamics.internal_energy_vapor","text":"internal_energy_vapor(param_set, T)\n\nThe water vapor internal energy, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\n\n\n\n\n\ninternal_energy_vapor(param_set, ts::ThermodynamicState)\n\nThe water vapor internal energy, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.internal_energy_liquid","page":"API Reference","title":"Thermodynamics.internal_energy_liquid","text":"internal_energy_liquid(param_set, T)\n\nThe liquid water internal energy, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\n\n\n\n\n\ninternal_energy_liquid(param_set, ts::ThermodynamicState)\n\nThe liquid water internal energy, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.internal_energy_ice","page":"API Reference","title":"Thermodynamics.internal_energy_ice","text":"internal_energy_ice(param_set, T)\n\nThe ice internal energy, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\n\n\n\n\n\ninternal_energy_ice(param_set, ts::ThermodynamicState)\n\nThe ice internal energy, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.internal_energy_sat","page":"API Reference","title":"Thermodynamics.internal_energy_sat","text":"internal_energy_sat(param_set, T, ρ, q_tot, phase_type)\n\nThe internal energy per unit mass in thermodynamic equilibrium  at saturation with a fixed temperature and total specific humidity,  given \n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\nq_tot total specific humidity\nphase_type a thermodynamic state type\n\n\n\n\n\ninternal_energy_sat(param_set, ts::ThermodynamicState)\n\nThe internal energy per unit mass in thermodynamic equilibrium at saturation with a fixed temperature and total specific humidity, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.latent_heat_fusion","page":"API Reference","title":"Thermodynamics.latent_heat_fusion","text":"latent_heat_fusion(param_set, T)\n\nThe specific latent heat of fusion, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\n\n\n\n\n\nlatent_heat_fusion(param_set, ts::ThermodynamicState)\n\nThe specific latent heat of fusion, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.latent_heat_liq_ice","page":"API Reference","title":"Thermodynamics.latent_heat_liq_ice","text":"latent_heat_liq_ice(param_set[, q::PhasePartition])\n\nSpecific-humidity weighted sum of latent heats of liquid and ice evaluated at reference temperature  T_0, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nq PhasePartition. \n\nWhen q is not provided, latent_heat_liq_ice is zero.\n\nThis is used in the evaluation of the liquid-ice potential temperature.\n\n\n\n\n\nlatent_heat_liq_ice(param_set::APS, ts::ThermodynamicState)\n\nSpecific-humidity weighted sum of latent heats of liquid and ice evaluated at reference temperature T_0, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.latent_heat_sublim","page":"API Reference","title":"Thermodynamics.latent_heat_sublim","text":"latent_heat_sublim(param_set, T)\n\nThe specific latent heat of sublimation, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\n\n\n\n\n\nlatent_heat_sublim(param_set, ts::ThermodynamicState)\n\nThe specific latent heat of sublimation, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.latent_heat_vapor","page":"API Reference","title":"Thermodynamics.latent_heat_vapor","text":"latent_heat_vapor(param_set, T)\n\nThe specific latent heat of vaporization, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\n\n\n\n\n\nlatent_heat_vapor(param_set, ts::ThermodynamicState)\n\nThe specific latent heat of vaporization, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.liquid_fraction","page":"API Reference","title":"Thermodynamics.liquid_fraction","text":"liquid_fraction(param_set, T, phase_type[, q::PhasePartition])\n\nThe fraction of condensate that is liquid, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nphase_type a thermodynamic state type\n\nPhaseNonEquil behavior\n\nIf q.liq or q.ice are nonzero, the liquid fraction is computed from them.\n\nPhaseEquil, PhaseDry behavior\n\nOtherwise, the liquid fraction goes from 0 below T_icenuc to 1 above T_freeze, with a power law interpolation between the two temperatures based on Kaul et al., Monthly  Weather Rev., 2015, https://doi.org/10.1029/2009JD012384\n\n\n\n\n\nliquid_fraction(param_set, ts::ThermodynamicState)\n\nThe fraction of condensate that is liquid, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.liquid_ice_pottemp","page":"API Reference","title":"Thermodynamics.liquid_ice_pottemp","text":"liquid_ice_pottemp(param_set, T, ρ[, q::PhasePartition])\n\nThe liquid-ice potential temperature, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. \n\nWhen q is not provided, the result is the dry-air potential temperature.\n\n\n\n\n\nliquid_ice_pottemp(param_set, ts::ThermodynamicState)\n\nThe liquid-ice potential temperature, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.liquid_ice_pottemp_sat","page":"API Reference","title":"Thermodynamics.liquid_ice_pottemp_sat","text":"liquid_ice_pottemp_sat(param_set, T, ρ, phase_type[, q::PhasePartition, cpm])\n\nThe saturated liquid ice potential temperature, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\nphase_type a thermodynamic state type\n\nand, optionally,\n\nq PhasePartition. \n\nWhen q is not provided, the air assumed to be dry.\n\n\n\n\n\nliquid_ice_pottemp_sat(param_set, T, ρ, phase_type, q_tot)\n\nThe saturated liquid ice potential temperature, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\nphase_type a thermodynamic state type\nq_tot total specific humidity\n\n\n\n\n\nliquid_ice_pottemp_sat(param_set, ts::ThermodynamicState)\n\nThe liquid potential temperature, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.liquid_specific_humidity","page":"API Reference","title":"Thermodynamics.liquid_specific_humidity","text":"liquid_specific_humidity(q::PhasePartition)\n\nThe liquid specific humidity, given\n\nq a PhasePartition\n\n\n\n\n\nliquid_specific_humidity(param_set, ts::ThermodynamicState)\n\nThe liquid specific humidity, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.mixing_ratios","page":"API Reference","title":"Thermodynamics.mixing_ratios","text":"mixing_ratios(q::PhasePartition)\n\nThe mixing ratios, given a specific humidity phase partition, q, returned in a  PhasePartition with the fields\n\nr.tot total mixing ratio\nr.liq liquid mixing ratio\nr.ice ice mixing ratio\n\n\n\n\n\nmixing_ratios(param_set, ts::ThermodynamicState)\n\nThe mixing ratios, stored in a PhasePartition, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.moist_static_energy","page":"API Reference","title":"Thermodynamics.moist_static_energy","text":"moist_static_energy(param_set, ts, e_pot)\n\nThe moist static energy, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.virtual_dry_static_energy","page":"API Reference","title":"Thermodynamics.virtual_dry_static_energy","text":"virtual_dry_static_energy(param_set, ts, e_pot)\n\nThe virtual dry static energy, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.q_vap_from_RH_liquid","page":"API Reference","title":"Thermodynamics.q_vap_from_RH_liquid","text":"q_vap_from_RH_liquid(param_set, p, T, RH)\n\nThe water vapor specific humidity, given \n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\nT temperature\nRH relative humidity with respect to liquid water\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.q_vap_saturation","page":"API Reference","title":"Thermodynamics.q_vap_saturation","text":"q_vap_saturation(param_set, T, ρ, phase_type[, q::PhasePartition])\n\nThe saturation specific humidity, given\n\nparam_set: an AbstractParameterSet, see the Thermodynamics for more details\nT: temperature\nρ: air density\nphase_type: a thermodynamic state type\n(optional) q: PhasePartition\n\nIf the PhasePartition q is given, the saturation specific humidity is that over a mixture of liquid and ice, computed in a thermodynamically consistent way from the weighted sum of the latent heats of the respective phase transitions (Pressel et al., JAMES, 2015). That is, the saturation vapor pressure and from it the saturation specific humidity are computed from a weighted mean of the latent heats of vaporization and sublimation, with the weights given by the liquid fraction.\n\nIf the PhasePartition q is not given, or has zero liquid and ice specific humidities, the saturation specific humidity is that over a mixture of liquid and ice, with the fraction of liquid given by the temperature dependent liquid_fraction(param_set, T, phase_type) and the fraction of ice by the complement 1 - liquid_fraction(param_set, T, phase_type).\n\n\n\n\n\nq_vap_saturation(param_set, ts::ThermodynamicState)\n\nThe saturation specific humidity, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.q_vap_saturation_liquid","page":"API Reference","title":"Thermodynamics.q_vap_saturation_liquid","text":"q_vap_saturation_liquid(param_set, ts::ThermodynamicState)\n\nThe saturation specific humidity over liquid, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.q_vap_saturation_ice","page":"API Reference","title":"Thermodynamics.q_vap_saturation_ice","text":"q_vap_saturation_ice(param_set, ts::ThermodynamicState)\n\nThe saturation specific humidity over ice, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.q_vap_from_p_vap","page":"API Reference","title":"Thermodynamics.q_vap_from_p_vap","text":"q_vap_from_p_vap(param_set, T, ρ, p_v)\n\nThe vapor specific humidity, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature,\nρ (moist-)air density\np_v partial pressure of vapor\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.q_vap_saturation_from_density","page":"API Reference","title":"Thermodynamics.q_vap_saturation_from_density","text":"q_vap_saturation_from_density(param_set, T, ρ, p_v)\n\nThis function is identical to q_vap_from_p_vap and is provided for backward compatibility.  It will be removed in a future release.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.partial_pressure_vapor","page":"API Reference","title":"Thermodynamics.partial_pressure_vapor","text":"partial_pressure_vapor(param_set, p[, q::PhasePartition])\n\nThe partial pressure of water vapor, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np air pressure\nq phase partition\n\nWhen q is not provided, the partial pressure is zero.\n\n\n\n\n\npartial_pressure_vapor(param_set, ts::ThermodynamicState)\n\nThe partial pressure of water vapor, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.partial_pressure_dry","page":"API Reference","title":"Thermodynamics.partial_pressure_dry","text":"partial_pressure_dry(param_set, p[, q::PhasePartition])\n\nThe partial pressure of dry air, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np air pressure\nq phase partition\n\nWhen q is not provided, the partial pressure is the total pressure.\n\n\n\n\n\npartial_pressure_dry(param_set, ts::ThermodynamicState)\n\nThe partial pressure of dry air, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.relative_humidity","page":"API Reference","title":"Thermodynamics.relative_humidity","text":"relative_humidity(param_set, T, p, phase_type[, q::PhasePartition])\n\nThe relative humidity (clipped between 0 and 1), given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\nphase_type a thermodynamic state type\n\nand, optionally,\n\nq PhasePartition. \n\nWhen q is not provided, the relative humidity is 0.\n\n\n\n\n\nrelative_humidity(param_set, ts::ThermodynamicState)\n\nThe relative humidity, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.saturated","page":"API Reference","title":"Thermodynamics.saturated","text":"saturated(param_set::APS, ts::ThermodynamicState)\n\nBoolean indicating if thermodynamic state is saturated.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.saturation_adjustment","page":"API Reference","title":"Thermodynamics.saturation_adjustment","text":"saturation_adjustment(\n    sat_adjust_method,\n    param_set,\n    e_int,\n    ρ,\n    q_tot,\n    phase_type,\n    maxiter,\n    relative_temperature_tol,\n    T_guess,\n)\n\nComputes the saturation equilibrium temperature given internal energy e_int, density ρ, and total specific humidity q_tot.\n\nThis function finds the temperature T that satisfies the root equation: e_int - internal_energy_sat(T, ρ, q_tot) = 0. It is the most common entry point for saturation adjustment.\n\nArguments\n\nsat_adjust_method: The numerical method for root-finding (e.g., NewtonsMethod, SecantMethod).\nparam_set: An AbstractParameterSet containing thermodynamic parameters.\ne_int: Specific internal energy.\nρ: Density of moist air.\nq_tot: Total specific humidity (vapor + condensate).\nphase_type: A thermodynamic phase type (PhaseEquil, etc.).\nmaxiter: Maximum iterations for the solver.\nrelative_temperature_tol: Relative tolerance for the temperature solution.\nT_guess: An initial guess for the temperature.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.saturation_excess","page":"API Reference","title":"Thermodynamics.saturation_excess","text":"saturation_excess(param_set, T, ρ, phase_type, q::PhasePartition)\n\nThe saturation excess in equilibrium, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\nphase_type a thermodynamic state type\nq PhasePartition\n\nThe saturation excess is the difference between the total specific humidity q.tot and the saturation specific humidity in equilibrium, and it is defined to be nonzero only if this difference is positive.\n\n\n\n\n\nsaturation_excess(param_set, T, ρ, p_vap_sat, q::PhasePartition)\n\nThe saturation excess given the saturation vapor pressure p_vap_sat:\n\nparam_set: Thermodynamic parameter set\nT: Temperature\nρ: Air density\np_vap_sat: Saturation vapor pressure\nq: Phase partition\n\nThe saturation excess is the difference between the total specific humidity q.tot and the saturation specific humidity, and it is defined to be nonzero only if this difference is positive.\n\n\n\n\n\nsaturation_excess(param_set, ts::ThermodynamicState)\n\nThe saturation excess in equilibrium, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.saturation_vapor_pressure","page":"API Reference","title":"Thermodynamics.saturation_vapor_pressure","text":"saturation_vapor_pressure(param_set, T, ::Phase)\nsaturation_vapor_pressure(param_set, T, LH_0, Δcp)\n\nThe saturation vapor pressure over a plane surface of condensate, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature or ts a thermodynamic state\nPhase either Liquid() or Ice() to dispatch over the condensate type\n\nor, given\n\nparam_set an AbstractParameterSet\nT temperature  \nLH_0 latent heat at reference temperature T_0\nΔcp difference in isobaric specific heat capacity between the two phases\n\nThe saturation vapor pressure is computed by integration of the Clausius-Clapeyron relation, assuming constant specific heat capacities. The closed-form solution is: p_v^*(T) = p_tr * (T/T_tr)^(Δc_p/R_v) * exp((L_0 - Δc_p*T_0)/R_v * (1/T_tr - 1/T)), where p_tr is the triple point pressure, T_tr is the triple point temperature, L_0 is the latent heat at the reference temperature T_0, and Δc_p is the difference in isobaric specific heat capacities between the phases.\n\n\n\n\n\nsaturation_vapor_pressure(param_set, ts::ThermodynamicState, ::Liquid)\n\nThe saturation vapor pressure over a plane surface of condensate, given a thermodynamic state ts and phase Liquid.\n\n\n\n\n\nsaturation_vapor_pressure(param_set, ts::ThermodynamicState, ::Ice)\n\nThe saturation vapor pressure over a plane surface of condensate, given a thermodynamic state ts and phase Ice.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.soundspeed_air","page":"API Reference","title":"Thermodynamics.soundspeed_air","text":"soundspeed_air(param_set, T[, q::PhasePartition])\n\nThe speed of sound in unstratified air, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\n\nand, optionally,\n\nq PhasePartition. \n\nWhen q is not provided, the results are for dry air.\n\n\n\n\n\nsoundspeed_air(param_set, ts::ThermodynamicState)\n\nThe speed of sound in unstratified air, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.specific_enthalpy","page":"API Reference","title":"Thermodynamics.specific_enthalpy","text":"specific_enthalpy(e_int, R_m, T)\n\nThe specific enthalpy, given\n\ne_int internal specific energy\nR_m gas_constant_air\nT air temperature\n\nThis method is deprecated and will be removed in a future release.\n\n\n\n\n\nspecific_enthalpy(param_set, T[, q::PhasePartition])\n\nThe specific enthalpy, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\n\nand, optionally,\n\nq PhasePartition. \n\nWhen q is not provided, the results are for dry air.\n\n\n\n\n\nspecific_enthalpy(param_set, ts)\n\nThe specific enthalpy, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.specific_volume","page":"API Reference","title":"Thermodynamics.specific_volume","text":"specific_volume(param_set, ts::ThermodynamicState)\n\nThe (moist-)air specific volume, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.supersaturation","page":"API Reference","title":"Thermodynamics.supersaturation","text":"supersaturation(param_set, q, ρ, T, Liquid())\nsupersaturation(param_set, q, ρ, T, Ice())\n\nThe supersaturation (pv/pv_sat -1) over water or ice, given\n\nparam_set - abstract set with earth parameters\nq - phase partition\nρ - air density,\nT - air temperature\nLiquid(), Ice() - liquid or ice phase to dispatch over.\n\n\n\n\n\nsupersaturation(param_set, q::PhasePartition, ρ, T, p_v_sat)\n\nThe supersaturation (pv/pvsat - 1) given the saturation vapor pressure `pv_sat`:\n\nparam_set: Thermodynamic parameter set\nq: Phase partition\nρ: Air density\nT: Temperature\np_v_sat: Saturation vapor pressure\n\n\n\n\n\nsupersaturation(param_set::APS, ts::ThermodynamicState, phase::Phase)\n\nThe supersaturation (pv/pv_sat -1) over water or ice, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.total_energy","page":"API Reference","title":"Thermodynamics.total_energy","text":"total_energy(param_set, e_kin, e_pot, T[, q::PhasePartition])\n\nThe total energy per unit mass, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\ne_kin kinetic energy per unit mass\ne_pot gravitational potential energy per unit mass\nT temperature\n\nand, optionally,\n\nq PhasePartition. \n\nWhen q is not provided, the results are for dry air.\n\n\n\n\n\ntotal_energy(param_set, ts::ThermodynamicState, e_kin, e_pot)\n\nThe total energy per unit mass, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.total_specific_enthalpy","page":"API Reference","title":"Thermodynamics.total_specific_enthalpy","text":"total_specific_enthalpy(param_set, e_tot, T[, q::PhasePartition])\n\nThe total specific enthalpy, defined as e_tot + R_m * T, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\ne_tot total specific energy\nT temperature\n\nand, optionally,\n\nq PhasePartition. \n\nWhen q is not provided, the results are for dry air.\n\n\n\n\n\ntotal_specific_enthalpy(e_tot, R_m, T)\n\nThe total specific enthalpy, given\n\ne_tot total specific energy\nR_m gas_constant_air\nT air temperature\n\n\n\n\n\ntotal_specific_enthalpy(param_set, ts, e_tot::Real)\n\nThe total specific enthalpy, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.total_specific_humidity","page":"API Reference","title":"Thermodynamics.total_specific_humidity","text":"total_specific_humidity(param_set, ts::ThermodynamicState)\n\nThe total specific humidity, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.vapor_pressure_deficit","page":"API Reference","title":"Thermodynamics.vapor_pressure_deficit","text":"vapor_pressure_deficit(param_set, T, p[, q::PhasePartition])\n\nThe vapor pressure deficit (saturation vapor pressure minus actual  vapor pressure, truncated to be non-negative) over liquid water for temperatures  above freezing and over ice for temperatures below freezing, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT air temperature\np air pressure\nq PhasePartition\n\nWhen q is not provided, the vapor pressure deficit is the saturation vapor pressure.\n\n\n\n\n\nvapor_pressure_deficit(param_set, T, p, q_vap)\n\nThe vapor pressure deficit over liquid water (saturation vapor pressure minus actual  vapor pressure, truncated to be non-negative), given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT air temperature\np air pressure\nq_vap vapor specific humidity\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.vapor_specific_humidity","page":"API Reference","title":"Thermodynamics.vapor_specific_humidity","text":"vapor_specific_humidity(q::PhasePartition)\n\nThe vapor specific humidity, given a \n\nq a PhasePartition \n\n\n\n\n\nvapor_specific_humidity(param_set, ts::ThermodynamicState)\n\nThe vapor specific humidity, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.vol_vapor_mixing_ratio","page":"API Reference","title":"Thermodynamics.vol_vapor_mixing_ratio","text":"vol_vapor_mixing_ratio(param_set, q::PhasePartition)\n\nThe volume mixing ratio of water vapor, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nq PhasePartition\n\n\n\n\n\nvol_vapor_mixing_ratio(param_set, ts::ThermodynamicState)\n\nThe volume mixing ratio of water vapor, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.virtual_pottemp","page":"API Reference","title":"Thermodynamics.virtual_pottemp","text":"virtual_pottemp(param_set, T, ρ[, q::PhasePartition])\n\nThe virtual potential temperature, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. \n\nWhen q is not provided, the result is the dry-air potential temperature.\n\nThe virtual potential temperature is defined as θ_v = (R_m/R_d) * θ, where θ is the potential temperature. It is the potential temperature a dry air parcel would need to have to have the same density as the moist air parcel at the same pressure.\n\n\n\n\n\nvirtual_pottemp(param_set, ts::ThermodynamicState)\n\nThe virtual potential temperature, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.virtual_temperature","page":"API Reference","title":"Thermodynamics.virtual_temperature","text":"virtual_temperature(param_set, T[, q::PhasePartition])\n\nThe virtual temperature, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\n\nand, optionally,\n\nq PhasePartition. \n\nWhen q is not provided, the result is the regular temperature. \n\nThe virtual temperature is defined as T_v = (R_m/R_d) * T. It is the temperature a dry air parcel would need to have to have the same density as the moist air parcel at the same pressure.\n\n\n\n\n\nvirtual_temperature(param_set, ts::ThermodynamicState)\n\nThe virtual temperature, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.specific_entropy","page":"API Reference","title":"Thermodynamics.specific_entropy","text":"specific_entropy(param_set, p, T, q)\nspecific_entropy(param_set, ts)\n\nThe specific entropy, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\np pressure\nT temperature\nq phase partition\n\nThe specific entropy is computed from equations (29)-(33) of [8].\n\n\n\n\n\nspecific_entropy(param_set, ts)\n\nThe specific entropy, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Internal-Methods","page":"API Reference","title":"Internal Methods","text":"","category":"section"},{"location":"API/#Thermodynamics.shum_to_mixing_ratio","page":"API Reference","title":"Thermodynamics.shum_to_mixing_ratio","text":"shum_to_mixing_ratio(q, q_tot)\n\nThe mixing ratio, given\n\nq specific humidity\nq_tot total specific humidity\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.q_vap_saturation_generic","page":"API Reference","title":"Thermodynamics.q_vap_saturation_generic","text":"q_vap_saturation_generic(param_set, T, ρ[, phase=Liquid()])\n\nThe saturation specific humidity over a plane surface of condensate, given     - param_set: an AbstractParameterSet, see the Thermodynamics for more details     - T: temperature     - ρ: air density     - (optional) Liquid(): indicating condensate is liquid (default)     - (optional) Ice(): indicating condensate is ice\n\nThe saturation specific humidity is computed as q_v^* = p_v^*(T) / (ρ * R_v * T), where p_v^* is the saturation vapor pressure.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.q_vap_saturation_from_pressure","page":"API Reference","title":"Thermodynamics.q_vap_saturation_from_pressure","text":"q_vap_saturation_from_pressure(param_set, q_tot, p, T, phase_type)\n\nThe saturation specific humidity, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nq_tot total water specific humidity,\np air pressure,\nT air tempearture\nphase_type a thermodynamic state type\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhasePartition_equil","page":"API Reference","title":"Thermodynamics.PhasePartition_equil","text":"PhasePartition_equil(param_set, T, ρ, q_tot, phase_type)\nPhasePartition_equil(param_set, T, ρ, q_tot, p_vap_sat, λ)\n\nPartition the phases in equilibrium, returning a PhasePartition object, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\nρ (moist-)air density\nq_tot total specific humidity\nphase_type a thermodynamic state type\np_vap_sat saturation vapor pressure\nλ liquid fraction\n\nThe residual q.tot - q.liq - q.ice is the vapor specific humidity.\n\n\n\n\n\nPhasePartition_equil(param_set, ts::ThermodynamicState)\n\nPartition the phases in equilibrium, returning a PhasePartition object, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.PhasePartition_equil_given_p","page":"API Reference","title":"Thermodynamics.PhasePartition_equil_given_p","text":"PhasePartition_equil_given_p(param_set, T, p, q_tot, phase_type)\n\nPartition the phases in equilibrium, returning a PhasePartition object using the liquid_fraction function, given\n\nparam_set an AbstractParameterSet, see the Thermodynamics for more details\nT temperature\np air pressure\nq_tot total specific humidity\nphase_type a thermodynamic state type\n\nThe residual q.tot - q.liq - q.ice is the vapor specific humidity.\n\n\n\n\n\n","category":"function"},{"location":"API/#Dispatch-Types","page":"API Reference","title":"Dispatch Types","text":"","category":"section"},{"location":"API/#Thermodynamics.DryAdiabaticProcess","page":"API Reference","title":"Thermodynamics.DryAdiabaticProcess","text":"DryAdiabaticProcess\n\nA type for dispatching to isentropic (dry adiabatic) formulas.\n\n\n\n\n\n","category":"type"},{"location":"API/#Temperature-Profiles","page":"API Reference","title":"Temperature Profiles","text":"","category":"section"},{"location":"API/#Thermodynamics.TemperatureProfiles.IsothermalProfile","page":"API Reference","title":"Thermodynamics.TemperatureProfiles.IsothermalProfile","text":"IsothermalProfile(param_set, T_virt)\nIsothermalProfile(param_set, ::Type{FT<:Real})\n\nUniform virtual temperature profile implemented as a special case  of DecayingTemperatureProfile.\n\n\n\n\n\n","category":"function"},{"location":"API/#Thermodynamics.TemperatureProfiles.TemperatureProfile","page":"API Reference","title":"Thermodynamics.TemperatureProfiles.TemperatureProfile","text":"TemperatureProfile\n\nAbstract type for temperature or virtual temperature reference profiles  that can be used in atmosphere models.\n\nInstances of this type are required to be callable objects with the  following signature\n\nT,p = (::TemperatureProfile)(param_set::APS, z::FT) where {FT}\n\nwhere T is the temperature or virtual temperature (K), and p is  the pressure (Pa).\n\n\n\n\n\n","category":"type"},{"location":"API/#Thermodynamics.TemperatureProfiles.DryAdiabaticProfile","page":"API Reference","title":"Thermodynamics.TemperatureProfiles.DryAdiabaticProfile","text":"DryAdiabaticProfile{FT} <: TemperatureProfile{FT}\n\nTemperature profile with uniform dry potential temperature θ up to  the height where a minimum temperature is reached.\n\nFields\n\nT_surface: Surface temperature (K)\nT_min_ref: Minimum temperature (K)\n\n\n\n\n\n","category":"type"},{"location":"API/#Thermodynamics.TemperatureProfiles.DecayingTemperatureProfile","page":"API Reference","title":"Thermodynamics.TemperatureProfiles.DecayingTemperatureProfile","text":"DecayingTemperatureProfile{FT} <: TemperatureProfile{FT}\n\nVirtual temperature profile that decays smoothly with height z from T_virt_surf to T_min_ref over height scale H_t (default: density scale height with T_virt_surf).\n\nT_textv(z) = max(T_textv sfc  (T_textv sfc - T_textv min) tanh(zH_textt)\n\nFields\n\nT_virt_surf: Virtual temperature at surface (K)\nT_min_ref: Minimum virtual temperature at the top of the atmosphere (K)\nH_t: Height scale over which virtual temperature drops (m)\n\n\n\n\n\n","category":"type"},{"location":"API/#Tested-Profiles","page":"API Reference","title":"Tested Profiles","text":"","category":"section"},{"location":"API/#Thermodynamics.TestedProfiles","page":"API Reference","title":"Thermodynamics.TestedProfiles","text":"TestedProfiles\n\nThis module contains functions to compute all of the thermodynamic  states that Thermodynamics is tested with in runtests.jl\n\n\n\n\n\n","category":"module"},{"location":"API/#Data-Collection","page":"API Reference","title":"Data Collection","text":"","category":"section"},{"location":"API/#Thermodynamics.DataCollection","page":"API Reference","title":"Thermodynamics.DataCollection","text":"DataCollection\n\nThis module is designed to help judge the accuracy and performance for a particular formulation, tolerance, and or solver configuration, by providing tools to collect various statistics when Thermodynamic saturation_adjustment is called.\n\nExample:\n\nimport Thermodynamics as TD\nimport RootSolvers as RS\n\nfunction do_work()\n    # Calls TD.PhaseEquil_ρeq()..., possibly many times\nend\n\nTD.solution_type() = RS.VerboseSolution()\ndo_work()\nTD.DataCollection.print_summary()\n\nwarn: Warn\nThis data collection was designed for unthreaded single processor runs, and may not work correctly for threaded / multi-processor runs.\n\n\n\n\n\n","category":"module"}]
}
